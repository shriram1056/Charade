/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_generated_graphql_tsx-src_utils_withApollo_ts";
exports.ids = ["src_generated_graphql_tsx-src_utils_withApollo_ts"];
exports.modules = {

/***/ "./src/generated/graphql.tsx":
/*!***********************************!*\
  !*** ./src/generated/graphql.tsx ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FragmentErrorFragmentDoc\": function() { return /* binding */ FragmentErrorFragmentDoc; },\n/* harmony export */   \"FragmentTeamFragmentDoc\": function() { return /* binding */ FragmentTeamFragmentDoc; },\n/* harmony export */   \"FragmentTeamResponseFragmentDoc\": function() { return /* binding */ FragmentTeamResponseFragmentDoc; },\n/* harmony export */   \"FragmentUserFragmentDoc\": function() { return /* binding */ FragmentUserFragmentDoc; },\n/* harmony export */   \"FragmentUserResponseFragmentDoc\": function() { return /* binding */ FragmentUserResponseFragmentDoc; },\n/* harmony export */   \"AddTeamMemberDocument\": function() { return /* binding */ AddTeamMemberDocument; },\n/* harmony export */   \"useAddTeamMemberMutation\": function() { return /* binding */ useAddTeamMemberMutation; },\n/* harmony export */   \"AddPictureDocument\": function() { return /* binding */ AddPictureDocument; },\n/* harmony export */   \"useAddPictureMutation\": function() { return /* binding */ useAddPictureMutation; },\n/* harmony export */   \"CreateChannelDocument\": function() { return /* binding */ CreateChannelDocument; },\n/* harmony export */   \"useCreateChannelMutation\": function() { return /* binding */ useCreateChannelMutation; },\n/* harmony export */   \"CreateDirectMessageDocument\": function() { return /* binding */ CreateDirectMessageDocument; },\n/* harmony export */   \"useCreateDirectMessageMutation\": function() { return /* binding */ useCreateDirectMessageMutation; },\n/* harmony export */   \"CreateMessageDocument\": function() { return /* binding */ CreateMessageDocument; },\n/* harmony export */   \"useCreateMessageMutation\": function() { return /* binding */ useCreateMessageMutation; },\n/* harmony export */   \"CreateTeamDocument\": function() { return /* binding */ CreateTeamDocument; },\n/* harmony export */   \"useCreateTeamMutation\": function() { return /* binding */ useCreateTeamMutation; },\n/* harmony export */   \"CreateUserDocument\": function() { return /* binding */ CreateUserDocument; },\n/* harmony export */   \"useCreateUserMutation\": function() { return /* binding */ useCreateUserMutation; },\n/* harmony export */   \"LoginDocument\": function() { return /* binding */ LoginDocument; },\n/* harmony export */   \"useLoginMutation\": function() { return /* binding */ useLoginMutation; },\n/* harmony export */   \"MessagesDocument\": function() { return /* binding */ MessagesDocument; },\n/* harmony export */   \"useMessagesQuery\": function() { return /* binding */ useMessagesQuery; },\n/* harmony export */   \"useMessagesLazyQuery\": function() { return /* binding */ useMessagesLazyQuery; },\n/* harmony export */   \"AllUserDocument\": function() { return /* binding */ AllUserDocument; },\n/* harmony export */   \"useAllUserQuery\": function() { return /* binding */ useAllUserQuery; },\n/* harmony export */   \"useAllUserLazyQuery\": function() { return /* binding */ useAllUserLazyQuery; },\n/* harmony export */   \"DirectMessageDocument\": function() { return /* binding */ DirectMessageDocument; },\n/* harmony export */   \"useDirectMessageQuery\": function() { return /* binding */ useDirectMessageQuery; },\n/* harmony export */   \"useDirectMessageLazyQuery\": function() { return /* binding */ useDirectMessageLazyQuery; },\n/* harmony export */   \"GetTeamMembersDocument\": function() { return /* binding */ GetTeamMembersDocument; },\n/* harmony export */   \"useGetTeamMembersQuery\": function() { return /* binding */ useGetTeamMembersQuery; },\n/* harmony export */   \"useGetTeamMembersLazyQuery\": function() { return /* binding */ useGetTeamMembersLazyQuery; },\n/* harmony export */   \"GetUserDocument\": function() { return /* binding */ GetUserDocument; },\n/* harmony export */   \"useGetUserQuery\": function() { return /* binding */ useGetUserQuery; },\n/* harmony export */   \"useGetUserLazyQuery\": function() { return /* binding */ useGetUserLazyQuery; },\n/* harmony export */   \"GetUserDirectDocument\": function() { return /* binding */ GetUserDirectDocument; },\n/* harmony export */   \"useGetUserDirectQuery\": function() { return /* binding */ useGetUserDirectQuery; },\n/* harmony export */   \"useGetUserDirectLazyQuery\": function() { return /* binding */ useGetUserDirectLazyQuery; },\n/* harmony export */   \"MeDocument\": function() { return /* binding */ MeDocument; },\n/* harmony export */   \"useMeQuery\": function() { return /* binding */ useMeQuery; },\n/* harmony export */   \"useMeLazyQuery\": function() { return /* binding */ useMeLazyQuery; },\n/* harmony export */   \"NewDirectMessageDocument\": function() { return /* binding */ NewDirectMessageDocument; },\n/* harmony export */   \"useNewDirectMessageSubscription\": function() { return /* binding */ useNewDirectMessageSubscription; },\n/* harmony export */   \"NewChannelMessageDocument\": function() { return /* binding */ NewChannelMessageDocument; },\n/* harmony export */   \"useNewChannelMessageSubscription\": function() { return /* binding */ useNewChannelMessageSubscription; }\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nconst FragmentErrorFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment FragmentError on FieldError {\n  field\n  message\n}\n    `;\nconst FragmentTeamFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment FragmentTeam on Team {\n  name\n}\n    `;\nconst FragmentTeamResponseFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment FragmentTeamResponse on TeamResponse {\n  errors {\n    ...FragmentError\n  }\n  team {\n    ...FragmentTeam\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentTeamFragmentDoc}`;\nconst FragmentUserFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment FragmentUser on Users {\n  id\n  username\n}\n    `;\nconst FragmentUserResponseFragmentDoc = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    fragment FragmentUserResponse on UserResponse {\n  errors {\n    ...FragmentError\n  }\n  user {\n    ...FragmentUser\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentUserFragmentDoc}`;\nconst AddTeamMemberDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation AddTeamMember($teamId: Int!, $email: String!) {\n  addTeamMember(teamId: $teamId, email: $email) {\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nfunction useAddTeamMemberMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(AddTeamMemberDocument, options);\n}\nconst AddPictureDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation addPicture($picture: Upload!, $channelId: Int!) {\n  addPicture(picture: $picture, channelId: $channelId)\n}\n    `;\n\n/**\n * __useAddPictureMutation__\n *\n * To run a mutation, you first call `useAddPictureMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPictureMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPictureMutation, { data, loading, error }] = useAddPictureMutation({\n *   variables: {\n *      picture: // value for 'picture'\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nfunction useAddPictureMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(AddPictureDocument, options);\n}\nconst CreateChannelDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation CreateChannel($teamId: Int!, $name: String!, $public: Boolean!, $members: [Int!]!) {\n  createChannel(teamId: $teamId, name: $name, public: $public, members: $members) {\n    channel {\n      id\n      name\n      public\n    }\n    errors {\n      ...FragmentError\n    }\n  }\n}\n    ${FragmentErrorFragmentDoc}`;\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *      public: // value for 'public'\n *      members: // value for 'members'\n *   },\n * });\n */\nfunction useCreateChannelMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateChannelDocument, options);\n}\nconst CreateDirectMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation CreateDirectMessage($text: String, $receiverId: Int!, $teamId: Int!, $file: Upload) {\n  createDirectMessages(\n    text: $text\n    receiverId: $receiverId\n    teamId: $teamId\n    file: $file\n  )\n}\n    `;\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *      file: // value for 'file'\n *   },\n * });\n */\nfunction useCreateDirectMessageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateDirectMessageDocument, options);\n}\nconst CreateMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation createMessage($channelId: Int!, $text: String, $file: Upload) {\n  createMessage(channelId: $channelId, text: $text, file: $file) {\n    id\n    text\n    url\n    fileType\n  }\n}\n    `;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *      file: // value for 'file'\n *   },\n * });\n */\nfunction useCreateMessageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateMessageDocument, options);\n}\nconst CreateTeamDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation CreateTeam($name: String!) {\n  createTeam(name: $name) {\n    ...FragmentTeamResponse\n  }\n}\n    ${FragmentTeamResponseFragmentDoc}`;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nfunction useCreateTeamMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateTeamDocument, options);\n}\nconst CreateUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation createUser($options: UserCredentials!) {\n  createUser(options: $options) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nfunction useCreateUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateUserDocument, options);\n}\nconst LoginDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    mutation Login($password: String!, $email: String!) {\n  Login(password: $password, email: $email) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nfunction useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(LoginDocument, options);\n}\nconst MessagesDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query Messages($channelId: Int!, $cursor: String) {\n  Messages(channelId: $channelId, cursor: $cursor) {\n    hasMore\n    Messages {\n      id\n      text\n      user {\n        username\n      }\n      createdAt\n      url\n      fileType\n    }\n  }\n}\n    `;\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nfunction useMessagesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(MessagesDocument, options);\n}\nfunction useMessagesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(MessagesDocument, options);\n}\nconst AllUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nfunction useAllUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(AllUserDocument, options);\n}\nfunction useAllUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(AllUserDocument, options);\n}\nconst DirectMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query DirectMessage($receiverId: Int!, $teamId: Int!, $cursor: String) {\n  DirectMessages(receiverId: $receiverId, teamId: $teamId, cursor: $cursor) {\n    hasMore\n    Messages {\n      id\n      text\n      sender {\n        username\n      }\n      createdAt\n      url\n      fileType\n    }\n  }\n}\n    `;\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nfunction useDirectMessageQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(DirectMessageDocument, options);\n}\nfunction useDirectMessageLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(DirectMessageDocument, options);\n}\nconst GetTeamMembersDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query GetTeamMembers($teamId: Int!) {\n  getTeamMembers(teamId: $teamId) {\n    id\n    username\n    email\n  }\n}\n    `;\n/**\n * __useGetTeamMembersQuery__\n *\n * To run a query within a React component, call `useGetTeamMembersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTeamMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTeamMembersQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nfunction useGetTeamMembersQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetTeamMembersDocument, options);\n}\nfunction useGetTeamMembersLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetTeamMembersDocument, options);\n}\nconst GetUserDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query getUser {\n  getUser {\n    id\n    username\n    team {\n      id\n      name\n      admin\n      directMessageUsers {\n        id\n        username\n      }\n      channels {\n        id\n        name\n        public\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nfunction useGetUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetUserDocument, options);\n}\nfunction useGetUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetUserDocument, options);\n}\nconst GetUserDirectDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query getUserDirect($id: Int!) {\n  User(id: $id) {\n    username\n  }\n  getUser {\n    id\n    username\n    team {\n      id\n      name\n      admin\n      directMessageUsers {\n        id\n        username\n      }\n      channels {\n        id\n        name\n        public\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGetUserDirectQuery__\n *\n * To run a query within a React component, call `useGetUserDirectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserDirectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserDirectQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nfunction useGetUserDirectQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetUserDirectDocument, options);\n}\nfunction useGetUserDirectLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetUserDirectDocument, options);\n}\nconst MeDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query Me {\n  me {\n    id\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nfunction useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(MeDocument, options);\n}\nfunction useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(MeDocument, options);\n}\nconst NewDirectMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    subscription NewDirectMessage($receiverId: Int!, $teamId: Int!) {\n  newDirectMessage(receiverId: $receiverId, teamId: $teamId) {\n    id\n    text\n    sender {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n/**\n * __useNewDirectMessageSubscription__\n *\n * To run a query within a React component, call `useNewDirectMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewDirectMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewDirectMessageSubscription({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nfunction useNewDirectMessageSubscription(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useSubscription(NewDirectMessageDocument, options);\n}\nconst NewChannelMessageDocument = _apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    subscription NewChannelMessage($channelId: Int!) {\n  newChannelMessage(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nfunction useNewChannelMessageSubscription(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useSubscription(NewChannelMessageDocument, options);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/generated/graphql.tsx\n");

/***/ }),

/***/ "./src/utils/withApollo.ts":
/*!*********************************!*\
  !*** ./src/utils/withApollo.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"subscriptionClient\": function() { return /* binding */ subscriptionClient; },\n/* harmony export */   \"withApollo\": function() { return /* binding */ withApollo; }\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _apollo_client_link_ws__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/link/ws */ \"@apollo/client/link/ws\");\n/* harmony import */ var _apollo_client_link_ws__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_apollo_client_link_ws__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities */ \"@apollo/client/utilities\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var apollo_upload_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n/* harmony import */ var apollo_upload_client__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(apollo_upload_client__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! js-cookie */ \"js-cookie\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_apollo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next-apollo */ \"next-apollo\");\n/* harmony import */ var next_apollo__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_apollo__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! subscriptions-transport-ws */ \"subscriptions-transport-ws\");\n/* harmony import */ var subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_6__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n// this import is for forwarding the cookie\n\n\n// subscription connect as soon as i load the page.so, lazy true only reconnect it on subscription trigger\n//but we also reconnect on login\nconst subscriptionClient =  false ? 0 : null; // ctx can be undefined in ssr:false, so we need optional\n\nconst createClient = ctx => // ctx for forwarding cookie in ssr\n{\n  var _ctx$req;\n\n  const httpLink = new apollo_upload_client__WEBPACK_IMPORTED_MODULE_3__.createUploadLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include',\n    //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie: ( true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : 0) || ''\n    }\n  }); //WebSocket is a property that exists only in the browser\n\n  const wsLink =  false ? 0 : null;\n  const splitLink =  false ? 0 : httpLink; // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new _apollo_client__WEBPACK_IMPORTED_MODULE_0__.ApolloClient({\n    link: splitLink,\n    //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new _apollo_client__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            DirectMessages: {\n              keyArgs: [],\n\n              //// cache based on args of query\n              merge(existing, incoming) {\n                var _existing$Messages$, _incoming$Messages$, _existing$Messages$2, _incoming$Messages$2;\n\n                if (!existing) {\n                  //there won't be any cache on the first query\n                  return incoming;\n                }\n\n                console.log('fuck', existing, 'ddf', incoming);\n\n                if (((_existing$Messages$ = existing.Messages[0]) === null || _existing$Messages$ === void 0 ? void 0 : _existing$Messages$.__ref) === ((_incoming$Messages$ = incoming.Messages[0]) === null || _incoming$Messages$ === void 0 ? void 0 : _incoming$Messages$.__ref)) {\n                  return incoming; // when the useMessagesQuery make an another request due to fetch-policy\n                  // fetch policy make sure we don't read from cache\n                }\n\n                if (((_existing$Messages$2 = existing.Messages[0]) === null || _existing$Messages$2 === void 0 ? void 0 : _existing$Messages$2.__ref) === ((_incoming$Messages$2 = incoming.Messages[1]) === null || _incoming$Messages$2 === void 0 ? void 0 : _incoming$Messages$2.__ref)) {\n                  return incoming; // when subscription updates cache.incoming updated cache\n                }\n\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  Messages: [...existing.Messages, ...incoming.Messages]\n                }); //in the first query existing will be empty\n              }\n\n            },\n            Messages: {\n              keyArgs: [],\n\n              //// cache based on args of query\n              merge(existing, incoming) {\n                var _existing$Messages$3, _incoming$Messages$3, _existing$Messages$4, _incoming$Messages$4;\n\n                if (!existing) {\n                  //there won't be any cache on the first query\n                  return incoming;\n                }\n\n                if (((_existing$Messages$3 = existing.Messages[0]) === null || _existing$Messages$3 === void 0 ? void 0 : _existing$Messages$3.__ref) === ((_incoming$Messages$3 = incoming.Messages[0]) === null || _incoming$Messages$3 === void 0 ? void 0 : _incoming$Messages$3.__ref)) {\n                  return incoming; // when the useMessagesQuery make an another request due to fetch-policy\n                  // fetch policy make sure we don't read from cache\n                }\n\n                if (((_existing$Messages$4 = existing.Messages[0]) === null || _existing$Messages$4 === void 0 ? void 0 : _existing$Messages$4.__ref) === ((_incoming$Messages$4 = incoming.Messages[1]) === null || _incoming$Messages$4 === void 0 ? void 0 : _incoming$Messages$4.__ref)) {\n                  return incoming; // when subscription updates cache.incoming updated cache\n                } //  console.log('fuck', existing, 'ddf', incoming)\n\n\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  Messages: [...existing.Messages, ...incoming.Messages]\n                }); //in the first query existing will be empty\n              }\n\n            }\n          }\n        }\n      }\n    }),\n    ssrMode: true // Disables forceFetch on the server (so queries are only run once)\n\n  });\n};\n\nconst withApollo = (0,next_apollo__WEBPACK_IMPORTED_MODULE_5__.withApollo)(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/withApollo.ts\n");

/***/ })

};
;