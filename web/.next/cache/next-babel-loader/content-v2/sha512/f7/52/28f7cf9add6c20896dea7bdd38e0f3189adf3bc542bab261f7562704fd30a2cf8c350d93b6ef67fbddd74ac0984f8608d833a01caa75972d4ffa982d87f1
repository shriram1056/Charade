{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$();\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    id\\n    username\\n  }\\n}\\n    \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    query getUser {\\n  getUser(id: 1) {\\n    id\\n    username\\n  }\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    query allUser {\\n  allUser {\\n    id\\n    email\\n  }\\n}\\n    \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($password: String!, $email: String!) {\\n  Login(password: $password, email: $email) {\\n    ...FragmentUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createUser($options: UserCredentials!) {\\n  createUser(options: $options) {\\n    ...FragmentUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateTeam($name: String!) {\\n  createTeam(name: $name) {\\n    ...FragmentTeamResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentUserResponse on UserResponse {\\n  errors {\\n    ...FragmentError\\n  }\\n  user {\\n    ...FragmentUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentUser on Users {\\n  id\\n  username\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentTeamResponse on TeamResponse {\\n  errors {\\n    ...FragmentError\\n  }\\n  team {\\n    ...FragmentTeam\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentTeam on Team {\\n  name\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nvar defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport var FragmentErrorFragmentDoc = gql(_templateObject());\nexport var FragmentTeamFragmentDoc = gql(_templateObject2());\nexport var FragmentTeamResponseFragmentDoc = gql(_templateObject3(), FragmentErrorFragmentDoc, FragmentTeamFragmentDoc);\nexport var FragmentUserFragmentDoc = gql(_templateObject4());\nexport var FragmentUserResponseFragmentDoc = gql(_templateObject5(), FragmentErrorFragmentDoc, FragmentUserFragmentDoc);\nexport var CreateTeamDocument = gql(_templateObject6(), FragmentTeamResponseFragmentDoc);\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions) {\n  _s();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTeamDocument, options);\n}\n\n_s(useCreateTeamMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateUserDocument = gql(_templateObject7(), FragmentUserResponseFragmentDoc);\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions) {\n  _s2();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateUserDocument, options);\n}\n\n_s2(useCreateUserMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject8(), FragmentUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s3();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\n\n_s3(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var AllUserDocument = gql(_templateObject9());\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllUserQuery(baseOptions) {\n  _s4();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllUserDocument, options);\n}\n\n_s4(useAllUserQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useAllUserLazyQuery(baseOptions) {\n  _s5();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllUserDocument, options);\n}\n\n_s5(useAllUserLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var GetUserDocument = gql(_templateObject10());\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGetUserQuery(baseOptions) {\n  _s6();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetUserDocument, options);\n}\n\n_s6(useGetUserQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useGetUserLazyQuery(baseOptions) {\n  _s7();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetUserDocument, options);\n}\n\n_s7(useGetUserLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var MeDocument = gql(_templateObject11());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s8();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\n\n_s8(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s9();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\n\n_s9(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","FragmentErrorFragmentDoc","FragmentTeamFragmentDoc","FragmentTeamResponseFragmentDoc","FragmentUserFragmentDoc","FragmentUserResponseFragmentDoc","CreateTeamDocument","useCreateTeamMutation","baseOptions","options","useMutation","CreateUserDocument","useCreateUserMutation","LoginDocument","useLoginMutation","AllUserDocument","useAllUserQuery","useQuery","useAllUserLazyQuery","useLazyQuery","GetUserDocument","useGetUserQuery","useGetUserLazyQuery","MeDocument","useMeQuery","useMeLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUser: Users;\n  allUser: Array<Users>;\n  me?: Maybe<Users>;\n};\n\n\nexport type QueryGetUserArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createTeam: TeamResponse;\n  createUser: UserResponse;\n  Login: UserResponse;\n};\n\n\nexport type MutationCreateTeamArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  options: UserCredentials;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type TeamResponse = {\n  __typename?: 'TeamResponse';\n  errors?: Maybe<FieldError>;\n  team?: Maybe<Team>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Team = {\n  __typename?: 'Team';\n  name: Scalars['String'];\n  owner: Users;\n  channels: Array<Channel>;\n};\n\nexport type Channel = {\n  __typename?: 'Channel';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<FieldError>;\n  user?: Maybe<Users>;\n};\n\nexport type UserCredentials = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type FragmentErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type FragmentTeamFragment = (\n  { __typename?: 'Team' }\n  & Pick<Team, 'name'>\n);\n\nexport type FragmentTeamResponseFragment = (\n  { __typename?: 'TeamResponse' }\n  & { errors?: Maybe<(\n    { __typename?: 'FieldError' }\n    & FragmentErrorFragment\n  )>, team?: Maybe<(\n    { __typename?: 'Team' }\n    & FragmentTeamFragment\n  )> }\n);\n\nexport type FragmentUserFragment = (\n  { __typename?: 'Users' }\n  & Pick<Users, 'id' | 'username'>\n);\n\nexport type FragmentUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<(\n    { __typename?: 'FieldError' }\n    & FragmentErrorFragment\n  )>, user?: Maybe<(\n    { __typename?: 'Users' }\n    & FragmentUserFragment\n  )> }\n);\n\nexport type CreateTeamMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { createTeam: (\n    { __typename?: 'TeamResponse' }\n    & FragmentTeamResponseFragment\n  ) }\n);\n\nexport type CreateUserMutationVariables = Exact<{\n  options: UserCredentials;\n}>;\n\n\nexport type CreateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { createUser: (\n    { __typename?: 'UserResponse' }\n    & FragmentUserResponseFragment\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  password: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { Login: (\n    { __typename?: 'UserResponse' }\n    & FragmentUserResponseFragment\n  ) }\n);\n\nexport type AllUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllUserQuery = (\n  { __typename?: 'Query' }\n  & { allUser: Array<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'email'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser: (\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'username'>\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'username'>\n  )> }\n);\n\nexport const FragmentErrorFragmentDoc = gql`\n    fragment FragmentError on FieldError {\n  field\n  message\n}\n    `;\nexport const FragmentTeamFragmentDoc = gql`\n    fragment FragmentTeam on Team {\n  name\n}\n    `;\nexport const FragmentTeamResponseFragmentDoc = gql`\n    fragment FragmentTeamResponse on TeamResponse {\n  errors {\n    ...FragmentError\n  }\n  team {\n    ...FragmentTeam\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentTeamFragmentDoc}`;\nexport const FragmentUserFragmentDoc = gql`\n    fragment FragmentUser on Users {\n  id\n  username\n}\n    `;\nexport const FragmentUserResponseFragmentDoc = gql`\n    fragment FragmentUserResponse on UserResponse {\n  errors {\n    ...FragmentError\n  }\n  user {\n    ...FragmentUser\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentUserFragmentDoc}`;\nexport const CreateTeamDocument = gql`\n    mutation CreateTeam($name: String!) {\n  createTeam(name: $name) {\n    ...FragmentTeamResponse\n  }\n}\n    ${FragmentTeamResponseFragmentDoc}`;\nexport type CreateTeamMutationFn = Apollo.MutationFunction<CreateTeamMutation, CreateTeamMutationVariables>;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions?: Apollo.MutationHookOptions<CreateTeamMutation, CreateTeamMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateTeamMutation, CreateTeamMutationVariables>(CreateTeamDocument, options);\n      }\nexport type CreateTeamMutationHookResult = ReturnType<typeof useCreateTeamMutation>;\nexport type CreateTeamMutationResult = Apollo.MutationResult<CreateTeamMutation>;\nexport type CreateTeamMutationOptions = Apollo.BaseMutationOptions<CreateTeamMutation, CreateTeamMutationVariables>;\nexport const CreateUserDocument = gql`\n    mutation createUser($options: UserCredentials!) {\n  createUser(options: $options) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);\n      }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($password: String!, $email: String!) {\n  Login(password: $password, email: $email) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const AllUserDocument = gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllUserQuery(baseOptions?: Apollo.QueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n      }\nexport function useAllUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n        }\nexport type AllUserQueryHookResult = ReturnType<typeof useAllUserQuery>;\nexport type AllUserLazyQueryHookResult = ReturnType<typeof useAllUserLazyQuery>;\nexport type AllUserQueryResult = Apollo.QueryResult<AllUserQuery, AllUserQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser(id: 1) {\n    id\n    username\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n      }\nexport function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;"]},"metadata":{},"sourceType":"module"}