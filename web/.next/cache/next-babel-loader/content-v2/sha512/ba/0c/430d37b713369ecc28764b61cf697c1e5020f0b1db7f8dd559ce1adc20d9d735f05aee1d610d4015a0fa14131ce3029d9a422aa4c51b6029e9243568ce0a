{"ast":null,"code":"import _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                      fragment _ on Team {\\n                        channels {\\n                          id\\n                          name\\n                          public\\n                        }\\n                      }\\n                    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                      fragment _ on Team {\\n                        channels {\\n                          id\\n                          name\\n                          public\\n                        }\\n                      }\\n                    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Button, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useCreateChannelMutation } from '../generated/graphql';\nimport { InputField } from './InputField';\nimport { MultipleUser } from './multipleUser';\nexport var ChannelForm = function ChannelForm(_ref) {\n  _s();\n\n  var open = _ref.open,\n      toClose = _ref.toClose,\n      teamId = _ref.teamId,\n      data = _ref.data,\n      laoding = _ref.laoding;\n\n  var _useCreateChannelMuta = useCreateChannelMutation(),\n      _useCreateChannelMuta2 = _slicedToArray(_useCreateChannelMuta, 1),\n      createChannel = _useCreateChannelMuta2[0];\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: function onClose() {\n      return toClose();\n    },\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            channelName: '',\n            \"public\": true\n          },\n          onSubmit: /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n              var setErrors, response;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      setErrors = _ref2.setErrors;\n                      console.log(values);\n                      _context.next = 4;\n                      return createChannel({\n                        variables: {\n                          teamId: teamId,\n                          name: values.channelName,\n                          \"public\": values[\"public\"]\n                        },\n                        optimisticResponse: {\n                          // this mimics the response object\n                          __typename: 'Mutation',\n                          createChannel: {\n                            __typename: 'ChannelResponse',\n                            channel: {\n                              __typename: 'Channel',\n                              id: -1,\n                              name: values.channelName,\n                              \"public\": true\n                            }\n                          }\n                        },\n                        update: function update(cache, _ref4) {\n                          var createChannel = _ref4.data.createChannel;\n                          // double destructure: You can destructure and assign the default value in a single statement.\n                          // here the data is channelResponse\n                          //data is the result of query/mutation.\n                          var data = cache.readFragment({\n                            id: 'Team:' + teamId,\n                            fragment: gql(_templateObject())\n                          });\n\n                          var writeData = _.cloneDeep(data);\n\n                          if (writeData.channels) {\n                            // if there is channel\n                            writeData.channels.push(createChannel.channel);\n                          } else {\n                            // if there is no channel\n                            writeData.channels = [createChannel.channel];\n                          }\n\n                          console.log(writeData);\n                          toClose();\n                          cache.writeFragment({\n                            id: 'Team:' + teamId,\n                            fragment: gql(_templateObject2()),\n                            data: writeData\n                          });\n                        }\n                      });\n\n                    case 4:\n                      response = _context.sent;\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            return function (_x, _x2) {\n              return _ref3.apply(this, arguments);\n            };\n          }(),\n          children: function children(_ref5) {\n            var isSubmitting = _ref5.isSubmitting,\n                values = _ref5.values,\n                setFieldValue = _ref5.setFieldValue;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(InputField, {\n                placeholder: \"channel\",\n                channel: true,\n                name: \"channelName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                label: \"private\",\n                mt: 2,\n                onChange: function onChange(e) {\n                  console.log(e.target.checked);\n                  setFieldValue('public', e.target.checked === true ? false : true);\n                },\n                children: \"private\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(MultipleUser, {\n                data: true,\n                loading: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                margin: \"10px auto 0 auto\",\n                display: \"block\",\n                backgroundColor: \"teal.300\",\n                isLoading: isSubmitting,\n                children: \"Create Channel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, _this);\n}; //Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n\n_s(ChannelForm, \"K3W8/If115YvjS5TXHrcUVS7Z+A=\", false, function () {\n  return [useCreateChannelMutation];\n});\n\n_c = ChannelForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelForm\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx"],"names":["Button","Checkbox","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","gql","_","React","useCreateChannelMutation","InputField","MultipleUser","ChannelForm","open","toClose","teamId","data","laoding","createChannel","channelName","values","setErrors","console","log","variables","name","optimisticResponse","__typename","channel","id","update","cache","readFragment","fragment","writeData","cloneDeep","channels","push","writeFragment","response","isSubmitting","setFieldValue","e","target","checked"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Checkbox,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport gql from 'graphql-tag'\nimport _ from 'lodash'\nimport React from 'react'\nimport { Channel, useCreateChannelMutation } from '../generated/graphql'\nimport { InputField } from './InputField'\nimport { MultipleUser } from './multipleUser'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n  data: any\n  loading: boolean\n}\nexport const ChannelForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n  data,\n  laoding,\n}) => {\n  const [createChannel] = useCreateChannelMutation()\n  return (\n    <Modal onClose={() => toClose()} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody textAlign=\"center\">\n          <Formik\n            initialValues={{ channelName: '', public: true }}\n            onSubmit={async (values, { setErrors }) => {\n              console.log(values)\n              const response = await createChannel({\n                variables: {\n                  teamId: teamId,\n                  name: values.channelName,\n                  public: values.public,\n                },\n                optimisticResponse: {\n                  // this mimics the response object\n                  __typename: 'Mutation',\n                  createChannel: {\n                    __typename: 'ChannelResponse',\n                    channel: {\n                      __typename: 'Channel',\n                      id: -1,\n                      name: values.channelName,\n                      public: true,\n                    },\n                  },\n                },\n                update: (cache, { data: { createChannel } }) => {\n                  // double destructure: You can destructure and assign the default value in a single statement.\n                  // here the data is channelResponse\n                  //data is the result of query/mutation.\n\n                  const data = cache.readFragment<{\n                    channels: Channel[]\n                  }>({\n                    id: 'Team:' + teamId,\n                    fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                  })\n                  const writeData = _.cloneDeep(data)\n                  if (writeData.channels) {\n                    // if there is channel\n                    writeData.channels.push(createChannel.channel)\n                  } else {\n                    // if there is no channel\n                    writeData.channels = [createChannel.channel]\n                  }\n                  console.log(writeData)\n                  toClose()\n                  cache.writeFragment({\n                    id: 'Team:' + teamId,\n                    fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                    data: writeData,\n                  })\n                },\n              })\n            }}\n          >\n            {({ isSubmitting, values, setFieldValue }) => (\n              <Form>\n                <InputField\n                  placeholder=\"channel\"\n                  channel={true}\n                  name=\"channelName\"\n                />\n                <Checkbox\n                  label=\"private\"\n                  mt={2}\n                  onChange={(e) => {\n                    console.log(e.target.checked)\n                    setFieldValue(\n                      'public',\n                      e.target.checked === true ? false : true\n                    )\n                  }}\n                >\n                  private\n                </Checkbox>\n                <MultipleUser data loading />\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                >\n                  Create Channel\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n//Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n"]},"metadata":{},"sourceType":"module"}