{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input, Textarea } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React from 'react'; //InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\n\n//!!error is to convert it to boolean.single wont help as it makes \"\"-true\n// '' =>false\n// \"sdsd\"=>true\nexport const InputField = (_ref) => {\n  let {\n    label,\n    textarea,\n    size: _ // has the properties for input element\n\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"size\"]);\n\n  let InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  } // console.log(props) // { name: 'username', placeholder: 'username' }\n\n\n  const [field, {\n    error\n  }] = useField(props); // form control: If true, the form control will be invalid.\n  // field has the value of the input field and other method to manage state, if state is not there then empty form will be submitted\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputOrTextarea, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      // this is needed for type and there input attributes\n      id: field.name,\n      placeholder: props.placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","Textarea","useField","React","InputField","label","textarea","size","_","props","InputOrTextarea","field","error","name","placeholder"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,QALF,QAMO,kBANP;AAOA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C,C,CACA;;AAQA;AACA;AACA;AACA,OAAO,MAAMC,UAAqC,GAAG,UAK/C;AAAA,MALgD;AACpDC,IAAAA,KADoD;AAEpDC,IAAAA,QAFoD;AAGpDC,IAAAA,IAAI,EAAEC,CAH8C,CAI3C;;AAJ2C,GAKhD;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGV,KAAtB;;AACA,MAAIM,QAAJ,EAAc;AACZI,IAAAA,eAAe,GAAGT,QAAlB;AACD,GAJG,CAKJ;;;AAEA,QAAM,CAACU,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBV,QAAQ,CAACO,KAAD,CAAnC,CAPI,CAQJ;AACA;;AACA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACG,KAA1B;AAAA,4BAGE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEH,KAAK,CAACI,IAA1B;AAAA,gBAAiCR;AAAjC;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE,QAAC,eAAD,gDACMM,KADN,GAEMF,KAFN;AAEa;AACX,MAAA,EAAE,EAAEE,KAAK,CAACE,IAHZ;AAIE,MAAA,WAAW,EAAEJ,KAAK,CAACK;AAJrB;AAAA;AAAA;AAAA;AAAA,YALF,EAWGF,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkD,IAX1D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA9BM","sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Textarea,\n} from '@chakra-ui/react'\nimport { useField } from 'formik'\nimport React, { InputHTMLAttributes } from 'react'\n//InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label: string\n  placeholder: string\n  name: string // we are modifying the InputHTMLAttributes's properties here to be required\n  textarea?: boolean\n}\n\n//!!error is to convert it to boolean.single wont help as it makes \"\"-true\n// '' =>false\n// \"sdsd\"=>true\nexport const InputField: React.FC<InputFieldProps> = ({\n  label,\n  textarea,\n  size: _,\n  ...props // has the properties for input element\n}) => {\n  let InputOrTextarea = Input\n  if (textarea) {\n    InputOrTextarea = Textarea as any\n  }\n  // console.log(props) // { name: 'username', placeholder: 'username' }\n\n  const [field, { error }] = useField(props)\n  // form control: If true, the form control will be invalid.\n  // field has the value of the input field and other method to manage state, if state is not there then empty form will be submitted\n  return (\n    <FormControl isInvalid={!!error}>\n      {/*FormControl provides context such as isInvalid, isDisabled, and\n      isRequired to form elements. */}\n      <FormLabel htmlFor={props.name}>{label}</FormLabel>\n      {/* htmlFor says which input field this label is for using id of the field */}\n      <InputOrTextarea\n        {...field} // state for value\n        {...props} // this is needed for type and there input attributes\n        id={field.name}\n        placeholder={props.placeholder}\n      />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}