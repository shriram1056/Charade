{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input, Textarea } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React from 'react'; //InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\n\n// 'props' is a special keyword in React, which stands for properties and is being used for passing data from one component to another.\nexport const InputField = (_ref) => {\n  let {\n    //the below 2 are not html properties\n    label,\n    textarea,\n    channel,\n    // end\n    size: _ // special keyword. this is rest operator\n\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"channel\", \"size\"]);\n\n  let InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n\n  const [field, {\n    error\n  }] = useField(props); //this helps to connect the input fields to formik\n  // field: value,name and onChange\n  //error is received from setErrors\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [channel ? null : /*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(InputOrTextarea, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      // html input attributes\n      id: field.name,\n      placeholder: props.placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","Textarea","useField","React","InputField","label","textarea","channel","size","_","props","InputOrTextarea","field","error","name","placeholder"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,QALF,QAMO,kBANP;AAOA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C,C,CACA;;AAUA;AAEA,OAAO,MAAMC,UAAqC,GAAG,UAQ/C;AAAA,MARgD;AACpD;AACAC,IAAAA,KAFoD;AAGpDC,IAAAA,QAHoD;AAIpDC,IAAAA,OAJoD;AAKpD;AACAC,IAAAA,IAAI,EAAEC,CAN8C,CAO3C;;AAP2C,GAQhD;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGX,KAAtB;;AACA,MAAIM,QAAJ,EAAc;AACZK,IAAAA,eAAe,GAAGV,QAAlB;AACD;;AAED,QAAM,CAACW,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBX,QAAQ,CAACQ,KAAD,CAAnC,CANI,CAOJ;AACA;AACA;;AACA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACG,KAA1B;AAAA,eAEGN,OAAO,GAAG,IAAH,gBAAU,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEG,KAAK,CAACI,IAA1B;AAAA,gBAAiCT;AAAjC;AAAA;AAAA;AAAA;AAAA,YAFpB,eAIE,QAAC,eAAD,gDACMO,KADN,GAEMF,KAFN;AAEa;AACX,MAAA,EAAE,EAAEE,KAAK,CAACE,IAHZ;AAIE,MAAA,WAAW,EAAEJ,KAAK,CAACK;AAJrB;AAAA;AAAA;AAAA;AAAA,YAJF,EAUGF,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkD,IAV1D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAhCM","sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Textarea,\n} from '@chakra-ui/react'\nimport { useField } from 'formik'\nimport React, { InputHTMLAttributes } from 'react'\n//InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  // non-input properties\n  label?: string\n  placeholder: string\n  //end\n  name: string // we are modifying the InputHTMLAttributes's properties here to be required\n  channel?: boolean\n  textarea?: boolean\n}\n// 'props' is a special keyword in React, which stands for properties and is being used for passing data from one component to another.\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  //the below 2 are not html properties\n  label,\n  textarea,\n  channel,\n  // end\n  size: _,\n  ...props // special keyword. this is rest operator\n}) => {\n  let InputOrTextarea = Input\n  if (textarea) {\n    InputOrTextarea = Textarea as any\n  }\n\n  const [field, { error }] = useField(props)\n  //this helps to connect the input fields to formik\n  // field: value,name and onChange\n  //error is received from setErrors\n  return (\n    <FormControl isInvalid={!!error}>\n      {/*if you render FormErrorMessage and isInvalid is false or undefined, FormErrorMessage won't be visible. The only way to make it visible is by passing isInvalid and setting it to true. */}\n      {channel ? null : <FormLabel htmlFor={props.name}>{label}</FormLabel>}\n      {/* point label to field with id */}\n      <InputOrTextarea\n        {...field} // state for value\n        {...props} // html input attributes\n        id={field.name}\n        placeholder={props.placeholder}\n      />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}