{"ast":null,"code":"import _toConsumableArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Button, Stack, Text } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { NewChannelMessageDocument, useMessagesQuery } from '../generated/graphql';\n\nvar Chats = function Chats(_ref) {\n  var message = _ref.message;\n  var url = message.url,\n      text = message.text,\n      fileType = message.fileType;\n\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 14\n      }, _this);\n    } else if (fileType === 'text/plain') {\n      return /*#__PURE__*/_jsxDEV(RenderText, {\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, _this);\n    } else if (fileType.startsWith('audio/')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: url,\n            type: fileType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, _this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, _this);\n};\n\n_c = Chats;\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport var Message = function Message(_ref2) {\n  _s();\n\n  var channelId = _ref2.channelId;\n\n  var _useMessagesQuery = useMessagesQuery({\n    variables: {\n      channelId: channelId\n    },\n    fetchPolicy: 'network-only' // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n\n  }),\n      data = _useMessagesQuery.data,\n      loading = _useMessagesQuery.loading,\n      subscribeToMore = _useMessagesQuery.subscribeToMore,\n      fetchMore = _useMessagesQuery.fetchMore;\n\n  useEffect(function () {\n    // this starts the subscription\n    var unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: {\n        channelId: channelId\n      },\n      updateQuery: function updateQuery(prev, _ref3) {\n        var subscriptionData = _ref3.subscriptionData;\n\n        if (!subscriptionData.data) {\n          return prev;\n        } // @ts-ignore\n\n\n        var newChannelMessage = subscriptionData.data.newChannelMessage; // prev is a data with __typename and Message\n\n        console.log(prev, newChannelMessage);\n        var newData = {\n          Messages: [newChannelMessage].concat(_toConsumableArray(prev.Messages))\n        };\n        return newData;\n      }\n    });\n\n    if (unsubscribe) {\n      return function () {\n        return unsubscribe();\n      }; // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId]); // make new subscription if channelId is changed\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      mt: 4,\n      ml: 3,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: function onClick() {\n          return fetchMore({\n            variables: {\n              channelId: channelId,\n              cursor: data.Messages[data.Messages.length - 1].createdAt\n            }\n          });\n        },\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, _this), data.Messages.slice() // message is immuatble. so we slice\n      .reverse().map(function (u) {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 4,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            fontSize: \"19px\",\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n              ml: 2,\n              display: \"inline\",\n              fontSize: \"13px\",\n              fontFamily: \"sans-serif\",\n              color: \"#958993\",\n              children: u.createdAt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Chats, {\n            message: u\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, _this)]\n        }, \"message-\".concat(u.id), true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Message, \"AfhmfjHfIt4U0bS0nyr4Pw0YpvI=\", false, function () {\n  return [useMessagesQuery];\n});\n\n_c2 = Message;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chats\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Button","Stack","Text","React","useEffect","NewChannelMessageDocument","useMessagesQuery","Chats","message","url","text","fileType","startsWith","Message","channelId","variables","fetchPolicy","data","loading","subscribeToMore","fetchMore","unsubscribe","document","updateQuery","prev","subscriptionData","newChannelMessage","console","log","newData","Messages","cursor","length","createdAt","slice","reverse","map","u","user","username","id"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, Text } from '@chakra-ui/react'\nimport React, { useEffect } from 'react'\nimport {\n  NewChannelMessageDocument,\n  useMessagesQuery,\n} from '../generated/graphql'\n\nconst Chats = ({ message }) => {\n  const { url, text, fileType } = message\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return <img src={url} alt=\"\" />\n    } else if (fileType === 'text/plain') {\n      return <RenderText url={url} />\n    } else if (fileType.startsWith('audio/')) {\n      return (\n        <div>\n          <audio controls>\n            <source src={url} type={fileType} />\n          </audio>\n        </div>\n      )\n    }\n  }\n  return <Box>{text}</Box>\n}\n\ninterface MessageProps {\n  channelId: number\n}\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading, subscribeToMore, fetchMore } = useMessagesQuery({\n    variables: { channelId },\n    fetchPolicy: 'network-only', // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n  })\n\n  useEffect(() => {\n    // this starts the subscription\n\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: { channelId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        // @ts-ignore\n        const { newChannelMessage } = subscriptionData.data\n\n        // prev is a data with __typename and Message\n        console.log(prev, newChannelMessage)\n        let newData = {\n          Messages: [newChannelMessage, ...prev.Messages],\n        }\n        return newData\n      },\n    })\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId]) // make new subscription if channelId is changed\n\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n    >\n      <Stack mt={4} ml={3}>\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        <Button\n          onClick={() =>\n            fetchMore({\n              variables: {\n                channelId,\n                cursor: data.Messages[data.Messages.length - 1].createdAt,\n              },\n            })\n          }\n        >\n          load more\n        </Button>\n        {data.Messages.slice() // message is immuatble. so we slice\n          .reverse()\n          .map((u) => (\n            <Box mb={4} key={`message-${u.id}`}>\n              <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n                {u.user.username}\n                <Text\n                  ml={2}\n                  display=\"inline\"\n                  fontSize=\"13px\"\n                  fontFamily=\"sans-serif\"\n                  color=\"#958993\"\n                >\n                  {u.createdAt}\n                </Text>\n              </Box>\n              <Chats message={u} />\n            </Box>\n          ))}\n      </Stack>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}