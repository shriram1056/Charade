{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx\",\n    _this = this;\n\nimport { Button, FormControl, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport Downshift from 'downshift';\nimport React from 'react';\nexport var DirectMessageForm = function DirectMessageForm(_ref) {\n  var open = _ref.open,\n      toClose = _ref.toClose,\n      teamId = _ref.teamId;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Search Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          children: /*#__PURE__*/_jsxDEV(Downshift, {\n            onChange: function onChange(selection) {\n              return alert(selection ? \"You selected \".concat(selection.value) : 'Selection Cleared');\n            },\n            itemToString: function itemToString(item) {\n              return item ? item.value : '';\n            },\n            children: function children(_ref2) {\n              var getInputProps = _ref2.getInputProps,\n                  getItemProps = _ref2.getItemProps,\n                  getLabelProps = _ref2.getLabelProps,\n                  getMenuProps = _ref2.getMenuProps,\n                  isOpen = _ref2.isOpen,\n                  inputValue = _ref2.inputValue,\n                  highlightedIndex = _ref2.highlightedIndex,\n                  selectedItem = _ref2.selectedItem,\n                  getRootProps = _ref2.getRootProps;\n              return /*#__PURE__*/_jsxDEV(Input, {\n                name: \"DirectMessage\",\n                id: \"DirectMessage\",\n                type: \"text\",\n                placeholder: \"search users\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 17\n              }, _this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          margin: \"10px auto 0 auto\",\n          display: \"block\",\n          backgroundColor: \"teal.300\" //     onClick={isSubmitting ? null : toClose}\n          ,\n          children: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};\n_c = DirectMessageForm;\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, {suppressRefError: true})}\n        >\n          <input {...getInputProps()} />\n        </div>\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n                .filter(item => !inputValue || item.value.includes(inputValue))\n                .map((item, index) => (\n                  <li\n                    {...getItemProps({\n                      key: item.value,\n                      index,\n                      item,\n                      style: {\n                        backgroundColor:\n                          highlightedIndex === index ? 'lightgray' : 'white',\n                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                      },\n                    })}\n                  >\n                    {item.value}\n                  </li>\n                ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectMessageForm\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx"],"names":["Button","FormControl","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Downshift","React","DirectMessageForm","open","toClose","teamId","selection","alert","value","item","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","inputValue","highlightedIndex","selectedItem","getRootProps"],"mappings":";;;;;AAAA,SACEA,MADF,EAEEC,WAFF,EAGEC,KAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,gBANF,EAOEC,YAPF,EAQEC,WARF,EASEC,YATF,QAUO,kBAVP;AAWA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAOA,OAAO,IAAMC,iBAAwC,GAAG,SAA3CA,iBAA2C,OAIlD;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADJC,MACI,QADJA,MACI;AACJ,sBACE,QAAC,KAAD;AAAO,IAAA,OAAO,EAAED,OAAhB;AAAyB,IAAA,MAAM,EAAED,IAAjC;AAAA,4BAEE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE,QAAC,YAAD;AAAc,MAAA,EAAE,EAAE,CAAlB;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE,QAAC,SAAD;AAAA,gCACE,QAAC,WAAD;AAAA,iCACE,QAAC,SAAD;AACE,YAAA,QAAQ,EAAE,kBAACG,SAAD;AAAA,qBACRC,KAAK,CACHD,SAAS,0BACWA,SAAS,CAACE,KADrB,IAEL,mBAHD,CADG;AAAA,aADZ;AAQE,YAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,qBAAWA,IAAI,GAAGA,IAAI,CAACD,KAAR,GAAgB,EAA/B;AAAA,aARhB;AAAA,sBAUG;AAAA,kBACCE,aADD,SACCA,aADD;AAAA,kBAECC,YAFD,SAECA,YAFD;AAAA,kBAGCC,aAHD,SAGCA,aAHD;AAAA,kBAICC,YAJD,SAICA,YAJD;AAAA,kBAKCC,MALD,SAKCA,MALD;AAAA,kBAMCC,UAND,SAMCA,UAND;AAAA,kBAOCC,gBAPD,SAOCA,gBAPD;AAAA,kBAQCC,YARD,SAQCA,YARD;AAAA,kBASCC,YATD,SASCA,YATD;AAAA,kCAWC,QAAC,KAAD;AACE,gBAAA,IAAI,EAAC,eADP;AAEE,gBAAA,EAAE,EAAC,eAFL;AAGE,gBAAA,IAAI,EAAC,MAHP;AAIE,gBAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,uBAXD;AAAA;AAVH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,iBADF,eAgCE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,MAAM,EAAC,kBAFT;AAGE,UAAA,OAAO,EAAC,OAHV;AAIE,UAAA,eAAe,EAAC,UAJlB,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAhCF;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAqDD,CA1DM;KAAMhB,iB;AA4Db;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import {\n  Button,\n  FormControl,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport Downshift from 'downshift'\nimport React from 'react'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\nexport const DirectMessageForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Search Users</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <FormControl>\n            <Downshift\n              onChange={(selection) =>\n                alert(\n                  selection\n                    ? `You selected ${selection.value}`\n                    : 'Selection Cleared'\n                )\n              }\n              itemToString={(item) => (item ? item.value : '')}\n            >\n              {({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                isOpen,\n                inputValue,\n                highlightedIndex,\n                selectedItem,\n                getRootProps,\n              }) => (\n                <Input\n                  name=\"DirectMessage\"\n                  id=\"DirectMessage\"\n                  type=\"text\"\n                  placeholder=\"search users\"\n                />\n              )}\n            </Downshift>\n          </FormControl>\n          <Button\n            type=\"submit\"\n            margin=\"10px auto 0 auto\"\n            display=\"block\"\n            backgroundColor=\"teal.300\"\n\n            //     onClick={isSubmitting ? null : toClose}\n          >\n            search\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, {suppressRefError: true})}\n        >\n          <input {...getInputProps()} />\n        </div>\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n                .filter(item => !inputValue || item.value.includes(inputValue))\n                .map((item, index) => (\n                  <li\n                    {...getItemProps({\n                      key: item.value,\n                      index,\n                      item,\n                      style: {\n                        backgroundColor:\n                          highlightedIndex === index ? 'lightgray' : 'white',\n                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                      },\n                    })}\n                  >\n                    {item.value}\n                  </li>\n                ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift> */\n}\n"]},"metadata":{},"sourceType":"module"}