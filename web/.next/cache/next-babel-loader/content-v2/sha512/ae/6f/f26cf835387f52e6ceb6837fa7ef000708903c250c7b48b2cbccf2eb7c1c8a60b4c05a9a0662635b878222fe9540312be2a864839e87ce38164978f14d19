{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\";\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { useMessagesQuery } from '../generated/graphql';\nexport const Message = ({\n  channelId\n}) => {\n  const {\n    data,\n    loading\n  } = useMessagesQuery({\n    variables: {\n      channelId: channelId\n    }\n  });\n  console.log(data);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    children: data.Messages.map(u => {\n      ;\n\n      /*#__PURE__*/\n      _jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 10\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","React","useMessagesQuery","Message","channelId","data","loading","variables","console","log","Messages","map","u"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAMA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAChE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBJ,gBAAgB,CAAC;AACzCK,IAAAA,SAAS,EAAE;AAAEH,MAAAA,SAAS,EAAEA;AAAb;AAD8B,GAAD,CAA1C;AAGAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,MAAIC,OAAJ,EAAa;AACX,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,GAAD;AAAK,IAAA,UAAU,EAAC,GAAhB;AAAoB,IAAA,OAAO,EAAC,GAA5B;AAAgC,IAAA,eAAe,EAAC,SAAhD;AAAA,cACGD,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAmBC,CAAD,IAAO;AACxB;;AAAC;AAAA,cAAC,GAAD;AAAA,gCACC,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAIF,KALA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAlBM","sourcesContent":["import { Box } from '@chakra-ui/react'\nimport React from 'react'\nimport { useMessagesQuery } from '../generated/graphql'\n\ninterface MessageProps {\n  channelId: number\n}\n\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading } = useMessagesQuery({\n    variables: { channelId: channelId },\n  })\n  console.log(data)\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box gridColumn=\"3\" gridRow=\"2\" backgroundColor=\"#e6e6e6\">\n      {data.Messages.map((u) => {\n        ;<Box>\n          <Box></Box>\n          <Box></Box>\n        </Box>\n      })}\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}