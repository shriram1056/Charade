{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Stack, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport { NewChannelMessageDocument, useMessagesQuery } from '../generated/graphql';\nexport const Message = ({\n  channelId\n}) => {\n  const {\n    data,\n    loading,\n    subscribeToMore\n  } = useMessagesQuery({\n    variables: {\n      channelId: channelId\n    }\n  });\n  subscribeToMore({\n    document: NewChannelMessageDocument,\n    variables: {\n      channelId\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data) {\n        return prev;\n      }\n\n      let message = prev.Messages.push(subscriptionData.data);\n      console.log(subscriptionData.data, prev); // prev is a data with __typename and Message\n\n      let newData = _objectSpread(_objectSpread({}, prev), {}, {\n        Messages: [...prev.Messages]\n      });\n\n      return newData;\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      mt: 4,\n      ml: 3,\n      flexDirection: \"column-reverse\",\n      children: data.Messages.map(u => /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          fontSize: \"19px\",\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n            ml: 2,\n            display: \"inline\",\n            fontSize: \"13px\",\n            fontFamily: \"sans-serif\",\n            color: \"#958993\",\n            children: u.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: u.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, `message-${u.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Stack","Text","React","NewChannelMessageDocument","useMessagesQuery","Message","channelId","data","loading","subscribeToMore","variables","document","updateQuery","prev","subscriptionData","message","Messages","push","console","log","newData","map","u","user","username","createdAt","text","id"],"mappings":";;;;;;;;;AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,yBADF,EAEEC,gBAFF,QAGO,sBAHP;AASA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAChE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAqCL,gBAAgB,CAAC;AAC1DM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,SAAS,EAAEA;AAAb;AAD+C,GAAD,CAA3D;AAIAG,EAAAA,eAAe,CAAC;AACdE,IAAAA,QAAQ,EAAER,yBADI;AAEdO,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF,KAFG;AAGdM,IAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,MAAAA;AAAF,KAAP,KAAgC;AAC3C,UAAI,CAACA,gBAAgB,CAACP,IAAtB,EAA4B;AAC1B,eAAOM,IAAP;AACD;;AACD,UAAIE,OAAO,GAAGF,IAAI,CAACG,QAAL,CAAcC,IAAd,CAAmBH,gBAAgB,CAACP,IAApC,CAAd;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYL,gBAAgB,CAACP,IAA7B,EAAmCM,IAAnC,EAL2C,CAO3C;;AACA,UAAIO,OAAO,mCACNP,IADM;AAETG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,IAAI,CAACG,QAAT;AAFD,QAAX;;AAKA,aAAOI,OAAP;AACD;AAjBa,GAAD,CAAf;;AAoBA,MAAIZ,OAAJ,EAAa;AACX,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,GAAD;AAAK,IAAA,UAAU,EAAC,GAAhB;AAAoB,IAAA,OAAO,EAAC,GAA5B;AAAgC,IAAA,eAAe,EAAC,SAAhD;AAA0D,IAAA,SAAS,EAAC,MAApE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,EAAE,EAAE,CAAX;AAAc,MAAA,EAAE,EAAE,CAAlB;AAAqB,MAAA,aAAa,EAAC,gBAAnC;AAAA,gBAGGD,IAAI,CAACS,QAAL,CAAcK,GAAd,CAAmBC,CAAD,iBACjB,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,gCACE,QAAC,GAAD;AAAK,UAAA,QAAQ,EAAC,MAAd;AAAqB,UAAA,UAAU,EAAC,YAAhC;AAA6C,UAAA,UAAU,EAAC,MAAxD;AAAA,qBACGA,CAAC,CAACC,IAAF,CAAOC,QADV,eAEE,QAAC,IAAD;AACE,YAAA,EAAE,EAAE,CADN;AAEE,YAAA,OAAO,EAAC,QAFV;AAGE,YAAA,QAAQ,EAAC,MAHX;AAIE,YAAA,UAAU,EAAC,YAJb;AAKE,YAAA,KAAK,EAAC,SALR;AAAA,sBAOGF,CAAC,CAACG;AAPL;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE,QAAC,GAAD;AAAA,oBAAMH,CAAC,CAACI;AAAR;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA,SAAkB,WAAUJ,CAAC,CAACK,EAAG,EAAjC;AAAA;AAAA;AAAA;AAAA,cADD;AAHH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CArDM","sourcesContent":["import { Box, Stack, Text } from '@chakra-ui/react'\nimport React from 'react'\nimport {\n  NewChannelMessageDocument,\n  useMessagesQuery,\n} from '../generated/graphql'\n\ninterface MessageProps {\n  channelId: number\n}\n\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading, subscribeToMore } = useMessagesQuery({\n    variables: { channelId: channelId },\n  })\n\n  subscribeToMore({\n    document: NewChannelMessageDocument,\n    variables: { channelId },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data) {\n        return prev\n      }\n      let message = prev.Messages.push(subscriptionData.data)\n      console.log(subscriptionData.data, prev)\n\n      // prev is a data with __typename and Message\n      let newData = {\n        ...prev,\n        Messages: [...prev.Messages],\n      }\n\n      return newData\n    },\n  })\n\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box gridColumn=\"3\" gridRow=\"2\" backgroundColor=\"#e6e6e6\" overflowY=\"auto\">\n      <Stack mt={4} ml={3} flexDirection=\"column-reverse\">\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        {data.Messages.map((u) => (\n          <Box mb={4} key={`message-${u.id}`}>\n            <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n              {u.user.username}\n              <Text\n                ml={2}\n                display=\"inline\"\n                fontSize=\"13px\"\n                fontFamily=\"sans-serif\"\n                color=\"#958993\"\n              >\n                {u.createdAt}\n              </Text>\n            </Box>\n            <Box>{u.text}</Box>\n          </Box>\n        ))}\n      </Stack>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}