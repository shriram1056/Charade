{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/InvitePeople.tsx\";\nimport { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport _ from 'lodash';\nimport React from 'react';\nimport { GetTeamMembersDocument, useAddTeamMemberMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { InputField } from './InputField';\nexport const InvitePeople = ({\n  open,\n  toClose,\n  teamId\n}) => {\n  const [AddUser] = useAddTeamMemberMutation();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \" Add People to your Team\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            email: ''\n          },\n          onSubmit: async (values, {\n            setErrors,\n            setSubmitting\n          }) => {\n            var _response$data, _response$data$addTea, _response$data2;\n\n            const response = await AddUser({\n              variables: {\n                teamId,\n                email: values.email\n              },\n              update: (cache, {\n                data: {\n                  addTeamMember\n                }\n              }) => {\n                const data = cache.readQuery({\n                  query: GetTeamMembersDocument\n                });\n\n                const writeData = _.cloneDeep(data); // you need to copy from original object because 'data' is not extensible\n                //   if (writeData.AllTeams[teamIdx].channels) {\n                //     // if there is channel\n                //     writeData.AllTeams[teamIdx].channels.push(\n                //       createChannel.channel\n                //     )\n                //   } else {\n                //     // if there is no channel\n                //     writeData.AllTeams[teamIdx].channels = [\n                //       createChannel.channel,\n                //     ]\n                //   }\n                //   toClose(),\n                //     cache.writeQuery<AllTeamsQuery>({\n                //       query: AllTeamsDocument,\n                //       data: writeData,\n                //     })\n\n              }\n            });\n\n            if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$addTea = _response$data.addTeamMember) !== null && _response$data$addTea !== void 0 && _response$data$addTea.errors) {\n              setErrors(toErrorMap(response.data.addTeamMember.errors));\n              setSubmitting(false);\n            } else if (((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.addTeamMember) === null) {\n              toClose();\n              setSubmitting(false);\n            }\n          },\n          children: ({\n            isSubmitting\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              placeholder: \"email\",\n              channel: true,\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              margin: \"10px auto 0 auto\",\n              display: \"block\",\n              backgroundColor: \"teal.300\",\n              isLoading: isSubmitting // onClick={isSubmitting ? null : toClose} other teccchnique in channelForm\n              ,\n              children: \"add User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/InvitePeople.tsx"],"names":["Button","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","_","React","GetTeamMembersDocument","useAddTeamMemberMutation","toErrorMap","InputField","InvitePeople","open","toClose","teamId","AddUser","email","values","setErrors","setSubmitting","response","variables","update","cache","data","addTeamMember","readQuery","query","writeData","cloneDeep","errors","isSubmitting"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport _ from 'lodash'\nimport React from 'react'\nimport {\n  GetTeamMembersDocument,\n  GetTeamMembersQuery,\n  useAddTeamMemberMutation,\n} from '../generated/graphql'\nimport { toErrorMap } from '../utils/toErrorMap'\nimport { InputField } from './InputField'\n\ninterface InviteProps {\n  open: boolean\n  toClose: any\n  teamId: number\n}\nexport const InvitePeople: React.FC<InviteProps> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  const [AddUser] = useAddTeamMemberMutation()\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader> Add People to your Team</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Formik\n            initialValues={{ email: '' }}\n            onSubmit={async (values, { setErrors, setSubmitting }) => {\n              const response = await AddUser({\n                variables: { teamId, email: values.email },\n                update: (cache, { data: { addTeamMember } }) => {\n                  const data = cache.readQuery<GetTeamMembersQuery>({\n                    query: GetTeamMembersDocument,\n                  })\n                  const writeData = _.cloneDeep(data) // you need to copy from original object because 'data' is not extensible\n                  //   if (writeData.AllTeams[teamIdx].channels) {\n                  //     // if there is channel\n                  //     writeData.AllTeams[teamIdx].channels.push(\n                  //       createChannel.channel\n                  //     )\n                  //   } else {\n                  //     // if there is no channel\n                  //     writeData.AllTeams[teamIdx].channels = [\n                  //       createChannel.channel,\n                  //     ]\n                  //   }\n                  //   toClose(),\n                  //     cache.writeQuery<AllTeamsQuery>({\n                  //       query: AllTeamsDocument,\n                  //       data: writeData,\n                  //     })\n                },\n              })\n              if (response.data?.addTeamMember?.errors) {\n                setErrors(toErrorMap(response.data.addTeamMember.errors))\n                setSubmitting(false)\n              } else if (response.data?.addTeamMember === null) {\n                toClose()\n                setSubmitting(false)\n              }\n            }}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <InputField placeholder=\"email\" channel={true} name=\"email\" />\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                  // onClick={isSubmitting ? null : toClose} other teccchnique in channelForm\n                >\n                  add User\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}