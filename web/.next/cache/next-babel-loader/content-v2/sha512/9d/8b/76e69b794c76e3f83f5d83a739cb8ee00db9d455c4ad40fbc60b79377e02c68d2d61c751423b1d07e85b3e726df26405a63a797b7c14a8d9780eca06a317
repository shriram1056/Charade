{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { Wrapper } from '../components/Wrapper';\nimport { useCreateUserMutation } from '../generated/graphql';\nimport { withApollo } from '../utils/withApollo';\n\nvar Register = function Register(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useCreateUserMutatio = useCreateUserMutation(),\n      _useCreateUserMutatio2 = _slicedToArray(_useCreateUserMutatio, 1),\n      register = _useCreateUserMutatio2[0];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: '',\n        username: '',\n        password: ''\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var setErrors, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors;\n                  _context.next = 3;\n                  return register({\n                    variables: {\n                      username: values.username,\n                      password: values.password,\n                      email: values.email\n                    }\n                  });\n\n                case 3:\n                  response = _context.sent;\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Register, \"lKPi2u8Gwg5zI/Se6ai64Ad1sBo=\", false, function () {\n  return [useCreateUserMutation];\n});\n\n_c = Register;\nexport default withApollo({\n  ssr: false\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/register.tsx"],"names":["Formik","React","Wrapper","useCreateUserMutation","withApollo","Register","register","email","username","password","values","setErrors","variables","response","ssr"],"mappings":";;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,IAAMC,QAAsB,GAAG,SAAzBA,QAAyB,OAAQ;AAAA;;AAAA;;AAAA,8BAClBF,qBAAqB,EADH;AAAA;AAAA,MAC9BG,QAD8B;;AAGrC,sBACE,QAAC,OAAD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,QAAQ,EAAE,EAAvB;AAA2BC,QAAAA,QAAQ,EAAE;AAArC,OADjB;AAEE,MAAA,QAAQ;AAAA,6EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,kBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,yBACeL,QAAQ,CAAC;AAC9BM,oBAAAA,SAAS,EAAE;AACTJ,sBAAAA,QAAQ,EAAEE,MAAM,CAACF,QADR;AAETC,sBAAAA,QAAQ,EAAEC,MAAM,CAACD,QAFR;AAGTF,sBAAAA,KAAK,EAAEG,MAAM,CAACH;AAHL;AADmB,mBAAD,CADvB;;AAAA;AACFM,kBAAAA,QADE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAgBD,CAnBD;;GAAMR,Q;UACeF,qB;;;KADfE,Q;AAoBN,eAAeD,UAAU,CAAC;AAAEU,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BT,QAA3B,CAAf","sourcesContent":["import { Formik } from 'formik'\nimport React from 'react'\nimport { Wrapper } from '../components/Wrapper'\nimport { useCreateUserMutation } from '../generated/graphql'\nimport { withApollo } from '../utils/withApollo'\n\nconst Register: React.FC<{}> = ({}) => {\n  const [register] = useCreateUserMutation()\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={{ email: '', username: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register({\n            variables: {\n              username: values.username,\n              password: values.password,\n              email: values.email,\n            },\n          })\n        }}\n      ></Formik>\n    </Wrapper>\n  )\n}\nexport default withApollo({ ssr: false })(Register)\n"]},"metadata":{},"sourceType":"module"}