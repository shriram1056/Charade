{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport cookieCutter from 'cookie-cutter';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { SubscriptionClient } from 'subscriptions-transport-ws'; // ctx can be undefined in ssr:false, so we need optional\n\nvar createClient = function createClient(ctx) // ctx for forwarding cookie in ssr\n{\n  _s();\n\n  var subscriptionClient = useRef(null); // remebers state without re-render.useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue)\n\n  var Atoken = cookieCutter.get('access-token');\n  var Rtoken = cookieCutter.get('access-token');\n\n  if (true) {\n    useEffect(function () {\n      if (Atoken || Rtoken) {\n        if (subscriptionClient.current) {\n          subscriptionClient.current.close(); // if the userId has changed then close the current connection and open new one\n        }\n\n        subscriptionClient.current = new SubscriptionClient('ws://localhost:4001/subscriptions', {\n          reconnect: true,\n          connectionParams: {\n            authToken: {\n              Rtoken: Rtoken,\n              Atoken: Atoken\n            }\n          },\n          lazy: true\n        });\n      }\n    }, [Atoken, Rtoken]);\n  }\n\n  var client = new ApolloClient({\n    cache: new InMemoryCache(),\n    ssrMode: false // Disables forceFetch on the server-side (so queries are only run once)\n\n  });\n  var splitLink = useMemo(function () {\n    var _ctx$req;\n\n    // useMemo: only recalculates a value if the elements in its dependency array change\n    var httpLink = new HttpLink({\n      uri: 'http://localhost:4001/graphql',\n      credentials: 'include',\n      //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n      headers: {\n        cookie: (false ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n      }\n    });\n\n    if ((Atoken || Rtoken) && subscriptionClient.current && true) {\n      var websocketLink = new WebSocketLink(subscriptionClient.current);\n      return split(function (_ref) {\n        var query = _ref.query;\n        var definition = getMainDefinition(query);\n        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n      }, websocketLink, httpLink);\n    }\n\n    return httpLink;\n  }, [Atoken, Rtoken]);\n  useEffect(function () {\n    client.setLink(splitLink);\n  }, [splitLink]);\n  return client;\n};\n\n_s(createClient, \"C6r8MFGYx7d59pohIgwRhS/g3ME=\");\n\nexport var withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","WebSocketLink","getMainDefinition","cookieCutter","withApollo","createWithApollo","useEffect","useMemo","useRef","SubscriptionClient","createClient","ctx","subscriptionClient","Atoken","get","Rtoken","current","close","reconnect","connectionParams","authToken","lazy","client","cache","ssrMode","splitLink","httpLink","uri","credentials","headers","cookie","req","undefined","websocketLink","query","definition","kind","operation","setLink"],"mappings":"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","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport cookieCutter from 'cookie-cutter'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\n\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (\n  ctx?: NextPageContext // ctx for forwarding cookie in ssr\n) => {\n  const subscriptionClient = useRef<SubscriptionClient>(null) // remebers state without re-render.useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue)\n  const Atoken = cookieCutter.get('access-token')\n  const Rtoken = cookieCutter.get('access-token')\n\n  if (typeof window !== 'undefined') {\n    useEffect(() => {\n      if (Atoken || Rtoken) {\n        if (subscriptionClient.current) {\n          subscriptionClient.current.close() // if the userId has changed then close the current connection and open new one\n        }\n        subscriptionClient.current = new SubscriptionClient(\n          'ws://localhost:4001/subscriptions',\n          {\n            reconnect: true,\n            connectionParams: {\n              authToken: {\n                Rtoken,\n                Atoken,\n              },\n            },\n            lazy: true,\n          }\n        )\n      }\n    }, [Atoken, Rtoken])\n  }\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server-side (so queries are only run once)\n  })\n\n  const splitLink = useMemo(() => {\n    // useMemo: only recalculates a value if the elements in its dependency array change\n    const httpLink = new HttpLink({\n      uri: 'http://localhost:4001/graphql',\n      credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n      headers: {\n        cookie:\n          (typeof window === 'undefined'\n            ? ctx?.req?.headers.cookie\n            : undefined) || '',\n      },\n    })\n\n    if (\n      (Atoken || Rtoken) &&\n      subscriptionClient.current &&\n      typeof window !== 'undefined'\n    ) {\n      const websocketLink = new WebSocketLink(subscriptionClient.current)\n\n      return split(\n        ({ query }) => {\n          const definition = getMainDefinition(query)\n          return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n          )\n        },\n        websocketLink,\n        httpLink\n      )\n    }\n\n    return httpLink\n  }, [Atoken, Rtoken])\n\n  useEffect(() => {\n    client.setLink(splitLink)\n  }, [splitLink])\n\n  return client\n}\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n"]},"metadata":{},"sourceType":"module"}