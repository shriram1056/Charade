{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\";\nimport { Box } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { Channel } from '../components/channel';\nimport { ChannelForm } from '../components/channelForm';\nimport { Team } from '../components/team';\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql';\nexport const Sidebar = ({\n  currentTeamId\n}) => {\n  const {\n    data,\n    loading\n  } = useAllTeamsQuery();\n  const {\n    data: user,\n    loading: userLoad\n  } = useMeQuery();\n  const {\n    0: modalState,\n    1: setModalState\n  } = useState(false);\n\n  if (loading || userLoad) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"Please login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n\n  let currentTeam = data.AllTeams[0];\n\n  if (typeof currentTeamId === 'string') {\n    let teamId = parseInt(currentTeamId);\n    currentTeam = data.AllTeams.find(u => u.id === teamId);\n  }\n\n  let toOpen = () => setModalState(true);\n\n  let toClose = () => setModalState(false);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Team, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: data.AllTeams.map(t => ({\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase()\n      })) // map return a new array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Channel, {\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: currentTeam.name,\n      username: user.me.username,\n      channels: currentTeam.channels,\n      users: null,\n      toOpen: toOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChannelForm, {\n      open: modalState,\n      toClose: toClose,\n      teamId: parseInt(currentTeamId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["Box","React","useState","Channel","ChannelForm","Team","useAllTeamsQuery","useMeQuery","Sidebar","currentTeamId","data","loading","user","userLoad","modalState","setModalState","currentTeam","AllTeams","teamId","parseInt","find","u","id","toOpen","toClose","map","t","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,sBAA7C;AAKA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AACpE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,gBAAgB,EAA1C;AACA,QAAM;AAAEI,IAAAA,IAAI,EAAEE,IAAR;AAAcD,IAAAA,OAAO,EAAEE;AAAvB,MAAoCN,UAAU,EAApD;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC,KAAD,CAA5C;;AAEA,MAAIS,OAAO,IAAIE,QAAf,EAAyB;AACvB,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAI,CAACD,IAAL,EAAW;AACT,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAII,WAAW,GAAGN,IAAI,CAACO,QAAL,CAAc,CAAd,CAAlB;;AACA,MAAI,OAAOR,aAAP,KAAyB,QAA7B,EAAuC;AACrC,QAAIS,MAAM,GAAGC,QAAQ,CAACV,aAAD,CAArB;AACAO,IAAAA,WAAW,GAAGN,IAAI,CAACO,QAAL,CAAcG,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,MAAnC,CAAd;AACD;;AAED,MAAIK,MAAM,GAAG,MAAMR,aAAa,CAAC,IAAD,CAAhC;;AACA,MAAIS,OAAO,GAAG,MAAMT,aAAa,CAAC,KAAD,CAAjC;;AAEA,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEL,IAAI,CAACO,QAAL,CAAcQ,GAAd,CAAmBC,CAAD,KAAQ;AAC/BJ,QAAAA,EAAE,EAAEI,CAAC,CAACJ,EADyB;AAE/BK,QAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,OAAR,CAAlB,CALT,CAQO;;AARP;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,OAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAEb,WAAW,CAACW,IALxB;AAME,MAAA,QAAQ,EAAEf,IAAI,CAACkB,EAAL,CAAQC,QANpB;AAOE,MAAA,QAAQ,EAAEf,WAAW,CAACgB,QAPxB;AAQE,MAAA,KAAK,EAAE,IART;AASE,MAAA,MAAM,EAAET;AATV;AAAA;AAAA;AAAA;AAAA,YAZF,eAuBE,QAAC,WAAD;AACE,MAAA,IAAI,EAAET,UADR;AAEE,MAAA,OAAO,EAAEU,OAFX;AAGE,MAAA,MAAM,EAAEL,QAAQ,CAACV,aAAD;AAHlB;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA,kBADF;AA+BD,CAnDM","sourcesContent":["import { Box } from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { Channel } from '../components/channel'\nimport { ChannelForm } from '../components/channelForm'\nimport { Team } from '../components/team'\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: string | undefined\n}\nexport const Sidebar: React.FC<SidebarProps> = ({ currentTeamId }) => {\n  const { data, loading } = useAllTeamsQuery()\n  const { data: user, loading: userLoad } = useMeQuery()\n  const [modalState, setModalState] = useState(false)\n\n  if (loading || userLoad) {\n    return <Box>loading</Box>\n  }\n  if (!user) {\n    return <Box>Please login</Box>\n  }\n  let currentTeam = data.AllTeams[0]\n  if (typeof currentTeamId === 'string') {\n    let teamId = parseInt(currentTeamId)\n    currentTeam = data.AllTeams.find((u) => u.id === teamId)\n  }\n\n  let toOpen = () => setModalState(true)\n  let toClose = () => setModalState(false)\n\n  return (\n    <>\n      <Team\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={data.AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      />\n\n      <Channel\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={currentTeam.name}\n        username={user.me.username}\n        channels={currentTeam.channels}\n        users={null}\n        toOpen={toOpen}\n      />\n      <ChannelForm\n        open={modalState}\n        toClose={toClose}\n        teamId={parseInt(currentTeamId)}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}