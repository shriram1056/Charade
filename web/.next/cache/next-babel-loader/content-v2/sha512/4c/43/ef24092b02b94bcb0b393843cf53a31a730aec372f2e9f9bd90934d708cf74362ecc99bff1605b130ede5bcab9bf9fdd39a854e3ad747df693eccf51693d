{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const AllUserDocument = gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllUserDocument, options);\n}\nexport function useAllUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllUserDocument, options);\n}","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","AllUserDocument","useAllUserQuery","baseOptions","options","useQuery","useAllUserLazyQuery","useLazyQuery"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AA8GA,OAAO,MAAMC,eAAe,GAAGH,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAPO;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,eAAT,CAAyBC,WAAzB,EAAqG;AACpG,QAAMC,OAAO,mCAAOJ,cAAP,GAA0BG,WAA1B,CAAb;;AACA,SAAOJ,MAAM,CAACM,QAAP,CAAqDJ,eAArD,EAAsEG,OAAtE,CAAP;AACD;AACP,OAAO,SAASE,mBAAT,CAA6BH,WAA7B,EAA6G;AAC1G,QAAMC,OAAO,mCAAOJ,cAAP,GAA0BG,WAA1B,CAAb;;AACA,SAAOJ,MAAM,CAACQ,YAAP,CAAyDN,eAAzD,EAA0EG,OAA1E,CAAP;AACD","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUser: User;\n  allUser: Array<User>;\n};\n\n\nexport type QueryGetUserArgs = {\n  id: Scalars['Int'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  team: Array<Team>;\n};\n\nexport type Team = {\n  __typename?: 'Team';\n  name: Scalars['String'];\n  user: Array<User>;\n  owner: User;\n  channels: Array<Channel>;\n};\n\nexport type Channel = {\n  __typename?: 'Channel';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  public: Scalars['Boolean'];\n  messages: Array<Message>;\n  user: Array<User>;\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  id: Scalars['Float'];\n  text: Scalars['String'];\n  user: User;\n  channel: Channel;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createChannel: Scalars['Boolean'];\n  createMessage: Scalars['Boolean'];\n  createTeam: Scalars['Boolean'];\n  createUser: UserResponse;\n};\n\n\nexport type MutationCreateChannelArgs = {\n  public: Scalars['Boolean'];\n  teamId: Scalars['Int'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreateMessageArgs = {\n  ChannelId: Scalars['Int'];\n  text: Scalars['String'];\n};\n\n\nexport type MutationCreateTeamArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type AllUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllUserQuery = (\n  { __typename?: 'Query' }\n  & { allUser: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\n\nexport const AllUserDocument = gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllUserQuery(baseOptions?: Apollo.QueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n      }\nexport function useAllUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n        }\nexport type AllUserQueryHookResult = ReturnType<typeof useAllUserQuery>;\nexport type AllUserLazyQueryHookResult = ReturnType<typeof useAllUserLazyQuery>;\nexport type AllUserQueryResult = Apollo.QueryResult<AllUserQuery, AllUserQueryVariables>;"]},"metadata":{},"sourceType":"module"}