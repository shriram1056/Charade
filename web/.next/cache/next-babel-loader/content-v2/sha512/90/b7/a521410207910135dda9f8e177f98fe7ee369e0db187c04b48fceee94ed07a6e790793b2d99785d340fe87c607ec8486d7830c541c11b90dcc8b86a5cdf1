{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input, Textarea } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React from 'react'; //InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\n\n// 'props' is a special keyword in React, which stands for properties and is being used for passing data from one component to another.\nexport var InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      textarea = _ref.textarea,\n      _ = _ref.size,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"size\"]);\n\n  var InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  } // console.log(props) // { name: 'username', placeholder: 'username' }\n\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error; //this helps to connect the input fields to formik\n  // field: value,name and onChange\n  //error is received from set errors\n\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(InputOrTextarea, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      // html input attributes\n      id: field.name,\n      placeholder: props.placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","Textarea","useField","React","InputField","label","textarea","_","size","props","InputOrTextarea","field","error","name","placeholder"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,QALF,QAMO,kBANP;AAOA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C,C,CACA;;AASA;AAEA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAO/C;AAAA;;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAFEC,CAEF,QAFJC,IAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGV,KAAtB;;AACA,MAAIM,QAAJ,EAAc;AACZI,IAAAA,eAAe,GAAGT,QAAlB;AACD,GAJG,CAKJ;;;AALI,kBAOuBC,QAAQ,CAACO,KAAD,CAP/B;AAAA;AAAA,MAOGE,KAPH;AAAA,MAOYC,KAPZ,iBAOYA,KAPZ,EAQJ;AACA;AACA;;;AACA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA,4BAEE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEH,KAAK,CAACI,IAA1B;AAAA,gBAAiCR;AAAjC;AAAA;AAAA;AAAA;AAAA,aAFF,eAIE,QAAC,eAAD,gDACMM,KADN,GAEMF,KAFN;AAEa;AACX,MAAA,EAAE,EAAEE,KAAK,CAACE,IAHZ;AAIE,MAAA,WAAW,EAAEJ,KAAK,CAACK;AAJrB;AAAA;AAAA;AAAA;AAAA,aAJF,EAUGF,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,aAAH,GAAkD,IAV1D;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CAhCM;;GAAMR,U;UAcgBF,Q;;;KAdhBE,U","sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Textarea,\n} from '@chakra-ui/react'\nimport { useField } from 'formik'\nimport React, { InputHTMLAttributes } from 'react'\n//InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  // non-input properties\n  label: string\n  placeholder: string\n  //end\n  name: string // we are modifying the InputHTMLAttributes's properties here to be required\n  textarea?: boolean\n}\n// 'props' is a special keyword in React, which stands for properties and is being used for passing data from one component to another.\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  //the below 2 are not html properties\n  label,\n  textarea,\n  // end\n  size: _,\n  ...props // special keyword. this is rest operator\n}) => {\n  let InputOrTextarea = Input\n  if (textarea) {\n    InputOrTextarea = Textarea as any\n  }\n  // console.log(props) // { name: 'username', placeholder: 'username' }\n\n  const [field, { error }] = useField(props)\n  //this helps to connect the input fields to formik\n  // field: value,name and onChange\n  //error is received from set errors\n  return (\n    <FormControl isInvalid={!!error}>\n      {/*control the inputs. */}\n      <FormLabel htmlFor={props.name}>{label}</FormLabel>\n      {/* point label to field with id */}\n      <InputOrTextarea\n        {...field} // state for value\n        {...props} // html input attributes\n        id={field.name}\n        placeholder={props.placeholder}\n      />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}