{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/login.tsx\";\nimport { Box, Button } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport { useRouter } from 'next/dist/client/router';\nimport React from 'react';\nimport { MessageTypes } from 'subscriptions-transport-ws';\nimport { InputField } from '../components/InputField';\nimport { Wrapper } from '../components/Wrapper';\nimport { useLoginMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { subscriptionClient, withApollo } from '../utils/withApollo';\n\nconst Login = ({}) => {\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await login({\n          variables: {\n            email: values.email,\n            password: values.password\n          }\n        });\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Login.errors) {\n          console.log(toErrorMap(response.data.Login.errors));\n          setErrors(toErrorMap(response.data.Login.errors));\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.Login.user) {\n          // Close socket connection which will also unregister subscriptions on the server-side.\n          subscriptionClient.close(); // Reconnect to the server.\n          //@ts-ignore\n\n          subscriptionClient.connect(); // Reregister all subscriptions.\n\n          Object.keys(subscriptionClient.operations).forEach(id => {\n            //@ts-ignore\n            subscriptionClient.sendMessage(id, MessageTypes.GQL_START, subscriptionClient.operations[id].options);\n          });\n\n          if (typeof router.query.next === 'string') {\n            router.replace(router.query.next);\n          }\n\n          router.replace('/view-team');\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"email\",\n          placeholder: \"email\",\n          label: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"password\",\n            placeholder: \"password\",\n            label: \"password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          type: \"submit\",\n          colorScheme: \"teal\",\n          isLoading: isSubmitting // show loading if is still submitting\n          ,\n          children: \"login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(Login);","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/login.tsx"],"names":["Box","Button","Form","Formik","useRouter","React","MessageTypes","InputField","Wrapper","useLoginMutation","toErrorMap","subscriptionClient","withApollo","Login","router","login","email","password","values","setErrors","response","variables","data","errors","console","log","user","close","connect","Object","keys","operations","forEach","id","sendMessage","GQL_START","options","query","next","replace","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button } from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport { useRouter } from 'next/dist/client/router'\nimport React from 'react'\nimport { MessageTypes } from 'subscriptions-transport-ws'\nimport { InputField } from '../components/InputField'\nimport { Wrapper } from '../components/Wrapper'\nimport { useLoginMutation } from '../generated/graphql'\nimport { toErrorMap } from '../utils/toErrorMap'\nimport { subscriptionClient, withApollo } from '../utils/withApollo'\n\nconst Login: React.FC<{}> = ({}) => {\n  const router = useRouter()\n  const [login] = useLoginMutation()\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await login({\n            variables: {\n              email: values.email,\n              password: values.password,\n            },\n          })\n          if (response.data?.Login.errors) {\n            console.log(toErrorMap(response.data.Login.errors))\n            setErrors(toErrorMap(response.data.Login.errors))\n          } else if (response.data?.Login.user) {\n            // Close socket connection which will also unregister subscriptions on the server-side.\n            subscriptionClient.close()\n\n            // Reconnect to the server.\n            //@ts-ignore\n            subscriptionClient.connect()\n\n            // Reregister all subscriptions.\n            Object.keys(subscriptionClient.operations).forEach((id) => {\n              //@ts-ignore\n              subscriptionClient.sendMessage(\n                id,\n                MessageTypes.GQL_START,\n                subscriptionClient.operations[id].options\n              )\n            })\n            if (typeof router.query.next === 'string') {\n              router.replace(router.query.next)\n            }\n            router.replace('/view-team')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"email\" placeholder=\"email\" label=\"email\" />\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting} // show loading if is still submitting\n            >\n              login\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  )\n}\nexport default withApollo({ ssr: false })(Login)\n"]},"metadata":{},"sourceType":"module"}