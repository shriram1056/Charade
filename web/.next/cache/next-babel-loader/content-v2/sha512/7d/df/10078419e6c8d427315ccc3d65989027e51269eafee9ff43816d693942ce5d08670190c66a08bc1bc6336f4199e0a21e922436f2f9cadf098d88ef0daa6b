{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'; // ctx can be undefined in ssr:false, so we need optional\n\nvar createClient = function createClient(ctx) // ctx for forwarding cookie in ssr\n{\n  var _ctx$req, _ctx$req2;\n\n  var httpLink = new HttpLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include',\n    //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie: (false ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    }\n  }); //WebSocket is a property that exists only in the browser\n\n  var wsLink = true ? new WebSocketLink({\n    uri: 'ws://localhost:4001/subscriptions',\n    options: {\n      reconnect: true,\n      connectionParams: {\n        authToken: ctx === null || ctx === void 0 ? void 0 : (_ctx$req2 = ctx.req) === null || _ctx$req2 === void 0 ? void 0 : _ctx$req2.headers.cookie\n      }\n    }\n  }) : null;\n  var splitLink = true ? split(function (_ref) {\n    var query = _ref.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, wsLink, httpLink) : httpLink; // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new ApolloClient({\n    link: splitLink,\n    //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache(),\n    ssrMode: false // Disables forceFetch on the server (so queries are only run once)\n\n  });\n};\n\nexport var withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","WebSocketLink","getMainDefinition","withApollo","createWithApollo","createClient","ctx","httpLink","uri","credentials","headers","cookie","req","undefined","wsLink","options","reconnect","connectionParams","authToken","splitLink","query","definition","kind","operation","link","cache","ssrMode"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,KAAhD,QAA6D,gBAA7D;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA;AACA,SAASC,UAAU,IAAIC,gBAAvB,QAA+C,aAA/C,C,CAEA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CACnBC,GADmB,EACG;AACnB;AAAA;;AACH,MAAMC,QAAQ,GAAG,IAAIT,QAAJ,CAAa;AAC5BU,IAAAA,GAAG,EAAE,+BADuB;AAE5BC,IAAAA,WAAW,EAAE,SAFe;AAEJ;AACxBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,CAAC,QACGL,GADH,aACGA,GADH,mCACGA,GAAG,CAAEM,GADR,6CACG,SAAUF,OAAV,CAAkBC,MADrB,GAEGE,SAFJ,KAEkB;AAJb;AAHmB,GAAb,CAAjB,CADG,CAYH;;AACA,MAAMC,MAAM,GACV,OACI,IAAIb,aAAJ,CAAkB;AAChBO,IAAAA,GAAG,EAAE,mCADW;AAEhBO,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,SAAS,EAAEZ,GAAF,aAAEA,GAAF,oCAAEA,GAAG,CAAEM,GAAP,8CAAE,UAAUF,OAAV,CAAkBC;AADb;AAFX;AAFO,GAAlB,CADJ,GAUI,IAXN;AAaA,MAAMQ,SAAS,GACb,OACInB,KAAK,CACH,gBAAe;AAAA,QAAZoB,KAAY,QAAZA,KAAY;AACb,QAAMC,UAAU,GAAGnB,iBAAiB,CAACkB,KAAD,CAApC;AACA,WACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,GAPE,EAQHT,MARG,EASHP,QATG,CADT,GAYIA,QAbN,CA1BG,CAuCY;;AAEf,SAAO,IAAIV,YAAJ,CAAiB;AACtB2B,IAAAA,IAAI,EAAEL,SADgB;AACL;AACjBM,IAAAA,KAAK,EAAE,IAAI1B,aAAJ,EAFe;AAGtB2B,IAAAA,OAAO,OAHe,CAGkB;;AAHlB,GAAjB,CAAP;AAKD,CAhDD;;AAiDA,OAAO,IAAMvB,UAAU,GAAGC,gBAAgB,CAACC,YAAD,CAAnC,C,CAEP","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\n\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (\n  ctx?: NextPageContext // ctx for forwarding cookie in ssr\n) => {\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie:\n        (typeof window === 'undefined'\n          ? ctx?.req?.headers.cookie\n          : undefined) || '',\n    },\n  })\n\n  //WebSocket is a property that exists only in the browser\n  const wsLink =\n    typeof window !== 'undefined'\n      ? new WebSocketLink({\n          uri: 'ws://localhost:4001/subscriptions',\n          options: {\n            reconnect: true,\n            connectionParams: {\n              authToken: ctx?.req?.headers.cookie,\n            },\n          },\n        })\n      : null\n\n  const splitLink =\n    typeof window !== 'undefined'\n      ? split(\n          ({ query }) => {\n            const definition = getMainDefinition(query)\n            return (\n              definition.kind === 'OperationDefinition' &&\n              definition.operation === 'subscription'\n            )\n          },\n          wsLink,\n          httpLink\n        )\n      : httpLink // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new ApolloClient({\n    link: splitLink, //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache(),\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n  })\n}\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n"]},"metadata":{},"sourceType":"module"}