{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx\";\nimport { gql } from '@apollo/client';\nimport { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useCreateChannelMutation } from '../generated/graphql';\nimport { InputField } from './InputField';\nexport const ChannelForm = ({\n  open,\n  toClose,\n  teamId\n}) => {\n  const [createChannel] = useCreateChannelMutation();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            channelName: ''\n          },\n          onSubmit: async (values, {\n            setErrors\n          }) => {\n            const response = await createChannel({\n              variables: {\n                teamId: teamId,\n                name: values.channelName\n              },\n              optimisticResponse: {\n                // this mimics the response object\n                __typename: 'Mutation',\n                createChannel: {\n                  __typename: 'ChannelResponse',\n                  channel: {\n                    __typename: 'Channel',\n                    id: -1,\n                    name: values.channelName,\n                    public: true\n                  }\n                }\n              },\n              update: (cache, {\n                data: {\n                  createChannel\n                }\n              }) => {\n                // double destructure: You can destructure and assign the default value in a single statement.\n                // here the data is channelResponse\n                //data is the result of query/mutation.\n                // const data = cache.readQuery<AllTeamsQuery>({\n                //   query: AllTeamsDocument,\n                // })\n                // const teamIdx = data.AllTeams.indexOf(\n                //   data.AllTeams.find((u) => u.id === teamId)\n                // )\n                // const writeData = _.cloneDeep(data) // you need to copy from original object because 'data' is not extensible\n                // if (writeData.AllTeams[teamIdx].channels) {\n                //   // if there is channel\n                //   writeData.AllTeams[teamIdx].channels.push(\n                //     createChannel.channel\n                //   )\n                // } else {\n                //   // if there is no channel\n                //   writeData.AllTeams[teamIdx].channels = [\n                //     createChannel.channel,\n                //   ]\n                // }\n                // toClose(),\n                //   cache.writeQuery<AllTeamsQuery>({\n                //     query: AllTeamsDocument,\n                //     data: writeData,\n                //   })\n                const data = cache.readFragment({\n                  id: 'Team:' + teamId,\n                  fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `\n                });\n\n                if (data.channel) {\n                  // if there is channel\n                  data.channel.push(createChannel.channel);\n                } else {\n                  // if there is no channel\n                  data.channel = [createChannel.channel];\n                }\n\n                cache.writeFragment({\n                  id: 'Team:' + teamId,\n                  fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                  data\n                });\n              }\n            });\n          },\n          children: ({\n            isSubmitting\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              placeholder: \"channel\",\n              channel: true,\n              name: \"channelName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              margin: \"10px auto 0 auto\",\n              display: \"block\",\n              backgroundColor: \"teal.300\",\n              isLoading: isSubmitting //     onClick={isSubmitting ? null : toClose}\n              ,\n              children: \"Create Channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}; //Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx"],"names":["gql","Button","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","React","useCreateChannelMutation","InputField","ChannelForm","open","toClose","teamId","createChannel","channelName","values","setErrors","response","variables","name","optimisticResponse","__typename","channel","id","public","update","cache","data","readFragment","fragment","push","writeFragment","isSubmitting"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client'\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport React from 'react'\nimport { Channel, useCreateChannelMutation } from '../generated/graphql'\nimport { InputField } from './InputField'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\nexport const ChannelForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  const [createChannel] = useCreateChannelMutation()\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Formik\n            initialValues={{ channelName: '' }}\n            onSubmit={async (values, { setErrors }) => {\n              const response = await createChannel({\n                variables: { teamId: teamId, name: values.channelName },\n                optimisticResponse: {\n                  // this mimics the response object\n                  __typename: 'Mutation',\n                  createChannel: {\n                    __typename: 'ChannelResponse',\n                    channel: {\n                      __typename: 'Channel',\n                      id: -1,\n                      name: values.channelName,\n                      public: true,\n                    },\n                  },\n                },\n                update: (cache, { data: { createChannel } }) => {\n                  // double destructure: You can destructure and assign the default value in a single statement.\n                  // here the data is channelResponse\n                  //data is the result of query/mutation.\n                  // const data = cache.readQuery<AllTeamsQuery>({\n                  //   query: AllTeamsDocument,\n                  // })\n                  // const teamIdx = data.AllTeams.indexOf(\n                  //   data.AllTeams.find((u) => u.id === teamId)\n                  // )\n                  // const writeData = _.cloneDeep(data) // you need to copy from original object because 'data' is not extensible\n                  // if (writeData.AllTeams[teamIdx].channels) {\n                  //   // if there is channel\n                  //   writeData.AllTeams[teamIdx].channels.push(\n                  //     createChannel.channel\n                  //   )\n                  // } else {\n                  //   // if there is no channel\n                  //   writeData.AllTeams[teamIdx].channels = [\n                  //     createChannel.channel,\n                  //   ]\n                  // }\n                  // toClose(),\n                  //   cache.writeQuery<AllTeamsQuery>({\n                  //     query: AllTeamsDocument,\n                  //     data: writeData,\n                  //   })\n                  const data = cache.readFragment<{\n                    channel: Channel[]\n                  }>({\n                    id: 'Team:' + teamId,\n                    fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                  })\n                  if (data.channel) {\n                    // if there is channel\n                    data.channel.push(createChannel.channel)\n                  } else {\n                    // if there is no channel\n                    data.channel = [createChannel.channel]\n                  }\n\n                  cache.writeFragment({\n                    id: 'Team:' + teamId,\n                    fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                    data,\n                  })\n                },\n              })\n            }}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <InputField\n                  placeholder=\"channel\"\n                  channel={true}\n                  name=\"channelName\"\n                />\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                  //     onClick={isSubmitting ? null : toClose}\n                >\n                  Create Channel\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n//Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n"]},"metadata":{},"sourceType":"module"}