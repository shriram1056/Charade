{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { ChannelForm } from '../components/channelForm';\nimport { Team as Teams } from '../components/team';\nexport var Sidebar = function Sidebar(_ref) {\n  _s();\n\n  var currentTeamId = _ref.currentTeamId,\n      data = _ref.data,\n      user = _ref.user,\n      Team = _ref.Team;\n\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose; // open and close modal\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Teams, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: data.AllTeams.map(function (t) {\n        return {\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase()\n        };\n      }) // map return a new array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Channel, {\n      onInvite: onOpen,\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: Team.name,\n      username: user.me.username,\n      channels: Team.channels,\n      teamId: Team.id,\n      users: null,\n      toOpen: onOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ChannelForm, {\n      open: isOpen,\n      toClose: onClose,\n      teamId: currentTeamId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Sidebar, \"b6HgRGUKK6FEfELRcVwOTS4RtgI=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["useDisclosure","React","Channel","ChannelForm","Team","Teams","Sidebar","currentTeamId","data","user","isOpen","onOpen","onClose","AllTeams","map","t","id","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;;;;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,oBAA9B;AASA,OAAO,IAAMC,OAA+B,GAAG,SAAlCA,OAAkC,OAKzC;AAAA;;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADJL,IACI,QADJA,IACI;;AAAA,uBACgCJ,aAAa,EAD7C;AAAA,MACIU,MADJ,kBACIA,MADJ;AAAA,MACYC,MADZ,kBACYA,MADZ;AAAA,MACoBC,OADpB,kBACoBA,OADpB,EACgD;;;AAEpD,sBACE;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEJ,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAkB,UAACC,CAAD;AAAA,eAAQ;AAC/BC,UAAAA,EAAE,EAAED,CAAC,CAACC,EADyB;AAE/BC,UAAAA,IAAI,EAAEF,CAAC,CAACE,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,SAAR;AAAA,OAAlB,CALT,CAQO;;AARP;AAAA;AAAA;AAAA;AAAA,aADF,eAYE,QAAC,OAAD;AACE,MAAA,QAAQ,EAAER,MADZ;AAEE,MAAA,UAAU,EAAC,GAFb;AAGE,MAAA,OAAO,EAAC,OAHV;AAIE,MAAA,EAAE,EAAC,SAJL;AAKE,MAAA,KAAK,EAAC,SALR;AAME,MAAA,QAAQ,EAAEP,IAAI,CAACa,IANjB;AAOE,MAAA,QAAQ,EAAER,IAAI,CAACW,EAAL,CAAQC,QAPpB;AAQE,MAAA,QAAQ,EAAEjB,IAAI,CAACkB,QARjB;AASE,MAAA,MAAM,EAAElB,IAAI,CAACY,EATf;AAUE,MAAA,KAAK,EAAE,IAVT;AAWE,MAAA,MAAM,EAAEL;AAXV;AAAA;AAAA;AAAA;AAAA,aAZF,eAyBE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAED,MAAnB;AAA2B,MAAA,OAAO,EAAEE,OAApC;AAA6C,MAAA,MAAM,EAAEL;AAArD;AAAA;AAAA;AAAA;AAAA,aAzBF;AAAA,kBADF;AA6BD,CArCM;;GAAMD,O;UAMyBN,a;;;KANzBM,O","sourcesContent":["import { useDisclosure } from '@chakra-ui/react'\nimport React from 'react'\nimport { Channel } from '../components/channel'\nimport { ChannelForm } from '../components/channelForm'\nimport { Team as Teams } from '../components/team'\nimport { AllTeamsQuery, MeQuery, Team as team } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: number\n  data: AllTeamsQuery\n  user: MeQuery\n  Team: team\n}\nexport const Sidebar: React.FC<SidebarProps> = ({\n  currentTeamId,\n  data,\n  user,\n  Team,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure() // open and close modal\n\n  return (\n    <>\n      <Teams\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={data.AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      />\n\n      <Channel\n        onInvite={onOpen}\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={Team.name}\n        username={user.me.username}\n        channels={Team.channels}\n        teamId={Team.id}\n        users={null}\n        toOpen={onOpen}\n      />\n      <ChannelForm open={isOpen} toClose={onClose} teamId={currentTeamId} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}