{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageContainer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Text } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport { NewDirectMessageDocument, useDirectMessageQuery } from '../generated/graphql';\n\nconst Chats = ({\n  message\n}) => {\n  const {\n    url,\n    text,\n    fileType\n  } = message;\n  console.log(url, text);\n\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, this);\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return /*#__PURE__*/_jsxDEV(RenderText, {\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }, this);\n    } else if (fileType.startsWith('audio/')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: url,\n            type: fileType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n\nexport const DirectMessage = ({\n  teamId,\n  receiverId\n}) => {\n  const {\n    data,\n    loading,\n    subscribeToMore,\n    fetchMore\n  } = useDirectMessageQuery({\n    variables: {\n      receiverId,\n      teamId\n    },\n    fetchPolicy: 'network-only'\n  });\n  const {\n    0: element,\n    1: setScroll\n  } = useState();\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewDirectMessageDocument,\n      variables: {\n        receiverId,\n        teamId\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) {\n          return prev;\n        } //@ts-ignore\n\n\n        const {\n          newDirectMessage\n        } = subscriptionData.data; // prev is a data with __typename and Message\n\n        let newData = _objectSpread(_objectSpread({}, prev), {}, {\n          Messages: _objectSpread(_objectSpread({}, prev.DirectMessages), {}, {\n            Messages: [newDirectMessage, ...prev.DirectMessages.Messages]\n          }) //FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. DON'T FORGET TO CHANGE THE DirectMessages FIELD NAME ACCORDING TO YOUR NEEDS\n\n        });\n\n        console.log(newData);\n        return newData;\n      }\n    });\n\n    if (unsubscribe) {\n      return () => unsubscribe(); // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, receiverId, teamId]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    ref: scroll => setScroll(scroll),\n    pl: 3,\n    pt: 4,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      children: [' ', data !== null && data !== void 0 && data.DirectMessages ? data.DirectMessages.Messages.slice().reverse().map((u, i) => /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          fontSize: \"19px\",\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          children: [u.sender.username, /*#__PURE__*/_jsxDEV(Text, {\n            ml: 2,\n            display: \"inline\",\n            fontSize: \"13px\",\n            fontFamily: \"sans-serif\",\n            color: \"#958993\",\n            children: u.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Chats, {\n          message: u\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 19\n        }, this), i === 10 && data.DirectMessages.hasMore ? /*#__PURE__*/_jsxDEV(Waypoint, {\n          onEnter: () => {\n            console.log(i);\n            return fetchMore({\n              variables: {\n                receiverId,\n                teamId,\n                cursor: data.DirectMessages.Messages[data.DirectMessages.Messages.length - 1].createdAt\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this) : null]\n      }, `directMessage-${u.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageContainer.tsx"],"names":["Box","Text","React","useEffect","useState","Waypoint","NewDirectMessageDocument","useDirectMessageQuery","Chats","message","url","text","fileType","console","log","startsWith","DirectMessage","teamId","receiverId","data","loading","subscribeToMore","fetchMore","variables","fetchPolicy","element","setScroll","unsubscribe","document","updateQuery","prev","subscriptionData","newDirectMessage","newData","Messages","DirectMessages","scroll","slice","reverse","map","u","i","sender","username","createdAt","hasMore","cursor","length","id"],"mappings":"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","sourcesContent":["import { Box, Text } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport { Waypoint } from 'react-waypoint'\nimport {\n  NewDirectMessageDocument,\n  useDirectMessageQuery,\n} from '../generated/graphql'\n\nconst Chats = ({ message }) => {\n  const { url, text, fileType } = message\n  console.log(url, text)\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return <img src={url} alt=\"\" />\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return <RenderText url={url} />\n    } else if (fileType.startsWith('audio/')) {\n      return (\n        <div>\n          <audio controls>\n            <source src={url} type={fileType} />\n          </audio>\n        </div>\n      )\n    }\n  }\n  return <Box>{text}</Box>\n}\n\ninterface MessageProps {\n  teamId: number\n  receiverId: number\n}\n\nexport const DirectMessage: React.FC<MessageProps> = ({\n  teamId,\n  receiverId,\n}) => {\n  const { data, loading, subscribeToMore, fetchMore } = useDirectMessageQuery({\n    variables: {\n      receiverId,\n      teamId,\n    },\n    fetchPolicy: 'network-only',\n  })\n  const [element, setScroll] = useState<HTMLDivElement>()\n\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewDirectMessageDocument,\n      variables: { receiverId, teamId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        //@ts-ignore\n        const { newDirectMessage } = subscriptionData.data\n        // prev is a data with __typename and Message\n        let newData = {\n          ...prev,\n          Messages: {\n            ...prev.DirectMessages,\n            Messages: [newDirectMessage, ...prev.DirectMessages.Messages],\n          },\n          //FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. DON'T FORGET TO CHANGE THE DirectMessages FIELD NAME ACCORDING TO YOUR NEEDS\n        }\n        console.log(newData)\n        return newData\n      },\n    })\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, receiverId, teamId])\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n      ref={(scroll) => setScroll(scroll)}\n      pl={3}\n      pt={4}\n    >\n      <Box display=\"flex\" flexDirection=\"column\">\n        {' '}\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        {data?.DirectMessages\n          ? data.DirectMessages.Messages.slice()\n              .reverse()\n              .map((u, i) => (\n                <Box mb={4} key={`directMessage-${u.id}`}>\n                  <Box\n                    fontSize=\"19px\"\n                    fontFamily=\"sans-serif\"\n                    fontWeight=\"bold\"\n                  >\n                    {u.sender.username}\n                    <Text\n                      ml={2}\n                      display=\"inline\"\n                      fontSize=\"13px\"\n                      fontFamily=\"sans-serif\"\n                      color=\"#958993\"\n                    >\n                      {u.createdAt}\n                    </Text>\n                  </Box>\n                  <Chats message={u} />\n                  {i === 10 && data.DirectMessages.hasMore ? (\n                    <Waypoint\n                      onEnter={() => {\n                        console.log(i)\n                        return fetchMore({\n                          variables: {\n                            receiverId,\n                            teamId,\n                            cursor:\n                              data.DirectMessages.Messages[\n                                data.DirectMessages.Messages.length - 1\n                              ].createdAt,\n                          },\n                        })\n                      }}\n                    />\n                  ) : null}\n                </Box>\n              ))\n          : null}\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}