{"ast":null,"code":"import _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useCreateChannelMutation } from '../generated/graphql';\nimport { InputField } from './InputField';\nimport { MultipleUser } from './multipleUser';\nexport var ChannelForm = function ChannelForm(_ref) {\n  _s();\n\n  var open = _ref.open,\n      toClose = _ref.toClose,\n      teamId = _ref.teamId,\n      data = _ref.data,\n      loading = _ref.loading;\n\n  var _useCreateChannelMuta = useCreateChannelMutation(),\n      _useCreateChannelMuta2 = _slicedToArray(_useCreateChannelMuta, 1),\n      createChannel = _useCreateChannelMuta2[0];\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: function onClose() {\n      return toClose();\n    },\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            channelName: '',\n            \"public\": true,\n            members: []\n          },\n          onSubmit: /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n              var setErrors, usernames;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      setErrors = _ref2.setErrors;\n                      usernames = values.members.map(function (u) {\n                        return u.username;\n                      });\n                      console.log(usernames); // const response = await createChannel({\n                      //   variables: {\n                      //     teamId: teamId,\n                      //     name: values.channelName,\n                      //     public: values.public,\n                      //     members:usernames\n                      //   },\n                      //   optimisticResponse: {\n                      //     // this mimics the response object\n                      //     __typename: 'Mutation',\n                      //     createChannel: {\n                      //       __typename: 'ChannelResponse',\n                      //       channel: {\n                      //         __typename: 'Channel',\n                      //         id: -1,\n                      //         name: values.channelName,\n                      //         public: true,\n                      //       },\n                      //     },\n                      //   },\n                      //   update: (cache, { data: { createChannel } }) => {\n                      //     // double destructure: You can destructure and assign the default value in a single statement.\n                      //     // here the data is channelResponse\n                      //     //data is the result of query/mutation.\n                      //     const data = cache.readFragment<{\n                      //       channels: Channel[]\n                      //     }>({\n                      //       id: 'Team:' + teamId,\n                      //       fragment: gql`\n                      //         fragment _ on Team {\n                      //           channels {\n                      //             id\n                      //             name\n                      //             public\n                      //           }\n                      //         }\n                      //       `,\n                      //     })\n                      //     const writeData = _.cloneDeep(data)\n                      //     if (writeData.channels) {\n                      //       // if there is channel\n                      //       writeData.channels.push(createChannel.channel)\n                      //     } else {\n                      //       // if there is no channel\n                      //       writeData.channels = [createChannel.channel]\n                      //     }\n                      //     console.log(writeData)\n                      //     toClose()\n                      //     cache.writeFragment({\n                      //       id: 'Team:' + teamId,\n                      //       fragment: gql`\n                      //         fragment _ on Team {\n                      //           channels {\n                      //             id\n                      //             name\n                      //             public\n                      //           }\n                      //         }\n                      //       `,\n                      //       data: writeData,\n                      //     })\n                      //   },\n                      // })\n\n                    case 3:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            return function (_x, _x2) {\n              return _ref3.apply(this, arguments);\n            };\n          }(),\n          children: function children(_ref4) {\n            var isSubmitting = _ref4.isSubmitting,\n                values = _ref4.values,\n                setFieldValue = _ref4.setFieldValue;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(InputField, {\n                placeholder: \"channel\",\n                channel: true,\n                name: \"channelName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                label: \"private\",\n                mt: 2,\n                onChange: function onChange(e) {\n                  console.log(e.target.checked);\n                  setFieldValue('public', e.target.checked === true ? false : true);\n                },\n                mb: 2,\n                children: \"private\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, _this), !values[\"public\"] ? /*#__PURE__*/_jsxDEV(MultipleUser, {\n                data: data,\n                loading: loading,\n                values: setFieldValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, _this) : null, /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                margin: \"10px auto 0 auto\",\n                display: \"block\",\n                backgroundColor: \"teal.300\",\n                isLoading: isSubmitting,\n                children: \"Create Channel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n}; //Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n\n_s(ChannelForm, \"K3W8/If115YvjS5TXHrcUVS7Z+A=\", false, function () {\n  return [useCreateChannelMutation];\n});\n\n_c = ChannelForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelForm\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx"],"names":["Button","Checkbox","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","React","useCreateChannelMutation","InputField","MultipleUser","ChannelForm","open","toClose","teamId","data","loading","createChannel","channelName","members","values","setErrors","usernames","map","u","username","console","log","isSubmitting","setFieldValue","e","target","checked"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Checkbox,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport React from 'react'\nimport { useCreateChannelMutation } from '../generated/graphql'\nimport { InputField } from './InputField'\nimport { MultipleUser } from './multipleUser'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n  data: any\n  loading: boolean\n}\nexport const ChannelForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n  data,\n  loading,\n}) => {\n  const [createChannel] = useCreateChannelMutation()\n  return (\n    <Modal onClose={() => toClose()} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody textAlign=\"center\">\n          <Formik\n            initialValues={{ channelName: '', public: true, members: [] }}\n            onSubmit={async (values, { setErrors }) => {\n              const usernames = values.members.map((u) => u.username)\n              console.log(usernames)\n              // const response = await createChannel({\n              //   variables: {\n              //     teamId: teamId,\n              //     name: values.channelName,\n              //     public: values.public,\n              //     members:usernames\n              //   },\n              //   optimisticResponse: {\n              //     // this mimics the response object\n              //     __typename: 'Mutation',\n              //     createChannel: {\n              //       __typename: 'ChannelResponse',\n              //       channel: {\n              //         __typename: 'Channel',\n              //         id: -1,\n              //         name: values.channelName,\n              //         public: true,\n              //       },\n              //     },\n              //   },\n              //   update: (cache, { data: { createChannel } }) => {\n              //     // double destructure: You can destructure and assign the default value in a single statement.\n              //     // here the data is channelResponse\n              //     //data is the result of query/mutation.\n\n              //     const data = cache.readFragment<{\n              //       channels: Channel[]\n              //     }>({\n              //       id: 'Team:' + teamId,\n              //       fragment: gql`\n              //         fragment _ on Team {\n              //           channels {\n              //             id\n              //             name\n              //             public\n              //           }\n              //         }\n              //       `,\n              //     })\n              //     const writeData = _.cloneDeep(data)\n              //     if (writeData.channels) {\n              //       // if there is channel\n              //       writeData.channels.push(createChannel.channel)\n              //     } else {\n              //       // if there is no channel\n              //       writeData.channels = [createChannel.channel]\n              //     }\n              //     console.log(writeData)\n              //     toClose()\n              //     cache.writeFragment({\n              //       id: 'Team:' + teamId,\n              //       fragment: gql`\n              //         fragment _ on Team {\n              //           channels {\n              //             id\n              //             name\n              //             public\n              //           }\n              //         }\n              //       `,\n              //       data: writeData,\n              //     })\n              //   },\n              // })\n            }}\n          >\n            {({ isSubmitting, values, setFieldValue }) => (\n              <Form>\n                <InputField\n                  placeholder=\"channel\"\n                  channel={true}\n                  name=\"channelName\"\n                />\n                <Checkbox\n                  label=\"private\"\n                  mt={2}\n                  onChange={(e) => {\n                    console.log(e.target.checked)\n                    setFieldValue(\n                      'public',\n                      e.target.checked === true ? false : true\n                    )\n                  }}\n                  mb={2}\n                >\n                  private\n                </Checkbox>\n                {!values.public ? (\n                  <MultipleUser\n                    data={data}\n                    loading={loading}\n                    values={setFieldValue}\n                  />\n                ) : null}\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                >\n                  Create Channel\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n//Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n"]},"metadata":{},"sourceType":"module"}