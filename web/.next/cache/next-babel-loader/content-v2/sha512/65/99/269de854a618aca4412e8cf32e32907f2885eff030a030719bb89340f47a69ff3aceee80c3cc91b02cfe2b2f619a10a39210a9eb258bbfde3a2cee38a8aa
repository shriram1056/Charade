{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { Team } from '../components/team';\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql';\nexport var Sidebar = function Sidebar(_ref) {\n  _s();\n\n  var currentTeamId = _ref.currentTeamId;\n\n  var _useAllTeamsQuery = useAllTeamsQuery(),\n      data = _useAllTeamsQuery.data,\n      loading = _useAllTeamsQuery.loading;\n\n  var _useMeQuery = useMeQuery(),\n      user = _useMeQuery.data,\n      userLoad = _useMeQuery.loading; // the graphql queries and mutations should be at the top\n\n\n  if (loading) {\n    return null;\n  }\n\n  var teamId;\n\n  if (typeof currentTeamId === 'string') {\n    teamId = currentTeamId ? parseInt(currentTeamId) : 0;\n  }\n\n  var currentTeam = data.AllTeams.find(function (u) {\n    return u.id === teamId;\n  });\n\n  if (userLoad) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Team, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: data.AllTeams.map(function (t) {\n        return {\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase()\n        };\n      }) // map return a new array\n      ,\n      children: \"Teams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Channel, {\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: currentTeam.name,\n      username: user.me.username,\n      channels: currentTeam.channels,\n      users: null,\n      children: \"Channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Sidebar, \"uZlMlkcCEKz57S+UcubymN04iUY=\", false, function () {\n  return [useAllTeamsQuery, useMeQuery];\n});\n\n_c = Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["React","Channel","Team","useAllTeamsQuery","useMeQuery","Sidebar","currentTeamId","data","loading","user","userLoad","teamId","parseInt","currentTeam","AllTeams","find","u","id","map","t","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,sBAA7C;AAKA,OAAO,IAAMC,OAA+B,GAAG,SAAlCA,OAAkC,OAAuB;AAAA;;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,0BAC1CH,gBAAgB,EAD0B;AAAA,MAC5DI,IAD4D,qBAC5DA,IAD4D;AAAA,MACtDC,OADsD,qBACtDA,OADsD;;AAAA,oBAE1BJ,UAAU,EAFgB;AAAA,MAEtDK,IAFsD,eAE5DF,IAF4D;AAAA,MAEvCG,QAFuC,eAEhDF,OAFgD,EAIpE;;;AACA,MAAIA,OAAJ,EAAa;AACX,WAAO,IAAP;AACD;;AACD,MAAIG,MAAJ;;AACA,MAAI,OAAOL,aAAP,KAAyB,QAA7B,EAAuC;AACrCK,IAAAA,MAAM,GAAGL,aAAa,GAAGM,QAAQ,CAACN,aAAD,CAAX,GAA6B,CAAnD;AACD;;AACD,MAAMO,WAAW,GAAGN,IAAI,CAACO,QAAL,CAAcC,IAAd,CAAmB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,EAAF,KAASN,MAAhB;AAAA,GAAnB,CAApB;;AACA,MAAID,QAAJ,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEH,IAAI,CAACO,QAAL,CAAcI,GAAd,CAAkB,UAACC,CAAD;AAAA,eAAQ;AAC/BF,UAAAA,EAAE,EAAEE,CAAC,CAACF,EADyB;AAE/BG,UAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,SAAR;AAAA,OAAlB,CALT,CAQO;AARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAaE,QAAC,OAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAET,WAAW,CAACO,IALxB;AAME,MAAA,QAAQ,EAAEX,IAAI,CAACc,EAAL,CAAQC,QANpB;AAOE,MAAA,QAAQ,EAAEX,WAAW,CAACY,QAPxB;AAQE,MAAA,KAAK,EAAE,IART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAbF;AAAA,kBADF;AA4BD,CA5CM;;GAAMpB,O;UACeF,gB,EACgBC,U;;;KAF/BC,O","sourcesContent":["import React from 'react'\nimport { Channel } from '../components/channel'\nimport { Team } from '../components/team'\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: string | string[]\n}\nexport const Sidebar: React.FC<SidebarProps> = ({ currentTeamId }) => {\n  const { data, loading } = useAllTeamsQuery()\n  const { data: user, loading: userLoad } = useMeQuery()\n\n  // the graphql queries and mutations should be at the top\n  if (loading) {\n    return null\n  }\n  let teamId\n  if (typeof currentTeamId === 'string') {\n    teamId = currentTeamId ? parseInt(currentTeamId) : 0\n  }\n  const currentTeam = data.AllTeams.find((u) => u.id === teamId)\n  if (userLoad) {\n    return null\n  }\n  return (\n    <>\n      <Team\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={data.AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      >\n        Teams\n      </Team>\n      <Channel\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={currentTeam.name}\n        username={user.me.username}\n        channels={currentTeam.channels}\n        users={null}\n      >\n        Channels\n      </Channel>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}