{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx\";\nimport { Button, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useCreateChannelMutation } from '../generated/graphql';\nimport { InputField } from './InputField';\nimport { MultipleUser } from './multipleUser';\nexport const ChannelForm = ({\n  open,\n  toClose,\n  teamId,\n  data,\n  loading\n}) => {\n  const [createChannel] = useCreateChannelMutation();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => toClose(),\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            channelName: '',\n            public: true,\n            members: []\n          },\n          onSubmit: async (values, {\n            setErrors\n          }) => {\n            console.log(values);\n            const response = await createChannel({\n              variables: {\n                teamId: teamId,\n                name: values.channelName,\n                public: values.public\n              },\n              optimisticResponse: {\n                // this mimics the response object\n                __typename: 'Mutation',\n                createChannel: {\n                  __typename: 'ChannelResponse',\n                  channel: {\n                    __typename: 'Channel',\n                    id: -1,\n                    name: values.channelName,\n                    public: true\n                  }\n                }\n              },\n              update: (cache, {\n                data: {\n                  createChannel\n                }\n              }) => {\n                // double destructure: You can destructure and assign the default value in a single statement.\n                // here the data is channelResponse\n                //data is the result of query/mutation.\n                const data = cache.readFragment({\n                  id: 'Team:' + teamId,\n                  fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `\n                });\n\n                const writeData = _.cloneDeep(data);\n\n                if (writeData.channels) {\n                  // if there is channel\n                  writeData.channels.push(createChannel.channel);\n                } else {\n                  // if there is no channel\n                  writeData.channels = [createChannel.channel];\n                }\n\n                console.log(writeData);\n                toClose();\n                cache.writeFragment({\n                  id: 'Team:' + teamId,\n                  fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                  data: writeData\n                });\n              }\n            });\n          },\n          children: ({\n            isSubmitting,\n            values,\n            setFieldValue\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              placeholder: \"channel\",\n              channel: true,\n              name: \"channelName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              label: \"private\",\n              mt: 2,\n              onChange: e => {\n                console.log(e.target.checked);\n                setFieldValue('public', e.target.checked === true ? false : true);\n              },\n              mb: 2,\n              children: \"private\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), !values.public ? /*#__PURE__*/_jsxDEV(MultipleUser, {\n              data: data,\n              loading: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              margin: \"10px auto 0 auto\",\n              display: \"block\",\n              backgroundColor: \"teal.300\",\n              isLoading: isSubmitting,\n              children: \"Create Channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}; //Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx"],"names":["Button","Checkbox","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","gql","_","React","useCreateChannelMutation","InputField","MultipleUser","ChannelForm","open","toClose","teamId","data","loading","createChannel","channelName","public","members","values","setErrors","console","log","response","variables","name","optimisticResponse","__typename","channel","id","update","cache","readFragment","fragment","writeData","cloneDeep","channels","push","writeFragment","isSubmitting","setFieldValue","e","target","checked"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Checkbox,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport gql from 'graphql-tag'\nimport _ from 'lodash'\nimport React from 'react'\nimport { Channel, useCreateChannelMutation } from '../generated/graphql'\nimport { InputField } from './InputField'\nimport { MultipleUser } from './multipleUser'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n  data: any\n  loading: boolean\n}\nexport const ChannelForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n  data,\n  loading,\n}) => {\n  const [createChannel] = useCreateChannelMutation()\n  return (\n    <Modal onClose={() => toClose()} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody textAlign=\"center\">\n          <Formik\n            initialValues={{ channelName: '', public: true, members: [] }}\n            onSubmit={async (values, { setErrors }) => {\n              console.log(values)\n              const response = await createChannel({\n                variables: {\n                  teamId: teamId,\n                  name: values.channelName,\n                  public: values.public,\n                },\n                optimisticResponse: {\n                  // this mimics the response object\n                  __typename: 'Mutation',\n                  createChannel: {\n                    __typename: 'ChannelResponse',\n                    channel: {\n                      __typename: 'Channel',\n                      id: -1,\n                      name: values.channelName,\n                      public: true,\n                    },\n                  },\n                },\n                update: (cache, { data: { createChannel } }) => {\n                  // double destructure: You can destructure and assign the default value in a single statement.\n                  // here the data is channelResponse\n                  //data is the result of query/mutation.\n\n                  const data = cache.readFragment<{\n                    channels: Channel[]\n                  }>({\n                    id: 'Team:' + teamId,\n                    fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                  })\n                  const writeData = _.cloneDeep(data)\n                  if (writeData.channels) {\n                    // if there is channel\n                    writeData.channels.push(createChannel.channel)\n                  } else {\n                    // if there is no channel\n                    writeData.channels = [createChannel.channel]\n                  }\n                  console.log(writeData)\n                  toClose()\n                  cache.writeFragment({\n                    id: 'Team:' + teamId,\n                    fragment: gql`\n                      fragment _ on Team {\n                        channels {\n                          id\n                          name\n                          public\n                        }\n                      }\n                    `,\n                    data: writeData,\n                  })\n                },\n              })\n            }}\n          >\n            {({ isSubmitting, values, setFieldValue }) => (\n              <Form>\n                <InputField\n                  placeholder=\"channel\"\n                  channel={true}\n                  name=\"channelName\"\n                />\n                <Checkbox\n                  label=\"private\"\n                  mt={2}\n                  onChange={(e) => {\n                    console.log(e.target.checked)\n                    setFieldValue(\n                      'public',\n                      e.target.checked === true ? false : true\n                    )\n                  }}\n                  mb={2}\n                >\n                  private\n                </Checkbox>\n                {!values.public ? (\n                  <MultipleUser data={data} loading={loading} />\n                ) : null}\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                >\n                  Create Channel\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n//Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n"]},"metadata":{},"sourceType":"module"}