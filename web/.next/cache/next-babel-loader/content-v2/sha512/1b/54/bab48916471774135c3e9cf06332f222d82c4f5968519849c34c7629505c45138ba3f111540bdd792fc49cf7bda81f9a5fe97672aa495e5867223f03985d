{"ast":null,"code":"var _ctx, _ctx$req;\n\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo';\nvar httpLink = new HttpLink({\n  uri: 'http://localhost:4001/graphql',\n  credentials: 'include',\n  //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n  headers: {\n    cookie: (false ? (_ctx = ctx) === null || _ctx === void 0 ? void 0 : (_ctx$req = _ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n  }\n}); //WebSocket is a property that exists only in the browser\n\nvar wsLink = true ? new WebSocketLink({\n  uri: 'wss://localhost:4001/subscriptions',\n  options: {\n    reconnect: true\n  }\n}) : null;\nvar splitLink = true ? split(function (_ref) {\n  var query = _ref.query;\n  var definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink) : httpLink; // this should be http link becuase in server, we use http and in client we use both http and sockets\n// ctx can be undefined in ssr:false, so we need optional\n\nvar createClient = function createClient(ctx) {\n  return (// ctx for forwarding cookie in ssr\n    new ApolloClient({\n      link: splitLink,\n      //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n      cache: new InMemoryCache(),\n      ssrMode: false\n    })\n  );\n};\n\nexport var withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n//React Context provides a way to pass data through the component tree without having to pass props down manually at every level.","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","WebSocketLink","getMainDefinition","withApollo","createWithApollo","httpLink","uri","credentials","headers","cookie","ctx","req","undefined","wsLink","options","reconnect","splitLink","query","definition","kind","operation","createClient","link","cache","ssrMode"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,KAAhD,QAA6D,gBAA7D;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA;AACA,SAASC,UAAU,IAAIC,gBAAvB,QAA+C,aAA/C;AAEA,IAAMC,QAAQ,GAAG,IAAIP,QAAJ,CAAa;AAC5BQ,EAAAA,GAAG,EAAE,+BADuB;AAE5BC,EAAAA,WAAW,EAAE,SAFe;AAEJ;AACxBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EACJ,CAAC,gBAAgCC,GAAhC,qDAAgC,KAAKC,GAArC,6CAAgC,SAAUH,OAAV,CAAkBC,MAAlD,GAA2DG,SAA5D,KACA;AAHK;AAHmB,CAAb,CAAjB,C,CASA;;AACA,IAAMC,MAAM,GACV,OACI,IAAIZ,aAAJ,CAAkB;AAChBK,EAAAA,GAAG,EAAE,oCADW;AAEhBQ,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFO,CAAlB,CADJ,GAOI,IARN;AAUA,IAAMC,SAAS,GACb,OACIhB,KAAK,CACH,gBAAe;AAAA,MAAZiB,KAAY,QAAZA,KAAY;AACb,MAAMC,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPE,EAQHP,MARG,EASHR,QATG,CADT,GAYIA,QAbN,C,CAae;AAEf;;AACA,IAAMgB,YAAY,GAAG,SAAfA,YAAe,CACnBX,GADmB;AAAA,SACG;AAEtB,QAAIb,YAAJ,CAAiB;AACfyB,MAAAA,IAAI,EAAEN,SADS;AACE;AACjBO,MAAAA,KAAK,EAAE,IAAIxB,aAAJ,EAFQ;AAGfyB,MAAAA,OAAO;AAHQ,KAAjB;AAHmB;AAAA,CAArB;;AASA,OAAO,IAAMrB,UAAU,GAAGC,gBAAgB,CAACiB,YAAD,CAAnC,C,CAEP;AAEA","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4001/graphql',\n  credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n  headers: {\n    cookie:\n      (typeof window === 'undefined' ? ctx?.req?.headers.cookie : undefined) ||\n      '',\n  },\n})\n//WebSocket is a property that exists only in the browser\nconst wsLink =\n  typeof window !== 'undefined'\n    ? new WebSocketLink({\n        uri: 'wss://localhost:4001/subscriptions',\n        options: {\n          reconnect: true,\n        },\n      })\n    : null\n\nconst splitLink =\n  typeof window !== 'undefined'\n    ? split(\n        ({ query }) => {\n          const definition = getMainDefinition(query)\n          return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n          )\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (\n  ctx?: NextPageContext // ctx for forwarding cookie in ssr\n) =>\n  new ApolloClient({\n    link: splitLink, //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache(),\n    ssrMode: typeof window === 'undefined',\n  })\n\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n\n//React Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n"]},"metadata":{},"sourceType":"module"}