{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport cookieCutter from 'cookie-cutter';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nexport function useClient(userId) {} // ctx can be undefined in ssr:false, so we need optional\n\nconst createClient = ctx => // ctx for forwarding cookie in ssr\n{\n  var _ctx$req, _ctx$req6;\n\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include',\n    //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    }\n  });\n  const subscriptionClient = useRef(null); // remebers state without re-render.useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue)\n\n  if (false) {\n    var _ctx$req3;\n\n    useEffect(() => {\n      var _ctx$req2;\n\n      if (ctx !== null && ctx !== void 0 && (_ctx$req2 = ctx.req) !== null && _ctx$req2 !== void 0 && _ctx$req2.headers.cookie) {\n        if (subscriptionClient.current) {\n          subscriptionClient.current.close(); // if the userId has changed then close the current connection and open new one\n        }\n\n        subscriptionClient.current = new SubscriptionClient('ws://localhost:4001/subscriptions', {\n          reconnect: true,\n          connectionParams: {\n            authToken: {\n              Rtoken: cookieCutter.get('refresh-token'),\n              Atoken: cookieCutter.get('access-token')\n            }\n          },\n          lazy: true\n        });\n      }\n    }, [ctx === null || ctx === void 0 ? void 0 : (_ctx$req3 = ctx.req) === null || _ctx$req3 === void 0 ? void 0 : _ctx$req3.headers.cookie]);\n  } //WebSocket is a property that exists only in the browser\n\n\n  const wsLink = false ? new WebSocketLink({\n    uri: 'ws://localhost:4001/subscriptions',\n    options: {\n      reconnect: true,\n      connectionParams: {\n        authToken: {\n          Rtoken: cookieCutter.get('refresh-token'),\n          Atoken: cookieCutter.get('access-token')\n        }\n      },\n      lazy: true\n    }\n  }) : null;\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    ssrMode: true // Disables forceFetch on the server-side (so queries are only run once)\n\n  });\n  const splitLink = useMemo(() => {\n    var _ctx$req4, _ctx$req5;\n\n    // useMemo: only recalculates a value if the elements in its dependency array change\n    const httpLink = new HttpLink({\n      uri: 'http://localhost:4001/graphql',\n      credentials: 'include',\n      //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n      headers: {\n        cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req4 = ctx.req) === null || _ctx$req4 === void 0 ? void 0 : _ctx$req4.headers.cookie : undefined) || ''\n      }\n    });\n\n    if (ctx !== null && ctx !== void 0 && (_ctx$req5 = ctx.req) !== null && _ctx$req5 !== void 0 && _ctx$req5.headers.cookie && subscriptionClient.current && false) {\n      const websocketLink = new WebSocketLink(subscriptionClient.current);\n      return split(({\n        query\n      }) => {\n        const definition = getMainDefinition(query);\n        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n      }, websocketLink, httpLink);\n    }\n\n    return httpLink;\n  }, [ctx === null || ctx === void 0 ? void 0 : (_ctx$req6 = ctx.req) === null || _ctx$req6 === void 0 ? void 0 : _ctx$req6.headers.cookie]);\n  useEffect(() => {\n    client.setLink(splitLink);\n  }, [splitLink]);\n  return client;\n};\n\nexport const withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","WebSocketLink","getMainDefinition","cookieCutter","withApollo","createWithApollo","useEffect","useMemo","useRef","SubscriptionClient","useClient","userId","createClient","ctx","httpLink","uri","credentials","headers","cookie","req","undefined","subscriptionClient","current","close","reconnect","connectionParams","authToken","Rtoken","get","Atoken","lazy","wsLink","options","client","cache","ssrMode","splitLink","websocketLink","query","definition","kind","operation","setLink"],"mappings":"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","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport cookieCutter from 'cookie-cutter'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\n\nexport function useClient(userId: string) {}\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (\n  ctx?: NextPageContext // ctx for forwarding cookie in ssr\n) => {\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie:\n        (typeof window === 'undefined'\n          ? ctx?.req?.headers.cookie\n          : undefined) || '',\n    },\n  })\n  const subscriptionClient = useRef<SubscriptionClient>(null) // remebers state without re-render.useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue)\n  if (typeof window !== 'undefined') {\n    useEffect(() => {\n      if (ctx?.req?.headers.cookie) {\n        if (subscriptionClient.current) {\n          subscriptionClient.current.close() // if the userId has changed then close the current connection and open new one\n        }\n        subscriptionClient.current = new SubscriptionClient(\n          'ws://localhost:4001/subscriptions',\n          {\n            reconnect: true,\n            connectionParams: {\n              authToken: {\n                Rtoken: cookieCutter.get('refresh-token'),\n                Atoken: cookieCutter.get('access-token'),\n              },\n            },\n            lazy: true,\n          }\n        )\n      }\n    }, [ctx?.req?.headers.cookie])\n  }\n  //WebSocket is a property that exists only in the browser\n  const wsLink =\n    typeof window !== 'undefined'\n      ? new WebSocketLink({\n          uri: 'ws://localhost:4001/subscriptions',\n          options: {\n            reconnect: true,\n            connectionParams: {\n              authToken: {\n                Rtoken: cookieCutter.get('refresh-token'),\n                Atoken: cookieCutter.get('access-token'),\n              },\n            },\n            lazy: true,\n          },\n        })\n      : null\n\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server-side (so queries are only run once)\n  })\n\n  const splitLink = useMemo(() => {\n    // useMemo: only recalculates a value if the elements in its dependency array change\n    const httpLink = new HttpLink({\n      uri: 'http://localhost:4001/graphql',\n      credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n      headers: {\n        cookie:\n          (typeof window === 'undefined'\n            ? ctx?.req?.headers.cookie\n            : undefined) || '',\n      },\n    })\n\n    if (\n      ctx?.req?.headers.cookie &&\n      subscriptionClient.current &&\n      typeof window !== 'undefined'\n    ) {\n      const websocketLink = new WebSocketLink(subscriptionClient.current)\n\n      return split(\n        ({ query }) => {\n          const definition = getMainDefinition(query)\n          return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n          )\n        },\n        websocketLink,\n        httpLink\n      )\n    }\n\n    return httpLink\n  }, [ctx?.req?.headers.cookie])\n\n  useEffect(() => {\n    client.setLink(splitLink)\n  }, [splitLink])\n\n  return client\n}\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n"]},"metadata":{},"sourceType":"module"}