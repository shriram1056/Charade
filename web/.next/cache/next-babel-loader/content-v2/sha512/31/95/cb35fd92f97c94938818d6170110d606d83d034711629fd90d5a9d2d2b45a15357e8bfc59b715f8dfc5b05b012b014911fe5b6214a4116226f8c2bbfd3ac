{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as Apollo from '@apollo/client';\nimport { gql } from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const FragmentErrorFragmentDoc = gql`\n  fragment FragmentError on FieldError {\n    field\n    message\n  }\n`;\nexport const FragmentTeamFragmentDoc = gql`\n  fragment FragmentTeam on Team {\n    name\n  }\n`;\nexport const FragmentTeamResponseFragmentDoc = gql`\n  fragment FragmentTeamResponse on TeamResponse {\n    errors {\n      ...FragmentError\n    }\n    team {\n      ...FragmentTeam\n    }\n  }\n  ${FragmentErrorFragmentDoc}\n  ${FragmentTeamFragmentDoc}\n`;\nexport const FragmentUserFragmentDoc = gql`\n  fragment FragmentUser on Users {\n    id\n    username\n  }\n`;\nexport const FragmentUserResponseFragmentDoc = gql`\n  fragment FragmentUserResponse on UserResponse {\n    errors {\n      ...FragmentError\n    }\n    user {\n      ...FragmentUser\n    }\n  }\n  ${FragmentErrorFragmentDoc}\n  ${FragmentUserFragmentDoc}\n`;\nexport const AddTeamMemberDocument = gql`\n  mutation AddTeamMember($teamId: Int!, $email: String!) {\n    addTeamMember(teamId: $teamId, email: $email) {\n      errors {\n        field\n        message\n      }\n      users {\n        id\n        username\n        email\n      }\n    }\n  }\n`;\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useAddTeamMemberMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(AddTeamMemberDocument, options);\n}\nexport const CreateChannelDocument = gql`\n  mutation CreateChannel($teamId: Int!, $name: String!) {\n    createChannel(teamId: $teamId, name: $name) {\n      channel {\n        id\n        name\n        public\n      }\n      errors {\n        ...FragmentError\n      }\n    }\n  }\n  ${FragmentErrorFragmentDoc}\n`;\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateChannelMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateChannelDocument, options);\n}\nexport const CreateDirectMessageDocument = gql`\n  mutation CreateDirectMessage(\n    $text: String!\n    $receiverId: Int!\n    $teamId: Int!\n  ) {\n    createDirectMessages(text: $text, receiverId: $receiverId, teamId: $teamId)\n  }\n`;\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useCreateDirectMessageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateDirectMessageDocument, options);\n}\nexport const CreateMessageDocument = gql`\n  mutation createMessage($channelId: Int!, $text: String!) {\n    createMessage(channelId: $channelId, text: $text) {\n      id\n      text\n    }\n  }\n`;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateMessageDocument, options);\n}\nexport const CreateTeamDocument = gql`\n  mutation CreateTeam($name: String!) {\n    createTeam(name: $name) {\n      ...FragmentTeamResponse\n    }\n  }\n  ${FragmentTeamResponseFragmentDoc}\n`;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTeamDocument, options);\n}\nexport const CreateUserDocument = gql`\n  mutation createUser($options: UserCredentials!) {\n    createUser(options: $options) {\n      ...FragmentUserResponse\n    }\n  }\n  ${FragmentUserResponseFragmentDoc}\n`;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateUserDocument, options);\n}\nexport const LoginDocument = gql`\n  mutation Login($password: String!, $email: String!) {\n    Login(password: $password, email: $email) {\n      ...FragmentUserResponse\n    }\n  }\n  ${FragmentUserResponseFragmentDoc}\n`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport const MessagesDocument = gql`\n  query Messages($channelId: Int!) {\n    Messages(channelId: $channelId) {\n      id\n      text\n      user {\n        username\n      }\n      createdAt\n    }\n  }\n`;\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useMessagesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MessagesDocument, options);\n}\nexport function useMessagesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MessagesDocument, options);\n}\nexport const AllUserDocument = gql`\n  query allUser {\n    allUser {\n      id\n      email\n    }\n  }\n`;\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllUserDocument, options);\n}\nexport function useAllUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllUserDocument, options);\n}\nexport const DirectMessageDocument = gql`\n  query DirectMessage($receiverId: Int!, $teamId: Int!) {\n    DirectMessages(receiverId: $receiverId, teamId: $teamId) {\n      id\n      text\n      createdAt\n      sender {\n        username\n      }\n    }\n  }\n`;\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nexport function useDirectMessageQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(DirectMessageDocument, options);\n}\nexport function useDirectMessageLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(DirectMessageDocument, options);\n}\nexport const GetTeamMembersDocument = gql`\n  query GetTeamMembers($teamId: Int!) {\n    getTeamMembers(teamId: $teamId) {\n      id\n      username\n      email\n    }\n  }\n`;\n/**\n * __useGetTeamMembersQuery__\n *\n * To run a query within a React component, call `useGetTeamMembersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTeamMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTeamMembersQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nexport function useGetTeamMembersQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetTeamMembersDocument, options);\n}\nexport function useGetTeamMembersLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetTeamMembersDocument, options);\n}\nexport const GetUserDocument = gql`\n  query getUser {\n    getUser {\n      id\n      username\n      team {\n        id\n        name\n        admin\n        directMessageUsers {\n          id\n          username\n        }\n        channels {\n          id\n          name\n          public\n        }\n      }\n    }\n  }\n`;\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGetUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetUserDocument, options);\n}\nexport function useGetUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetUserDocument, options);\n}\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n    }\n  }\n`;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const NewChannelMessageDocument = gql`\n  subscription NewChannelMessage($channelId: Int!) {\n    newChannelMessage(channelId: $channelId) {\n      id\n      text\n      user {\n        username\n      }\n      createdAt\n    }\n  }\n`;\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useNewChannelMessageSubscription(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useSubscription(NewChannelMessageDocument, options);\n}","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/generated/graphql.tsx"],"names":["Apollo","gql","defaultOptions","FragmentErrorFragmentDoc","FragmentTeamFragmentDoc","FragmentTeamResponseFragmentDoc","FragmentUserFragmentDoc","FragmentUserResponseFragmentDoc","AddTeamMemberDocument","useAddTeamMemberMutation","baseOptions","options","useMutation","CreateChannelDocument","useCreateChannelMutation","CreateDirectMessageDocument","useCreateDirectMessageMutation","CreateMessageDocument","useCreateMessageMutation","CreateTeamDocument","useCreateTeamMutation","CreateUserDocument","useCreateUserMutation","LoginDocument","useLoginMutation","MessagesDocument","useMessagesQuery","useQuery","useMessagesLazyQuery","useLazyQuery","AllUserDocument","useAllUserQuery","useAllUserLazyQuery","DirectMessageDocument","useDirectMessageQuery","useDirectMessageLazyQuery","GetTeamMembersDocument","useGetTeamMembersQuery","useGetTeamMembersLazyQuery","GetUserDocument","useGetUserQuery","useGetUserLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","NewChannelMessageDocument","useNewChannelMessageSubscription","useSubscription"],"mappings":";;;;;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,gBAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AASA,MAAMC,cAAc,GAAG,EAAvB;AACA;;AAqWA,OAAO,MAAMC,wBAAwB,GAAGF,GAAI;AAC5C;AACA;AACA;AACA;AACA,CALO;AAMP,OAAO,MAAMG,uBAAuB,GAAGH,GAAI;AAC3C;AACA;AACA;AACA,CAJO;AAKP,OAAO,MAAMI,+BAA+B,GAAGJ,GAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,wBAAyB;AAC7B,IAAIC,uBAAwB;AAC5B,CAXO;AAYP,OAAO,MAAME,uBAAuB,GAAGL,GAAI;AAC3C;AACA;AACA;AACA;AACA,CALO;AAMP,OAAO,MAAMM,+BAA+B,GAAGN,GAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,wBAAyB;AAC7B,IAAIG,uBAAwB;AAC5B,CAXO;AAYP,OAAO,MAAME,qBAAqB,GAAGP,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,wBAAT,CACLC,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CAGLJ,qBAHK,EAGkBG,OAHlB,CAAP;AAID;AASD,OAAO,MAAME,qBAAqB,GAAGZ,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,wBAAyB;AAC7B,CAdO;;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,wBAAT,CACLJ,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CAGLC,qBAHK,EAGkBF,OAHlB,CAAP;AAID;AASD,OAAO,MAAMI,2BAA2B,GAAGd,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,8BAAT,CACLN,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CAGLG,2BAHK,EAGwBJ,OAHxB,CAAP;AAID;AASD,OAAO,MAAMM,qBAAqB,GAAGhB,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,wBAAT,CACLR,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CAGLK,qBAHK,EAGkBN,OAHlB,CAAP;AAID;AASD,OAAO,MAAMQ,kBAAkB,GAAGlB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA,IAAII,+BAAgC;AACpC,CAPO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,qBAAT,CACLV,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CACLO,kBADK,EAELR,OAFK,CAAP;AAID;AASD,OAAO,MAAMU,kBAAkB,GAAGpB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA,IAAIM,+BAAgC;AACpC,CAPO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,qBAAT,CACLZ,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CACLS,kBADK,EAELV,OAFK,CAAP;AAID;AASD,OAAO,MAAMY,aAAa,GAAGtB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,IAAIM,+BAAgC;AACpC,CAPO;;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,gBAAT,CACLd,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAACY,WAAP,CACLW,aADK,EAELZ,OAFK,CAAP;AAID;AAOD,OAAO,MAAMc,gBAAgB,GAAGxB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyB,gBAAT,CACLhB,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC2B,QAAP,CACLF,gBADK,EAELd,OAFK,CAAP;AAID;AACD,OAAO,SAASiB,oBAAT,CACLlB,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC6B,YAAP,CACLJ,gBADK,EAELd,OAFK,CAAP;AAID;AASD,OAAO,MAAMmB,eAAe,GAAG7B,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8B,eAAT,CACLrB,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC2B,QAAP,CACLG,eADK,EAELnB,OAFK,CAAP;AAID;AACD,OAAO,SAASqB,mBAAT,CACLtB,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC6B,YAAP,CACLC,eADK,EAELnB,OAFK,CAAP;AAID;AAOD,OAAO,MAAMsB,qBAAqB,GAAGhC,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiC,qBAAT,CACLxB,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC2B,QAAP,CACLM,qBADK,EAELtB,OAFK,CAAP;AAID;AACD,OAAO,SAASwB,yBAAT,CACLzB,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC6B,YAAP,CACLI,qBADK,EAELtB,OAFK,CAAP;AAID;AAWD,OAAO,MAAMyB,sBAAsB,GAAGnC,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoC,sBAAT,CACL3B,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC2B,QAAP,CACLS,sBADK,EAELzB,OAFK,CAAP;AAID;AACD,OAAO,SAAS2B,0BAAT,CACL5B,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC6B,YAAP,CACLO,sBADK,EAELzB,OAFK,CAAP;AAID;AAWD,OAAO,MAAM4B,eAAe,GAAGtC,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuC,eAAT,CACL9B,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC2B,QAAP,CACLY,eADK,EAEL5B,OAFK,CAAP;AAID;AACD,OAAO,SAAS8B,mBAAT,CACL/B,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC6B,YAAP,CACLU,eADK,EAEL5B,OAFK,CAAP;AAID;AAOD,OAAO,MAAM+B,UAAU,GAAGzC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,CANO;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS0C,UAAT,CACLjC,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC2B,QAAP,CAA2Ce,UAA3C,EAAuD/B,OAAvD,CAAP;AACD;AACD,OAAO,SAASiC,cAAT,CACLlC,WADK,EAEL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC6B,YAAP,CAA+Ca,UAA/C,EAA2D/B,OAA3D,CAAP;AACD;AAID,OAAO,MAAMkC,yBAAyB,GAAG5C,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6C,gCAAT,CACLpC,WADK,EAKL;AACA,QAAMC,OAAO,mCAAQT,cAAR,GAA2BQ,WAA3B,CAAb;;AACA,SAAOV,MAAM,CAAC+C,eAAP,CAGLF,yBAHK,EAGsBlC,OAHtB,CAAP;AAID","sourcesContent":["import * as Apollo from '@apollo/client'\nimport { gql } from '@apollo/client'\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K]\n}\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> }\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> }\nconst defaultOptions = {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  allTeam: Array<Team>\n  DirectMessages: Array<DirectMessage>\n  getTeamMembers: Array<Users>\n  Messages: Array<Message>\n  allUser: Array<Users>\n  getUser?: Maybe<Users>\n  me?: Maybe<Users>\n}\n\nexport type QueryDirectMessagesArgs = {\n  receiverId: Scalars['Int']\n  teamId: Scalars['Int']\n}\n\nexport type QueryGetTeamMembersArgs = {\n  teamId: Scalars['Int']\n}\n\nexport type QueryMessagesArgs = {\n  channelId: Scalars['Int']\n}\n\nexport type Team = {\n  __typename?: 'Team'\n  id: Scalars['Float']\n  name: Scalars['String']\n  admin: Scalars['Boolean']\n  directMessageUsers?: Maybe<Array<User>>\n  channels?: Maybe<Array<Channel>>\n}\n\nexport type User = {\n  __typename?: 'User'\n  id: Scalars['Float']\n  username: Scalars['String']\n}\n\nexport type Channel = {\n  __typename?: 'Channel'\n  id: Scalars['Float']\n  name: Scalars['String']\n  public: Scalars['Boolean']\n}\n\nexport type DirectMessage = {\n  __typename?: 'DirectMessage'\n  id: Scalars['Float']\n  text: Scalars['String']\n  createdAt: Scalars['DateTime']\n  receiverId: Scalars['Float']\n  sender: Users\n  team: Team\n}\n\nexport type Users = {\n  __typename?: 'Users'\n  id: Scalars['Float']\n  username: Scalars['String']\n  email: Scalars['String']\n  team: Array<Team>\n}\n\nexport type Message = {\n  __typename?: 'Message'\n  id: Scalars['Float']\n  text: Scalars['String']\n  user: Users\n  createdAt: Scalars['DateTime']\n  channel: Channel\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  createTeam: TeamResponse\n  addTeamMember?: Maybe<AddUserResponse>\n  createChannel: ChannelResponse\n  createDirectMessages: Scalars['Boolean']\n  createMessage: Message\n  createUser: UserResponse\n  Login: UserResponse\n}\n\nexport type MutationCreateTeamArgs = {\n  name: Scalars['String']\n}\n\nexport type MutationAddTeamMemberArgs = {\n  teamId: Scalars['Int']\n  email: Scalars['String']\n}\n\nexport type MutationCreateChannelArgs = {\n  public?: Maybe<Scalars['Boolean']>\n  teamId: Scalars['Int']\n  name: Scalars['String']\n}\n\nexport type MutationCreateDirectMessagesArgs = {\n  teamId: Scalars['Int']\n  text: Scalars['String']\n  receiverId: Scalars['Int']\n}\n\nexport type MutationCreateMessageArgs = {\n  channelId: Scalars['Int']\n  text: Scalars['String']\n}\n\nexport type MutationCreateUserArgs = {\n  options: UserCredentials\n}\n\nexport type MutationLoginArgs = {\n  password: Scalars['String']\n  email: Scalars['String']\n}\n\nexport type TeamResponse = {\n  __typename?: 'TeamResponse'\n  errors?: Maybe<FieldError>\n  team?: Maybe<Team>\n}\n\nexport type FieldError = {\n  __typename?: 'FieldError'\n  field: Scalars['String']\n  message: Scalars['String']\n}\n\nexport type AddUserResponse = {\n  __typename?: 'AddUserResponse'\n  errors?: Maybe<FieldError>\n  users?: Maybe<Users>\n}\n\nexport type ChannelResponse = {\n  __typename?: 'ChannelResponse'\n  errors?: Maybe<FieldError>\n  channel?: Maybe<Channel>\n}\n\nexport type UserResponse = {\n  __typename?: 'UserResponse'\n  errors?: Maybe<FieldError>\n  user?: Maybe<Users>\n}\n\nexport type UserCredentials = {\n  username: Scalars['String']\n  email: Scalars['String']\n  password: Scalars['String']\n}\n\nexport type Subscription = {\n  __typename?: 'Subscription'\n  newChannelMessage: Message\n}\n\nexport type SubscriptionNewChannelMessageArgs = {\n  channelId: Scalars['Int']\n}\n\nexport type FragmentErrorFragment = { __typename?: 'FieldError' } & Pick<\n  FieldError,\n  'field' | 'message'\n>\n\nexport type FragmentTeamFragment = { __typename?: 'Team' } & Pick<Team, 'name'>\n\nexport type FragmentTeamResponseFragment = { __typename?: 'TeamResponse' } & {\n  errors?: Maybe<{ __typename?: 'FieldError' } & FragmentErrorFragment>\n  team?: Maybe<{ __typename?: 'Team' } & FragmentTeamFragment>\n}\n\nexport type FragmentUserFragment = { __typename?: 'Users' } & Pick<\n  Users,\n  'id' | 'username'\n>\n\nexport type FragmentUserResponseFragment = { __typename?: 'UserResponse' } & {\n  errors?: Maybe<{ __typename?: 'FieldError' } & FragmentErrorFragment>\n  user?: Maybe<{ __typename?: 'Users' } & FragmentUserFragment>\n}\n\nexport type AddTeamMemberMutationVariables = Exact<{\n  teamId: Scalars['Int']\n  email: Scalars['String']\n}>\n\nexport type AddTeamMemberMutation = { __typename?: 'Mutation' } & {\n  addTeamMember?: Maybe<\n    { __typename?: 'AddUserResponse' } & {\n      errors?: Maybe<\n        { __typename?: 'FieldError' } & Pick<FieldError, 'field' | 'message'>\n      >\n      users?: Maybe<\n        { __typename?: 'Users' } & Pick<Users, 'id' | 'username' | 'email'>\n      >\n    }\n  >\n}\n\nexport type CreateChannelMutationVariables = Exact<{\n  teamId: Scalars['Int']\n  name: Scalars['String']\n}>\n\nexport type CreateChannelMutation = { __typename?: 'Mutation' } & {\n  createChannel: { __typename?: 'ChannelResponse' } & {\n    channel?: Maybe<\n      { __typename?: 'Channel' } & Pick<Channel, 'id' | 'name' | 'public'>\n    >\n    errors?: Maybe<{ __typename?: 'FieldError' } & FragmentErrorFragment>\n  }\n}\n\nexport type CreateDirectMessageMutationVariables = Exact<{\n  text: Scalars['String']\n  receiverId: Scalars['Int']\n  teamId: Scalars['Int']\n}>\n\nexport type CreateDirectMessageMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'createDirectMessages'\n>\n\nexport type CreateMessageMutationVariables = Exact<{\n  channelId: Scalars['Int']\n  text: Scalars['String']\n}>\n\nexport type CreateMessageMutation = { __typename?: 'Mutation' } & {\n  createMessage: { __typename?: 'Message' } & Pick<Message, 'id' | 'text'>\n}\n\nexport type CreateTeamMutationVariables = Exact<{\n  name: Scalars['String']\n}>\n\nexport type CreateTeamMutation = { __typename?: 'Mutation' } & {\n  createTeam: { __typename?: 'TeamResponse' } & FragmentTeamResponseFragment\n}\n\nexport type CreateUserMutationVariables = Exact<{\n  options: UserCredentials\n}>\n\nexport type CreateUserMutation = { __typename?: 'Mutation' } & {\n  createUser: { __typename?: 'UserResponse' } & FragmentUserResponseFragment\n}\n\nexport type LoginMutationVariables = Exact<{\n  password: Scalars['String']\n  email: Scalars['String']\n}>\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  Login: { __typename?: 'UserResponse' } & FragmentUserResponseFragment\n}\n\nexport type MessagesQueryVariables = Exact<{\n  channelId: Scalars['Int']\n}>\n\nexport type MessagesQuery = { __typename?: 'Query' } & {\n  Messages: Array<\n    { __typename?: 'Message' } & Pick<Message, 'id' | 'text' | 'createdAt'> & {\n        user: { __typename?: 'Users' } & Pick<Users, 'username'>\n      }\n  >\n}\n\nexport type AllUserQueryVariables = Exact<{ [key: string]: never }>\n\nexport type AllUserQuery = { __typename?: 'Query' } & {\n  allUser: Array<{ __typename?: 'Users' } & Pick<Users, 'id' | 'email'>>\n}\n\nexport type DirectMessageQueryVariables = Exact<{\n  receiverId: Scalars['Int']\n  teamId: Scalars['Int']\n}>\n\nexport type DirectMessageQuery = { __typename?: 'Query' } & {\n  DirectMessages: Array<\n    { __typename?: 'DirectMessage' } & Pick<\n      DirectMessage,\n      'id' | 'text' | 'createdAt'\n    > & { sender: { __typename?: 'Users' } & Pick<Users, 'username'> }\n  >\n}\n\nexport type GetTeamMembersQueryVariables = Exact<{\n  teamId: Scalars['Int']\n}>\n\nexport type GetTeamMembersQuery = { __typename?: 'Query' } & {\n  getTeamMembers: Array<\n    { __typename?: 'Users' } & Pick<Users, 'id' | 'username' | 'email'>\n  >\n}\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never }>\n\nexport type GetUserQuery = { __typename?: 'Query' } & {\n  getUser?: Maybe<\n    { __typename?: 'Users' } & Pick<Users, 'id' | 'username'> & {\n        team: Array<\n          { __typename?: 'Team' } & Pick<Team, 'id' | 'name' | 'admin'> & {\n              directMessageUsers?: Maybe<\n                Array<{ __typename?: 'User' } & Pick<User, 'id' | 'username'>>\n              >\n              channels?: Maybe<\n                Array<\n                  { __typename?: 'Channel' } & Pick<\n                    Channel,\n                    'id' | 'name' | 'public'\n                  >\n                >\n              >\n            }\n        >\n      }\n  >\n}\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<{ __typename?: 'Users' } & Pick<Users, 'id'>>\n}\n\nexport type NewChannelMessageSubscriptionVariables = Exact<{\n  channelId: Scalars['Int']\n}>\n\nexport type NewChannelMessageSubscription = { __typename?: 'Subscription' } & {\n  newChannelMessage: { __typename?: 'Message' } & Pick<\n    Message,\n    'id' | 'text' | 'createdAt'\n  > & { user: { __typename?: 'Users' } & Pick<Users, 'username'> }\n}\n\nexport const FragmentErrorFragmentDoc = gql`\n  fragment FragmentError on FieldError {\n    field\n    message\n  }\n`\nexport const FragmentTeamFragmentDoc = gql`\n  fragment FragmentTeam on Team {\n    name\n  }\n`\nexport const FragmentTeamResponseFragmentDoc = gql`\n  fragment FragmentTeamResponse on TeamResponse {\n    errors {\n      ...FragmentError\n    }\n    team {\n      ...FragmentTeam\n    }\n  }\n  ${FragmentErrorFragmentDoc}\n  ${FragmentTeamFragmentDoc}\n`\nexport const FragmentUserFragmentDoc = gql`\n  fragment FragmentUser on Users {\n    id\n    username\n  }\n`\nexport const FragmentUserResponseFragmentDoc = gql`\n  fragment FragmentUserResponse on UserResponse {\n    errors {\n      ...FragmentError\n    }\n    user {\n      ...FragmentUser\n    }\n  }\n  ${FragmentErrorFragmentDoc}\n  ${FragmentUserFragmentDoc}\n`\nexport const AddTeamMemberDocument = gql`\n  mutation AddTeamMember($teamId: Int!, $email: String!) {\n    addTeamMember(teamId: $teamId, email: $email) {\n      errors {\n        field\n        message\n      }\n      users {\n        id\n        username\n        email\n      }\n    }\n  }\n`\nexport type AddTeamMemberMutationFn = Apollo.MutationFunction<\n  AddTeamMemberMutation,\n  AddTeamMemberMutationVariables\n>\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useAddTeamMemberMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    AddTeamMemberMutation,\n    AddTeamMemberMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    AddTeamMemberMutation,\n    AddTeamMemberMutationVariables\n  >(AddTeamMemberDocument, options)\n}\nexport type AddTeamMemberMutationHookResult = ReturnType<\n  typeof useAddTeamMemberMutation\n>\nexport type AddTeamMemberMutationResult = Apollo.MutationResult<AddTeamMemberMutation>\nexport type AddTeamMemberMutationOptions = Apollo.BaseMutationOptions<\n  AddTeamMemberMutation,\n  AddTeamMemberMutationVariables\n>\nexport const CreateChannelDocument = gql`\n  mutation CreateChannel($teamId: Int!, $name: String!) {\n    createChannel(teamId: $teamId, name: $name) {\n      channel {\n        id\n        name\n        public\n      }\n      errors {\n        ...FragmentError\n      }\n    }\n  }\n  ${FragmentErrorFragmentDoc}\n`\nexport type CreateChannelMutationFn = Apollo.MutationFunction<\n  CreateChannelMutation,\n  CreateChannelMutationVariables\n>\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateChannelMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateChannelMutation,\n    CreateChannelMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateChannelMutation,\n    CreateChannelMutationVariables\n  >(CreateChannelDocument, options)\n}\nexport type CreateChannelMutationHookResult = ReturnType<\n  typeof useCreateChannelMutation\n>\nexport type CreateChannelMutationResult = Apollo.MutationResult<CreateChannelMutation>\nexport type CreateChannelMutationOptions = Apollo.BaseMutationOptions<\n  CreateChannelMutation,\n  CreateChannelMutationVariables\n>\nexport const CreateDirectMessageDocument = gql`\n  mutation CreateDirectMessage(\n    $text: String!\n    $receiverId: Int!\n    $teamId: Int!\n  ) {\n    createDirectMessages(text: $text, receiverId: $receiverId, teamId: $teamId)\n  }\n`\nexport type CreateDirectMessageMutationFn = Apollo.MutationFunction<\n  CreateDirectMessageMutation,\n  CreateDirectMessageMutationVariables\n>\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useCreateDirectMessageMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateDirectMessageMutation,\n    CreateDirectMessageMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateDirectMessageMutation,\n    CreateDirectMessageMutationVariables\n  >(CreateDirectMessageDocument, options)\n}\nexport type CreateDirectMessageMutationHookResult = ReturnType<\n  typeof useCreateDirectMessageMutation\n>\nexport type CreateDirectMessageMutationResult = Apollo.MutationResult<CreateDirectMessageMutation>\nexport type CreateDirectMessageMutationOptions = Apollo.BaseMutationOptions<\n  CreateDirectMessageMutation,\n  CreateDirectMessageMutationVariables\n>\nexport const CreateMessageDocument = gql`\n  mutation createMessage($channelId: Int!, $text: String!) {\n    createMessage(channelId: $channelId, text: $text) {\n      id\n      text\n    }\n  }\n`\nexport type CreateMessageMutationFn = Apollo.MutationFunction<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >(CreateMessageDocument, options)\n}\nexport type CreateMessageMutationHookResult = ReturnType<\n  typeof useCreateMessageMutation\n>\nexport type CreateMessageMutationResult = Apollo.MutationResult<CreateMessageMutation>\nexport type CreateMessageMutationOptions = Apollo.BaseMutationOptions<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>\nexport const CreateTeamDocument = gql`\n  mutation CreateTeam($name: String!) {\n    createTeam(name: $name) {\n      ...FragmentTeamResponse\n    }\n  }\n  ${FragmentTeamResponseFragmentDoc}\n`\nexport type CreateTeamMutationFn = Apollo.MutationFunction<\n  CreateTeamMutation,\n  CreateTeamMutationVariables\n>\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateTeamMutation,\n    CreateTeamMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<CreateTeamMutation, CreateTeamMutationVariables>(\n    CreateTeamDocument,\n    options\n  )\n}\nexport type CreateTeamMutationHookResult = ReturnType<\n  typeof useCreateTeamMutation\n>\nexport type CreateTeamMutationResult = Apollo.MutationResult<CreateTeamMutation>\nexport type CreateTeamMutationOptions = Apollo.BaseMutationOptions<\n  CreateTeamMutation,\n  CreateTeamMutationVariables\n>\nexport const CreateUserDocument = gql`\n  mutation createUser($options: UserCredentials!) {\n    createUser(options: $options) {\n      ...FragmentUserResponse\n    }\n  }\n  ${FragmentUserResponseFragmentDoc}\n`\nexport type CreateUserMutationFn = Apollo.MutationFunction<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateUserMutation,\n    CreateUserMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(\n    CreateUserDocument,\n    options\n  )\n}\nexport type CreateUserMutationHookResult = ReturnType<\n  typeof useCreateUserMutation\n>\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>\nexport const LoginDocument = gql`\n  mutation Login($password: String!, $email: String!) {\n    Login(password: $password, email: $email) {\n      ...FragmentUserResponse\n    }\n  }\n  ${FragmentUserResponseFragmentDoc}\n`\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    options\n  )\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>\nexport const MessagesDocument = gql`\n  query Messages($channelId: Int!) {\n    Messages(channelId: $channelId) {\n      id\n      text\n      user {\n        username\n      }\n      createdAt\n    }\n  }\n`\n\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useMessagesQuery(\n  baseOptions: Apollo.QueryHookOptions<MessagesQuery, MessagesQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    options\n  )\n}\nexport function useMessagesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesQuery,\n    MessagesQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    options\n  )\n}\nexport type MessagesQueryHookResult = ReturnType<typeof useMessagesQuery>\nexport type MessagesLazyQueryHookResult = ReturnType<\n  typeof useMessagesLazyQuery\n>\nexport type MessagesQueryResult = Apollo.QueryResult<\n  MessagesQuery,\n  MessagesQueryVariables\n>\nexport const AllUserDocument = gql`\n  query allUser {\n    allUser {\n      id\n      email\n    }\n  }\n`\n\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllUserQuery(\n  baseOptions?: Apollo.QueryHookOptions<AllUserQuery, AllUserQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<AllUserQuery, AllUserQueryVariables>(\n    AllUserDocument,\n    options\n  )\n}\nexport function useAllUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AllUserQuery, AllUserQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<AllUserQuery, AllUserQueryVariables>(\n    AllUserDocument,\n    options\n  )\n}\nexport type AllUserQueryHookResult = ReturnType<typeof useAllUserQuery>\nexport type AllUserLazyQueryHookResult = ReturnType<typeof useAllUserLazyQuery>\nexport type AllUserQueryResult = Apollo.QueryResult<\n  AllUserQuery,\n  AllUserQueryVariables\n>\nexport const DirectMessageDocument = gql`\n  query DirectMessage($receiverId: Int!, $teamId: Int!) {\n    DirectMessages(receiverId: $receiverId, teamId: $teamId) {\n      id\n      text\n      createdAt\n      sender {\n        username\n      }\n    }\n  }\n`\n\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useDirectMessageQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    DirectMessageQuery,\n    DirectMessageQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<DirectMessageQuery, DirectMessageQueryVariables>(\n    DirectMessageDocument,\n    options\n  )\n}\nexport function useDirectMessageLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    DirectMessageQuery,\n    DirectMessageQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<DirectMessageQuery, DirectMessageQueryVariables>(\n    DirectMessageDocument,\n    options\n  )\n}\nexport type DirectMessageQueryHookResult = ReturnType<\n  typeof useDirectMessageQuery\n>\nexport type DirectMessageLazyQueryHookResult = ReturnType<\n  typeof useDirectMessageLazyQuery\n>\nexport type DirectMessageQueryResult = Apollo.QueryResult<\n  DirectMessageQuery,\n  DirectMessageQueryVariables\n>\nexport const GetTeamMembersDocument = gql`\n  query GetTeamMembers($teamId: Int!) {\n    getTeamMembers(teamId: $teamId) {\n      id\n      username\n      email\n    }\n  }\n`\n\n/**\n * __useGetTeamMembersQuery__\n *\n * To run a query within a React component, call `useGetTeamMembersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTeamMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTeamMembersQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useGetTeamMembersQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    GetTeamMembersQuery,\n    GetTeamMembersQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetTeamMembersQuery, GetTeamMembersQueryVariables>(\n    GetTeamMembersDocument,\n    options\n  )\n}\nexport function useGetTeamMembersLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetTeamMembersQuery,\n    GetTeamMembersQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetTeamMembersQuery, GetTeamMembersQueryVariables>(\n    GetTeamMembersDocument,\n    options\n  )\n}\nexport type GetTeamMembersQueryHookResult = ReturnType<\n  typeof useGetTeamMembersQuery\n>\nexport type GetTeamMembersLazyQueryHookResult = ReturnType<\n  typeof useGetTeamMembersLazyQuery\n>\nexport type GetTeamMembersQueryResult = Apollo.QueryResult<\n  GetTeamMembersQuery,\n  GetTeamMembersQueryVariables\n>\nexport const GetUserDocument = gql`\n  query getUser {\n    getUser {\n      id\n      username\n      team {\n        id\n        name\n        admin\n        directMessageUsers {\n          id\n          username\n        }\n        channels {\n          id\n          name\n          public\n        }\n      }\n    }\n  }\n`\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(\n    GetUserDocument,\n    options\n  )\n}\nexport function useGetUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(\n    GetUserDocument,\n    options\n  )\n}\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>\nexport type GetUserQueryResult = Apollo.QueryResult<\n  GetUserQuery,\n  GetUserQueryVariables\n>\nexport const MeDocument = gql`\n  query Me {\n    me {\n      id\n    }\n  }\n`\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options)\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options)\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>\nexport const NewChannelMessageDocument = gql`\n  subscription NewChannelMessage($channelId: Int!) {\n    newChannelMessage(channelId: $channelId) {\n      id\n      text\n      user {\n        username\n      }\n      createdAt\n    }\n  }\n`\n\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useNewChannelMessageSubscription(\n  baseOptions: Apollo.SubscriptionHookOptions<\n    NewChannelMessageSubscription,\n    NewChannelMessageSubscriptionVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions }\n  return Apollo.useSubscription<\n    NewChannelMessageSubscription,\n    NewChannelMessageSubscriptionVariables\n  >(NewChannelMessageDocument, options)\n}\nexport type NewChannelMessageSubscriptionHookResult = ReturnType<\n  typeof useNewChannelMessageSubscription\n>\nexport type NewChannelMessageSubscriptionResult = Apollo.SubscriptionResult<NewChannelMessageSubscription>\n"]},"metadata":{},"sourceType":"module"}