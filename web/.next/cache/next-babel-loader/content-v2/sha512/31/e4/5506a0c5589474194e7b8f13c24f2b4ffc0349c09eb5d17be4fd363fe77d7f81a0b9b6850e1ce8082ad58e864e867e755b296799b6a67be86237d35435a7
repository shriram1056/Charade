{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/view-team/[[...id]].tsx\";\n// didn't handle the case for no team\nimport { Box } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { Message } from '../../components/Messages';\nimport { SendMessage } from '../../components/SendMessage';\nimport { Sidebar } from '../../container/Sidebar';\nimport { useCreateMessageMutation, useGetUserQuery } from '../../generated/graphql';\nimport { withApollo } from '../../utils/withApollo';\n\nconst ViewTeam = () => {\n  let teamId, channelId;\n  const router = useRouter();\n\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]); // in initial render this will be undefined\n\n    channelId = parseInt(router.query.id[1]);\n  }\n\n  const {\n    data,\n    loading\n  } = useGetUserQuery({\n    fetchPolicy: 'network-only'\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(data);\n  const {\n    getUser: {\n      team: teams\n    }\n  } = data; // direct destructing of data cause error\n\n  const Idx = teamId ? teams.indexOf(teams.find(u => u.id === teamId)) : 0;\n  const Team = Idx === -1 ? teams[0] : teams[Idx]; // Idx is -1 if there is no item in allteam with the given ID.\n\n  const channelIdx = channelId ? Team.channels.indexOf(Team.channels.find(u => u.id === channelId)) : 0;\n  let Channel = channelIdx === -1 ? Team.channels[0] : Team.channels[channelIdx];\n  const [createMessage] = useCreateMessageMutation();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"grid\",\n    height: \"100vh\",\n    gridTemplateColumns: \"100px 250px 1fr\",\n    gridTemplateRows: \"auto 1fr auto\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      username: data.getUser.username,\n      Team: Team,\n      AllTeams: teams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), Channel && /*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"3\",\n      gridRow: \"1\",\n      textAlign: \"center\",\n      backgroundColor: \"#e6e6e6\",\n      children: [\"#\", Channel.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), Channel && /*#__PURE__*/_jsxDEV(Message, {\n      channelId: Channel.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }, this), Channel && /*#__PURE__*/_jsxDEV(SendMessage, {\n      name: Channel.name,\n      onSubmit: async (text) => await createMessage({\n        variables: {\n          channelId,\n          text\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(ViewTeam); // [[...test]]  collect everything after base path and turn it into an array","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/view-team/[[...id]].tsx"],"names":["Box","useRouter","React","Message","SendMessage","Sidebar","useCreateMessageMutation","useGetUserQuery","withApollo","ViewTeam","teamId","channelId","router","query","id","parseInt","data","loading","fetchPolicy","console","log","getUser","team","teams","Idx","indexOf","find","u","Team","channelIdx","channels","Channel","createMessage","username","name","text","variables","ssr"],"mappings":"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","sourcesContent":["// didn't handle the case for no team\n\nimport { Box } from '@chakra-ui/react'\nimport { useRouter } from 'next/router'\nimport React from 'react'\nimport { Message } from '../../components/Messages'\nimport { SendMessage } from '../../components/SendMessage'\nimport { Sidebar } from '../../container/Sidebar'\nimport {\n  useCreateMessageMutation,\n  useGetUserQuery,\n} from '../../generated/graphql'\nimport { withApollo } from '../../utils/withApollo'\n\nconst ViewTeam = () => {\n  let teamId, channelId\n  const router = useRouter()\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]) // in initial render this will be undefined\n    channelId = parseInt(router.query.id[1])\n  }\n\n  const { data, loading } = useGetUserQuery({ fetchPolicy: 'network-only' })\n\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  console.log(data)\n  const {\n    getUser: { team: teams },\n  } = data // direct destructing of data cause error\n\n  const Idx = teamId ? teams.indexOf(teams.find((u) => u.id === teamId)) : 0\n\n  const Team = Idx === -1 ? teams[0] : teams[Idx] // Idx is -1 if there is no item in allteam with the given ID.\n  const channelIdx = channelId\n    ? Team.channels.indexOf(Team.channels.find((u) => u.id === channelId))\n    : 0\n  let Channel = channelIdx === -1 ? Team.channels[0] : Team.channels[channelIdx]\n  const [createMessage] = useCreateMessageMutation()\n\n  return (\n    <Box\n      display=\"grid\"\n      height=\"100vh\"\n      gridTemplateColumns=\"100px 250px 1fr\"\n      gridTemplateRows=\"auto 1fr auto\"\n    >\n      <Sidebar username={data.getUser.username} Team={Team} AllTeams={teams} />\n      {Channel && (\n        <Box\n          gridColumn=\"3\"\n          gridRow=\"1\"\n          textAlign=\"center\"\n          backgroundColor=\"#e6e6e6\"\n        >\n          #{Channel.name}\n        </Box>\n      )}\n      {Channel && <Message channelId={Channel.id} />}\n      {Channel && (\n        <SendMessage\n          name={Channel.name}\n          onSubmit={async (text) =>\n            await createMessage({\n              variables: { channelId, text },\n            })\n          }\n        />\n      )}\n    </Box>\n  )\n}\nexport default withApollo({ ssr: false })(ViewTeam)\n\n// [[...test]]  collect everything after base path and turn it into an array\n"]},"metadata":{},"sourceType":"module"}