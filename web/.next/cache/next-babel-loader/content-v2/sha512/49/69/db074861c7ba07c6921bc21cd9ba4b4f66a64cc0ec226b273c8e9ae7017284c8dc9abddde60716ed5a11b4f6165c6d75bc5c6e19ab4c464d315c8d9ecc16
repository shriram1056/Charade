{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\";\nimport { Box, useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { ChannelForm } from '../components/channelForm';\nimport { InvitePeople } from '../components/InvitePeople';\nimport { Team as Teams } from '../components/team';\nimport { useMeQuery } from '../generated/graphql';\nexport const Sidebar = ({\n  AllTeams,\n  Team\n}) => {\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(); // open and close modal\n\n  const {\n    isOpen: Open,\n    onOpen: toOpen,\n    onClose: Close\n  } = useDisclosure();\n  const {\n    data,\n    loading\n  } = useMeQuery();\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  let isOwner = data.me.id === Team.ownerId;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Teams, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: AllTeams.map(t => ({\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase()\n      })) // map return a new array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Channel, {\n      onInvite: toOpen,\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: Team.name,\n      username: data.me.username,\n      channels: Team.channels,\n      teamId: Team.id,\n      users: null,\n      toOpen: onOpen,\n      isOwner: isOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChannelForm, {\n      open: isOpen,\n      toClose: onClose,\n      teamId: Team.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvitePeople, {\n      open: Open,\n      toClose: Close,\n      teamId: Team.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["Box","useDisclosure","React","Channel","ChannelForm","InvitePeople","Team","Teams","useMeQuery","Sidebar","AllTeams","isOpen","onOpen","onClose","Open","toOpen","Close","data","loading","isOwner","me","id","ownerId","map","t","name","charAt","toUpperCase","username","channels"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,aAAd,QAAmC,kBAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,oBAA9B;AACA,SAAuBC,UAAvB,QAAyC,sBAAzC;AAMA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYJ,EAAAA;AAAZ,CAAD,KAAwB;AACrE,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8BZ,aAAa,EAAjD,CADqE,CACjB;;AACpD,QAAM;AAAEU,IAAAA,MAAM,EAAEG,IAAV;AAAgBF,IAAAA,MAAM,EAAEG,MAAxB;AAAgCF,IAAAA,OAAO,EAAEG;AAAzC,MAAmDf,aAAa,EAAtE;AACA,QAAM;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBV,UAAU,EAApC;;AACA,MAAIU,OAAJ,EAAa;AACX,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAIC,OAAO,GAAGF,IAAI,CAACG,EAAL,CAAQC,EAAR,KAAef,IAAI,CAACgB,OAAlC;AACA,sBACE;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEZ,QAAQ,CAACa,GAAT,CAAcC,CAAD,KAAQ;AAC1BH,QAAAA,EAAE,EAAEG,CAAC,CAACH,EADoB;AAE1BI,QAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFoB,OAAR,CAAb,CALT,CAQO;;AARP;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,OAAD;AACE,MAAA,QAAQ,EAAEZ,MADZ;AAEE,MAAA,UAAU,EAAC,GAFb;AAGE,MAAA,OAAO,EAAC,OAHV;AAIE,MAAA,EAAE,EAAC,SAJL;AAKE,MAAA,KAAK,EAAC,SALR;AAME,MAAA,QAAQ,EAAET,IAAI,CAACmB,IANjB;AAOE,MAAA,QAAQ,EAAER,IAAI,CAACG,EAAL,CAAQQ,QAPpB;AAQE,MAAA,QAAQ,EAAEtB,IAAI,CAACuB,QARjB;AASE,MAAA,MAAM,EAAEvB,IAAI,CAACe,EATf;AAUE,MAAA,KAAK,EAAE,IAVT;AAWE,MAAA,MAAM,EAAET,MAXV;AAYE,MAAA,OAAO,EAAEO;AAZX;AAAA;AAAA;AAAA;AAAA,YAZF,eA0BE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAER,MAAnB;AAA2B,MAAA,OAAO,EAAEE,OAApC;AAA6C,MAAA,MAAM,EAAEP,IAAI,CAACe;AAA1D;AAAA;AAAA;AAAA;AAAA,YA1BF,eA2BE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEP,IAApB;AAA0B,MAAA,OAAO,EAAEE,KAAnC;AAA0C,MAAA,MAAM,EAAEV,IAAI,CAACe;AAAvD;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA,kBADF;AA+BD,CAvCM","sourcesContent":["import { Box, useDisclosure } from '@chakra-ui/react'\nimport React from 'react'\nimport { Channel } from '../components/channel'\nimport { ChannelForm } from '../components/channelForm'\nimport { InvitePeople } from '../components/InvitePeople'\nimport { Team as Teams } from '../components/team'\nimport { Team as team, useMeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  AllTeams: team[]\n  Team: team\n}\nexport const Sidebar: React.FC<SidebarProps> = ({ AllTeams, Team }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure() // open and close modal\n  const { isOpen: Open, onOpen: toOpen, onClose: Close } = useDisclosure()\n  const { data, loading } = useMeQuery()\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  let isOwner = data.me.id === Team.ownerId\n  return (\n    <>\n      <Teams\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      />\n\n      <Channel\n        onInvite={toOpen}\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={Team.name}\n        username={data.me.username}\n        channels={Team.channels}\n        teamId={Team.id}\n        users={null}\n        toOpen={onOpen}\n        isOwner={isOwner}\n      />\n      <ChannelForm open={isOpen} toClose={onClose} teamId={Team.id} />\n      <InvitePeople open={Open} toClose={Close} teamId={Team.id} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}