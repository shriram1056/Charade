{"ast":null,"code":"import _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/FileUpload.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Button, FormControl, Icon, InputGroup } from '@chakra-ui/react';\nimport { useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FiPlus } from 'react-icons/fi';\nimport { useAddPictureMutation } from '../generated/graphql';\n\nvar FileUpload = function FileUpload(props) {\n  _s();\n\n  var register = props.register,\n      accept = props.accept,\n      multiple = props.multiple,\n      children = props.children;\n  var inputRef = useRef(null);\n\n  var _ref = register,\n      _ref2 = _ref.ref,\n      rest = _objectWithoutProperties(_ref, [\"ref\"]);\n\n  var handleClick = function handleClick() {\n    var _inputRef$current;\n\n    return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();\n  };\n\n  return /*#__PURE__*/_jsxDEV(InputGroup, {\n    onClick: handleClick,\n    display: \"inline\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread(_objectSpread({\n      type: 'file',\n      multiple: multiple || false,\n      hidden: true,\n      accept: accept\n    }, rest), {}, {\n      ref: function ref(e) {\n        _ref2(e);\n\n        inputRef.current = e;\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FileUpload, \"iD9XNNsNOlNDckBemnvlLS+aHYk=\");\n\n_c = FileUpload;\nexport var File = function File() {\n  _s2();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var _useAddPictureMutatio = useAddPictureMutation(),\n      _useAddPictureMutatio2 = _slicedToArray(_useAddPictureMutatio, 1),\n      addPicture = _useAddPictureMutatio2[0];\n\n  var onSubmit = handleSubmit( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var files;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              files = Array.from(data.file_);\n              _context.next = 3;\n              return addPicture({\n                variables: {\n                  picture: files[0]\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  var validateFiles = function validateFiles(value) {\n    if (value.length < 1) {\n      return 'Files is required';\n    }\n\n    for (var _i = 0, _Array$from = Array.from(value); _i < _Array$from.length; _i++) {\n      var file = _Array$from[_i];\n      var fsMb = file.size / (1024 * 1024);\n      var MAX_FILE_SIZE = 10;\n\n      if (fsMb > MAX_FILE_SIZE) {\n        return 'Max file size 10mb';\n      }\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      style: {\n        display: 'inline'\n      },\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        isInvalid: !!errors.file_,\n        isRequired: true,\n        display: \"inline\",\n        children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n          accept: '**/*',\n          multiple: true,\n          register: register('file_', {\n            validate: validateFiles\n          }),\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            leftIcon: /*#__PURE__*/_jsxDEV(Icon, {\n              as: FiPlus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 31\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s2(File, \"/R+O4ZFE/I8kOhgtPoqdCU96O+A=\", false, function () {\n  return [useForm, useAddPictureMutation];\n});\n\n_c2 = File;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FileUpload\");\n$RefreshReg$(_c2, \"File\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/FileUpload.tsx"],"names":["Button","FormControl","Icon","InputGroup","useRef","useForm","FiPlus","useAddPictureMutation","FileUpload","props","register","accept","multiple","children","inputRef","ref","rest","handleClick","current","click","e","File","handleSubmit","errors","formState","addPicture","onSubmit","data","files","Array","from","file_","variables","picture","validateFiles","value","length","file","fsMb","size","MAX_FILE_SIZE","display","validate"],"mappings":"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","sourcesContent":["import { Button, FormControl, Icon, InputGroup } from '@chakra-ui/react'\nimport { ReactNode, useRef } from 'react'\nimport { useForm, UseFormRegisterReturn } from 'react-hook-form'\nimport { FiPlus } from 'react-icons/fi'\nimport { useAddPictureMutation } from '../generated/graphql'\n\ntype FileUploadProps = {\n  register: UseFormRegisterReturn\n  accept?: string\n  multiple?: boolean\n  children?: ReactNode\n}\n\nconst FileUpload = (props: FileUploadProps) => {\n  const { register, accept, multiple, children } = props\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const { ref, ...rest } = register as {\n    ref: (instance: HTMLInputElement | null) => void\n  }\n\n  const handleClick = () => {\n    return inputRef.current?.click()\n  }\n\n  return (\n    <InputGroup onClick={handleClick} display=\"inline\">\n      <input\n        type={'file'}\n        multiple={multiple || false}\n        hidden\n        accept={accept}\n        {...rest}\n        ref={(e) => {\n          ref(e)\n          inputRef.current = e\n        }}\n      />\n      <>{children}</>\n    </InputGroup>\n  )\n}\n\ntype FormValues = {\n  file_: FileList\n}\n\nexport const File = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormValues>()\n  const [addPicture] = useAddPictureMutation()\n  const onSubmit = handleSubmit(async (data) => {\n    let files = Array.from(data.file_)\n    await addPicture({\n      variables: {\n        picture: files[0],\n      },\n    })\n  })\n\n  const validateFiles = (value: FileList) => {\n    if (value.length < 1) {\n      return 'Files is required'\n    }\n    for (const file of Array.from(value)) {\n      const fsMb = file.size / (1024 * 1024)\n      const MAX_FILE_SIZE = 10\n      if (fsMb > MAX_FILE_SIZE) {\n        return 'Max file size 10mb'\n      }\n    }\n    return true\n  }\n\n  return (\n    <>\n      <form onSubmit={onSubmit} style={{ display: 'inline' }}>\n        <FormControl isInvalid={!!errors.file_} isRequired display=\"inline\">\n          <FileUpload\n            accept={'**/*'}\n            multiple\n            register={register('file_', { validate: validateFiles })}\n          >\n            <Button leftIcon={<Icon as={FiPlus} />} />\n          </FileUpload>\n          <button>submit</button>\n        </FormControl>\n      </form>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}