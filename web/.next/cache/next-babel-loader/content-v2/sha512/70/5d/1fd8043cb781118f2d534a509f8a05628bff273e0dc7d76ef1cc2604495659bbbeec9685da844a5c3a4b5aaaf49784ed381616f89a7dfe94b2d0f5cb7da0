{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/FileUpload.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Button, FormControl, Icon, InputGroup } from '@chakra-ui/react';\nimport { useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FiPlus } from 'react-icons/fi';\n\nconst FileUpload = props => {\n  const {\n    register,\n    accept,\n    multiple,\n    children\n  } = props;\n  const inputRef = useRef(null);\n\n  const _ref = register,\n        {\n    ref\n  } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"ref\"]);\n\n  const handleClick = () => {\n    var _inputRef$current;\n\n    return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();\n  };\n\n  return /*#__PURE__*/_jsxDEV(InputGroup, {\n    onClick: handleClick,\n    display: \"inline\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread(_objectSpread({\n      type: 'file',\n      multiple: multiple || false,\n      hidden: true,\n      accept: accept\n    }, rest), {}, {\n      ref: e => {\n        ref(e);\n        inputRef.current = e;\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\nexport const File = ({}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const onSubmit = handleSubmit(data => {\n    let files = Array.from(data.file_);\n    console.log('On Submit: ', files);\n  });\n\n  const validateFiles = value => {\n    if (value.length < 1) {\n      return 'Files is required';\n    }\n\n    for (const file of Array.from(value)) {\n      const fsMb = file.size / (1024 * 1024);\n      const MAX_FILE_SIZE = 10;\n\n      if (fsMb > MAX_FILE_SIZE) {\n        return 'Max file size 10mb';\n      }\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      style: {\n        display: 'inline'\n      },\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        isInvalid: !!errors.file_,\n        isRequired: true,\n        display: \"inline\",\n        children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n          accept: '**/*',\n          multiple: true,\n          register: register('file_', {\n            validate: validateFiles\n          }),\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            leftIcon: /*#__PURE__*/_jsxDEV(Icon, {\n              as: FiPlus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/FileUpload.tsx"],"names":["Button","FormControl","Icon","InputGroup","useRef","useForm","FiPlus","FileUpload","props","register","accept","multiple","children","inputRef","ref","rest","handleClick","current","click","e","File","handleSubmit","formState","errors","onSubmit","data","files","Array","from","file_","console","log","validateFiles","value","length","file","fsMb","size","MAX_FILE_SIZE","display","validate"],"mappings":"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","sourcesContent":["import { Button, FormControl, Icon, InputGroup } from '@chakra-ui/react'\nimport { ReactNode, useRef } from 'react'\nimport { useForm, UseFormRegisterReturn } from 'react-hook-form'\nimport { FiPlus } from 'react-icons/fi'\n\ntype FileUploadProps = {\n  register: UseFormRegisterReturn\n  accept?: string\n  multiple?: boolean\n  children?: ReactNode\n}\n\nconst FileUpload = (props: FileUploadProps) => {\n  const { register, accept, multiple, children } = props\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const { ref, ...rest } = register as {\n    ref: (instance: HTMLInputElement | null) => void\n  }\n\n  const handleClick = () => {\n    return inputRef.current?.click()\n  }\n\n  return (\n    <InputGroup onClick={handleClick} display=\"inline\">\n      <input\n        type={'file'}\n        multiple={multiple || false}\n        hidden\n        accept={accept}\n        {...rest}\n        ref={(e) => {\n          ref(e)\n          inputRef.current = e\n        }}\n      />\n      <>{children}</>\n    </InputGroup>\n  )\n}\n\ntype FormValues = {\n  file_: FileList\n}\n\ninterface UploadProps {\n  mutate: Function\n}\n\nexport const File: React.FC<{}> = ({}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormValues>()\n  const onSubmit = handleSubmit((data) => {\n    let files = Array.from(data.file_)\n    console.log('On Submit: ', files)\n  })\n\n  const validateFiles = (value: FileList) => {\n    if (value.length < 1) {\n      return 'Files is required'\n    }\n    for (const file of Array.from(value)) {\n      const fsMb = file.size / (1024 * 1024)\n      const MAX_FILE_SIZE = 10\n      if (fsMb > MAX_FILE_SIZE) {\n        return 'Max file size 10mb'\n      }\n    }\n    return true\n  }\n\n  return (\n    <>\n      <form onSubmit={onSubmit} style={{ display: 'inline' }}>\n        <FormControl isInvalid={!!errors.file_} isRequired display=\"inline\">\n          <FileUpload\n            accept={'**/*'}\n            multiple\n            register={register('file_', { validate: validateFiles })}\n          >\n            <Button leftIcon={<Icon as={FiPlus} />} />\n          </FileUpload>\n          <button>submit</button>\n        </FormControl>\n      </form>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}