{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/view-team/[[...id]].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Input } from '@chakra-ui/react';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { Message } from '../../components/Messages';\nimport { Sidebar } from '../../container/Sidebar';\nimport { useAllTeamsQuery, useMeQuery } from '../../generated/graphql';\nimport { useIsAuth } from '../../utils/useIsAuth';\nimport { withApollo } from '../../utils/withApollo';\nvar LoginPage = dynamic(_c = function _c() {\n  return import('../create-team');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../create-team')];\n    },\n    modules: ['../create-team']\n  }\n});\n_c2 = LoginPage;\n\nvar ViewTeam = function ViewTeam() {\n  _s();\n\n  var _data$AllTeams;\n\n  useIsAuth();\n  var teamId, channelId;\n  var router = useRouter();\n\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]); // in initial render this will be undefined\n\n    channelId = parseInt(router.query.id[1]);\n  }\n\n  var _useAllTeamsQuery = useAllTeamsQuery(),\n      data = _useAllTeamsQuery.data,\n      loading = _useAllTeamsQuery.loading;\n\n  var _useMeQuery = useMeQuery(),\n      user = _useMeQuery.data,\n      userLoad = _useMeQuery.loading; // useEffect(() => {\n  //   if (!data?.AllTeams?.length) {\n  //   }\n  // }, [])\n\n\n  if (true) {\n    router.push('/create-team');\n  }\n\n  if (!(data !== null && data !== void 0 && (_data$AllTeams = data.AllTeams) !== null && _data$AllTeams !== void 0 && _data$AllTeams.length)) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var Idx = teamId ? data.AllTeams.indexOf(data.AllTeams.find(function (u) {\n    return u.id === teamId;\n  })) : 0;\n  var Team = data.AllTeams[Idx];\n  var channelIdx = channelId ? Team.channels.indexOf(Team.channels.find(function (u) {\n    return u.id === channelId;\n  })) : 0;\n  var Channel = Team.channels[channelIdx];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"grid\",\n    height: \"100vh\",\n    gridTemplateColumns: \"100px 250px 1fr\",\n    gridTemplateRows: \"auto 1fr auto\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      Team: Team,\n      currentTeamId: teamId,\n      data: data,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"3\",\n      gridRow: \"1\",\n      textAlign: \"center\",\n      children: [\"#\", Channel.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Message, {\n      channelId: channelIdx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"3\",\n      gridRow: \"3\",\n      margin: \"20px\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        placeholder: \"Message \".concat(Channel.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ViewTeam, \"oRtLe5ptdgetZ+lzd0fLpf5JE7o=\", false, function () {\n  return [useIsAuth, useRouter, useAllTeamsQuery, useMeQuery];\n});\n\n_c3 = ViewTeam;\nexport default withApollo({\n  ssr: false\n})(ViewTeam); // [[...test]]  collect everything after base path and turn it into an array\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LoginPage$dynamic\");\n$RefreshReg$(_c2, \"LoginPage\");\n$RefreshReg$(_c3, \"ViewTeam\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/view-team/[[...id]].tsx"],"names":["Box","Input","dynamic","useRouter","React","Message","Sidebar","useAllTeamsQuery","useMeQuery","useIsAuth","withApollo","LoginPage","ViewTeam","teamId","channelId","router","query","id","parseInt","data","loading","user","userLoad","push","AllTeams","length","Idx","indexOf","find","u","Team","channelIdx","channels","Channel","name","ssr"],"mappings":"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","sourcesContent":["import { Box, Input } from '@chakra-ui/react'\nimport dynamic from 'next/dynamic'\nimport { useRouter } from 'next/router'\nimport React from 'react'\nimport { Message } from '../../components/Messages'\nimport { Sidebar } from '../../container/Sidebar'\nimport { useAllTeamsQuery, useMeQuery } from '../../generated/graphql'\nimport { useIsAuth } from '../../utils/useIsAuth'\nimport { withApollo } from '../../utils/withApollo'\nconst LoginPage = dynamic(() => import('../create-team'))\nconst ViewTeam = () => {\n  useIsAuth()\n  let teamId, channelId\n  const router = useRouter()\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]) // in initial render this will be undefined\n    channelId = parseInt(router.query.id[1])\n  }\n  const { data, loading } = useAllTeamsQuery()\n  const { data: user, loading: userLoad } = useMeQuery()\n\n  // useEffect(() => {\n  //   if (!data?.AllTeams?.length) {\n  //   }\n  // }, [])\n  if (typeof window !== 'undefined') {\n    router.push('/create-team')\n  }\n\n  if (!data?.AllTeams?.length) {\n    return <LoginPage />\n  }\n\n  const Idx = teamId\n    ? data.AllTeams.indexOf(data.AllTeams.find((u) => u.id === teamId))\n    : 0\n  const Team = data.AllTeams[Idx]\n  const channelIdx = channelId\n    ? Team.channels.indexOf(Team.channels.find((u) => u.id === channelId))\n    : 0\n  let Channel = Team.channels[channelIdx]\n\n  return (\n    <Box\n      display=\"grid\"\n      height=\"100vh\"\n      gridTemplateColumns=\"100px 250px 1fr\"\n      gridTemplateRows=\"auto 1fr auto\"\n    >\n      <Sidebar Team={Team} currentTeamId={teamId} data={data} user={user} />\n      <Box gridColumn=\"3\" gridRow=\"1\" textAlign=\"center\">\n        #{Channel.name}\n      </Box>\n      <Message channelId={channelIdx} />\n      <Box gridColumn=\"3\" gridRow=\"3\" margin=\"20px\">\n        <Input type=\"text\" placeholder={`Message ${Channel.name}`} />\n      </Box>\n    </Box>\n  )\n}\nexport default withApollo({ ssr: false })(ViewTeam)\n\n// [[...test]]  collect everything after base path and turn it into an array\n"]},"metadata":{},"sourceType":"module"}