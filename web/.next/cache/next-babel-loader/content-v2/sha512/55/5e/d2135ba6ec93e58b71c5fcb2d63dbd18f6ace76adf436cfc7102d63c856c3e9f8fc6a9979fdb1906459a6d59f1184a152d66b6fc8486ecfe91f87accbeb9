{"ast":null,"code":"import _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { AllTeamsDocument, useCreateChannelMutation } from '../generated/graphql';\nimport { InputField } from './InputField';\nexport var ChannelForm = function ChannelForm(_ref) {\n  _s();\n\n  var open = _ref.open,\n      toClose = _ref.toClose,\n      teamId = _ref.teamId;\n\n  var _useCreateChannelMuta = useCreateChannelMutation(),\n      _useCreateChannelMuta2 = _slicedToArray(_useCreateChannelMuta, 1),\n      createChannel = _useCreateChannelMuta2[0];\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            channelName: ''\n          },\n          onSubmit: /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n              var setErrors, response;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      setErrors = _ref2.setErrors;\n                      _context.next = 3;\n                      return createChannel({\n                        variables: {\n                          teamId: teamId,\n                          name: values.channelName\n                        },\n                        update: function update(cache, _ref4) {\n                          var createChannel = _ref4.data.createChannel;\n                          // double destructure: You can destructure and assign the default value in a single statement.\n                          // here the data is channelResponse\n                          //data is the result of query/mutation.\n                          var data = cache.readQuery({\n                            query: AllTeamsDocument\n                          });\n                          console.log(data);\n                          var teamIdx = data.AllTeams.indexOf(data.AllTeams.find(function (u) {\n                            return u.id === teamId;\n                          }));\n\n                          var writeData = _objectSpread({}, data);\n\n                          writeData.AllTeams[teamIdx].channels.push(createChannel.channel);\n                          cache.writeQuery({\n                            query: AllTeamsDocument,\n                            data: writeData\n                          });\n                        }\n                      });\n\n                    case 3:\n                      response = _context.sent;\n                      toClose();\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            return function (_x, _x2) {\n              return _ref3.apply(this, arguments);\n            };\n          }(),\n          children: function children(_ref5) {\n            var isSubmitting = _ref5.isSubmitting;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(InputField, {\n                placeholder: \"channel\",\n                channel: true,\n                name: \"channelName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                margin: \"10px auto 0 auto\",\n                display: \"block\",\n                backgroundColor: \"teal.300\",\n                isLoading: isSubmitting //     onClick={isSubmitting ? null : toClose}\n                ,\n                children: \"Create Channel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, _this);\n}; //Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n\n_s(ChannelForm, \"K3W8/If115YvjS5TXHrcUVS7Z+A=\", false, function () {\n  return [useCreateChannelMutation];\n});\n\n_c = ChannelForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelForm\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx"],"names":["Button","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","React","AllTeamsDocument","useCreateChannelMutation","InputField","ChannelForm","open","toClose","teamId","createChannel","channelName","values","setErrors","variables","name","update","cache","data","readQuery","query","console","log","teamIdx","AllTeams","indexOf","find","u","id","writeData","channels","push","channel","writeQuery","response","isSubmitting"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport React from 'react'\nimport {\n  AllTeamsDocument,\n  AllTeamsQuery,\n  useCreateChannelMutation,\n} from '../generated/graphql'\nimport { InputField } from './InputField'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\nexport const ChannelForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  const [createChannel] = useCreateChannelMutation()\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Formik\n            initialValues={{ channelName: '' }}\n            onSubmit={async (values, { setErrors }) => {\n              const response = await createChannel({\n                variables: { teamId: teamId, name: values.channelName },\n                update: (cache, { data: { createChannel } }) => {\n                  // double destructure: You can destructure and assign the default value in a single statement.\n                  // here the data is channelResponse\n                  //data is the result of query/mutation.\n                  const data = cache.readQuery<AllTeamsQuery>({\n                    query: AllTeamsDocument,\n                  })\n                  console.log(data)\n                  const teamIdx = data.AllTeams.indexOf(\n                    data.AllTeams.find((u) => u.id === teamId)\n                  )\n                  let writeData = { ...data }\n                  writeData.AllTeams[teamIdx].channels.push(\n                    createChannel.channel\n                  )\n                  cache.writeQuery<AllTeamsQuery>({\n                    query: AllTeamsDocument,\n                    data: writeData,\n                  })\n                },\n              })\n              toClose()\n            }}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <InputField\n                  placeholder=\"channel\"\n                  channel={true}\n                  name=\"channelName\"\n                />\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                  //     onClick={isSubmitting ? null : toClose}\n                >\n                  Create Channel\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n//Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n"]},"metadata":{},"sourceType":"module"}