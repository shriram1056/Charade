{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx\";\nimport { Button, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport React from 'react';\nexport const DirectMessageForm = ({\n  open,\n  toClose,\n  teamId\n}) => {\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"DirectMessage\",\n            children: \"find user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"DirectMessage\",\n            id: \"DirectMessage\",\n            type: \"text\",\n            placeholder: \"search users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          margin: \"10px auto 0 auto\",\n          display: \"block\",\n          backgroundColor: \"teal.300\" //     onClick={isSubmitting ? null : toClose}\n          ,\n          children: \"dsd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, {suppressRefError: true})}\n        >\n          <input {...getInputProps()} />\n        </div>\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n                .filter(item => !inputValue || item.value.includes(inputValue))\n                .map((item, index) => (\n                  <li\n                    {...getItemProps({\n                      key: item.value,\n                      index,\n                      item,\n                      style: {\n                        backgroundColor:\n                          highlightedIndex === index ? 'lightgray' : 'white',\n                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                      },\n                    })}\n                  >\n                    {item.value}\n                  </li>\n                ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift> */\n}","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx"],"names":["Button","FormControl","FormLabel","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","React","DirectMessageForm","open","toClose","teamId"],"mappings":";;AAAA,SACEA,MADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,gBAPF,EAQEC,YARF,EASEC,WATF,EAUEC,YAVF,QAWO,kBAXP;AAYA,OAAOC,KAAP,MAAkB,OAAlB;AAOA,OAAO,MAAMC,iBAAwC,GAAG,CAAC;AACvDC,EAAAA,IADuD;AAEvDC,EAAAA,OAFuD;AAGvDC,EAAAA;AAHuD,CAAD,KAIlD;AACJ,sBACE,QAAC,KAAD;AAAO,IAAA,OAAO,EAAED,OAAhB;AAAyB,IAAA,MAAM,EAAED,IAAjC;AAAA,4BAEE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,YAAD;AAAc,MAAA,EAAE,EAAE,CAAlB;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,SAAD;AAAA,gCACE,QAAC,WAAD;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,eADP;AAEE,YAAA,EAAE,EAAC,eAFL;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,MAAM,EAAC,kBAFT;AAGE,UAAA,OAAO,EAAC,OAHV;AAIE,UAAA,eAAe,EAAC,UAJlB,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CApCM;AAsCP;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport React from 'react'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\nexport const DirectMessageForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <FormControl>\n            <FormLabel htmlFor=\"DirectMessage\">find user</FormLabel>\n            <Input\n              name=\"DirectMessage\"\n              id=\"DirectMessage\"\n              type=\"text\"\n              placeholder=\"search users\"\n            />\n          </FormControl>\n          <Button\n            type=\"submit\"\n            margin=\"10px auto 0 auto\"\n            display=\"block\"\n            backgroundColor=\"teal.300\"\n\n            //     onClick={isSubmitting ? null : toClose}\n          >\n            dsd\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, {suppressRefError: true})}\n        >\n          <input {...getInputProps()} />\n        </div>\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n                .filter(item => !inputValue || item.value.includes(inputValue))\n                .map((item, index) => (\n                  <li\n                    {...getItemProps({\n                      key: item.value,\n                      index,\n                      item,\n                      style: {\n                        backgroundColor:\n                          highlightedIndex === index ? 'lightgray' : 'white',\n                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                      },\n                    })}\n                  >\n                    {item.value}\n                  </li>\n                ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift> */\n}\n"]},"metadata":{},"sourceType":"module"}