{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { Team } from '../components/team';\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql';\nexport var Sidebar = function Sidebar(_ref) {\n  _s();\n\n  var currentTeamId = _ref.currentTeamId;\n\n  var _useAllTeamsQuery = useAllTeamsQuery(),\n      data = _useAllTeamsQuery.data,\n      loading = _useAllTeamsQuery.loading;\n\n  var _useMeQuery = useMeQuery(),\n      user = _useMeQuery.data,\n      userLoad = _useMeQuery.loading; // run the queries first\n\n\n  if (loading) {\n    return null;\n  }\n\n  var currentTeam = data.AllTeams.find(function (u) {\n    return u.id === currentTeamId;\n  });\n\n  if (userLoad) {\n    return null;\n  }\n\n  return [/*#__PURE__*/_jsxDEV(Team, {\n    gridColumn: \"1\",\n    gridRow: \"1 / 4\",\n    bg: \"#362234\",\n    color: \"#958993\",\n    teams: data.AllTeams.map(function (t) {\n      return {\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase()\n      };\n    }) // map return a new array\n    ,\n    children: \"Teams\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, _this), /*#__PURE__*/_jsxDEV(Channel, {\n    gridColumn: \"2\",\n    gridRow: \"1 / 4\",\n    bg: \"#4e3a4c\",\n    color: \"#958993\",\n    teamName: currentTeam.name,\n    username: user.me.username,\n    channels: currentTeam.channels,\n    users: null,\n    children: \"Channels\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this)];\n};\n\n_s(Sidebar, \"uZlMlkcCEKz57S+UcubymN04iUY=\", false, function () {\n  return [useAllTeamsQuery, useMeQuery];\n});\n\n_c = Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["React","Channel","Team","useAllTeamsQuery","useMeQuery","Sidebar","currentTeamId","data","loading","user","userLoad","currentTeam","AllTeams","find","u","id","map","t","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,sBAA7C;AAKA,OAAO,IAAMC,OAA4B,GAAG,SAA/BA,OAA+B,OAAuB;AAAA;;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,0BACvCH,gBAAgB,EADuB;AAAA,MACzDI,IADyD,qBACzDA,IADyD;AAAA,MACnDC,OADmD,qBACnDA,OADmD;;AAAA,oBAEvBJ,UAAU,EAFa;AAAA,MAEnDK,IAFmD,eAEzDF,IAFyD;AAAA,MAEpCG,QAFoC,eAE7CF,OAF6C,EAEV;;;AACvD,MAAIA,OAAJ,EAAa;AACX,WAAO,IAAP;AACD;;AAED,MAAMG,WAAW,GAAGJ,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,EAAF,KAAST,aAAhB;AAAA,GAAnB,CAApB;;AACA,MAAII,QAAJ,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,SAAO,cACL,QAAC,IAAD;AACE,IAAA,UAAU,EAAC,GADb;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,IAAA,EAAE,EAAC,SAHL;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,KAAK,EAAEH,IAAI,CAACK,QAAL,CAAcI,GAAd,CAAkB,UAACC,CAAD;AAAA,aAAQ;AAC/BF,QAAAA,EAAE,EAAEE,CAAC,CAACF,EADyB;AAE/BG,QAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,OAAR;AAAA,KAAlB,CALT,CAQO;AARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADK,eAaL,QAAC,OAAD;AACE,IAAA,UAAU,EAAC,GADb;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,IAAA,EAAE,EAAC,SAHL;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,QAAQ,EAAET,WAAW,CAACO,IALxB;AAME,IAAA,QAAQ,EAAET,IAAI,CAACY,EAAL,CAAQC,QANpB;AAOE,IAAA,QAAQ,EAAEX,WAAW,CAACY,QAPxB;AAQE,IAAA,KAAK,EAAE,IART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAbK,CAAP;AA0BD,CArCM;;GAAMlB,O;UACeF,gB,EACgBC,U;;;KAF/BC,O","sourcesContent":["import React from 'react'\nimport { Channel } from '../components/channel'\nimport { Team } from '../components/team'\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: number\n}\nexport const Sidebar: React<SidebarProps> = ({ currentTeamId }) => {\n  const { data, loading } = useAllTeamsQuery()\n  const { data: user, loading: userLoad } = useMeQuery() // run the queries first\n  if (loading) {\n    return null\n  }\n\n  const currentTeam = data.AllTeams.find((u) => u.id === currentTeamId)\n  if (userLoad) {\n    return null\n  }\n  return [\n    <Team\n      gridColumn=\"1\"\n      gridRow=\"1 / 4\"\n      bg=\"#362234\"\n      color=\"#958993\"\n      teams={data.AllTeams.map((t) => ({\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase(),\n      }))} // map return a new array\n    >\n      Teams\n    </Team>,\n    <Channel\n      gridColumn=\"2\"\n      gridRow=\"1 / 4\"\n      bg=\"#4e3a4c\"\n      color=\"#958993\"\n      teamName={currentTeam.name}\n      username={user.me.username}\n      channels={currentTeam.channels}\n      users={null}\n    >\n      Channels\n    </Channel>,\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}