{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/team.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, ListItem } from '@chakra-ui/react';\nimport React from 'react';\n\nconst team = ({\n  id,\n  name\n}) => /*#__PURE__*/_jsxDEV(ListItem, {\n  children: name\n}, `team-${id}`, false, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 32\n}, this);\n\nexport const Team = (_ref) => {\n  let {\n    teams\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"teams\"]);\n\n  return /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(ListItem, {\n      children: teams.map(team)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/team.tsx"],"names":["Box","ListItem","React","team","id","name","Team","teams","props","map"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAyBC,QAAzB,QAAyC,kBAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAaA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,kBAAkB,QAAC,QAAD;AAAA,YAA8BA;AAA9B,GAAgB,QAAOD,EAAG,EAA1B;AAAA;AAAA;AAAA;AAAA,QAA/B;;AAEA,OAAO,MAAME,IAA4B,GAAG,UAAyB;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AAAA,MAAZC,KAAY;;AACnE,sBACE,QAAC,GAAD,kCAASA,KAAT;AAAA,2BACE,QAAC,QAAD;AAAA,gBAAWD,KAAK,CAACE,GAAN,CAAUN,IAAV;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CANM","sourcesContent":["import { Box, GridProps, ListItem } from '@chakra-ui/react'\nimport React from 'react'\nimport { Team as Teams } from '../generated/graphql'\n\n// interface ChannelProps extends GridProps {\n//   teamName: string\n//   channels: Channels[]\n//   users: Users[]\n//   username: string\n// }\n\ntype ChannelProps = GridProps & {\n  teams: Teams[]\n}\nconst team = ({ id, name }) => <ListItem key={`team-${id}`}>{name}</ListItem>\n\nexport const Team: React.FC<ChannelProps> = ({ teams, ...props }) => {\n  return (\n    <Box {...props}>\n      <ListItem>{teams.map(team)}</ListItem>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}