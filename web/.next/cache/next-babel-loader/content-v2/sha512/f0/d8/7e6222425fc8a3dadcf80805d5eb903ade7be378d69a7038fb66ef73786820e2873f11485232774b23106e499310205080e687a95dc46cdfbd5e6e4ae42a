{"ast":null,"code":"import _toConsumableArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageContainer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Text } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport { NewDirectMessageDocument, useDirectMessageQuery } from '../generated/graphql';\n\nvar Chats = function Chats(_ref) {\n  var message = _ref.message;\n  var url = message.url,\n      text = message.text,\n      fileType = message.fileType;\n\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 14\n      }, _this);\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return /*#__PURE__*/_jsxDEV(RenderText, {\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 14\n      }, _this);\n    } else if (fileType.startsWith('audio/')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: url,\n            type: fileType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, _this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, _this);\n};\n\n_c = Chats;\nexport var DirectMessage = function DirectMessage(_ref2) {\n  _s();\n\n  var teamId = _ref2.teamId,\n      receiverId = _ref2.receiverId;\n\n  var _useDirectMessageQuer = useDirectMessageQuery({\n    variables: {\n      receiverId: receiverId,\n      teamId: teamId\n    },\n    fetchPolicy: 'network-only'\n  }),\n      data = _useDirectMessageQuer.data,\n      loading = _useDirectMessageQuer.loading,\n      subscribeToMore = _useDirectMessageQuer.subscribeToMore,\n      fetchMore = _useDirectMessageQuer.fetchMore;\n\n  var _useState = useState(),\n      element = _useState[0],\n      setScroll = _useState[1];\n\n  useEffect(function () {\n    // this starts the subscription\n    var unsubscribe = subscribeToMore({\n      document: NewDirectMessageDocument,\n      variables: {\n        receiverId: receiverId,\n        teamId: teamId\n      },\n      updateQuery: function updateQuery(prev, _ref3) {\n        var subscriptionData = _ref3.subscriptionData;\n\n        if (!subscriptionData.data) {\n          return prev;\n        } //@ts-ignore\n\n\n        var newDirectMessage = subscriptionData.data.newDirectMessage; // prev is a data with __typename and Message\n\n        var newData = _objectSpread(_objectSpread({}, prev), {}, {\n          Messages: _objectSpread(_objectSpread({}, prev.DirectMessages), {}, {\n            Messages: [newDirectMessage].concat(_toConsumableArray(prev.DirectMessages.Messages))\n          }) //FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. DON'T FORGET TO CHANGE THE DirectMessages FIELD NAME ACCORDING TO YOUR NEEDS\n\n        });\n\n        return newData;\n      }\n    });\n\n    if (unsubscribe) {\n      return function () {\n        return unsubscribe();\n      }; // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, receiverId, teamId]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    ref: function ref(scroll) {\n      return setScroll(scroll);\n    },\n    pl: 3,\n    pt: 4,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      children: [' ', data !== null && data !== void 0 && data.DirectMessages ? data.DirectMessages.Messages.slice().reverse().map(function (u, i) {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 4,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            fontSize: \"19px\",\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            children: [u.sender.username, /*#__PURE__*/_jsxDEV(Text, {\n              ml: 2,\n              display: \"inline\",\n              fontSize: \"13px\",\n              fontFamily: \"sans-serif\",\n              color: \"#958993\",\n              children: u.createdAt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 21\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, _this), /*#__PURE__*/_jsxDEV(Chats, {\n            message: u\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, _this), i === 10 && data.DirectMessages.hasMore ? /*#__PURE__*/_jsxDEV(Waypoint, {\n            onEnter: function onEnter() {\n              console.log(i);\n              return fetchMore({\n                variables: {\n                  receiverId: receiverId,\n                  teamId: teamId,\n                  cursor: data.DirectMessages.Messages[data.DirectMessages.Messages.length - 1].createdAt\n                }\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, _this) : null]\n        }, \"directMessage-\".concat(u.id), true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, _this);\n      }) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DirectMessage, \"bt7XZsJyE5LEtCtUxTxgV2ZdOaM=\", false, function () {\n  return [useDirectMessageQuery];\n});\n\n_c2 = DirectMessage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chats\");\n$RefreshReg$(_c2, \"DirectMessage\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageContainer.tsx"],"names":["Box","Text","React","useEffect","useState","Waypoint","NewDirectMessageDocument","useDirectMessageQuery","Chats","message","url","text","fileType","startsWith","DirectMessage","teamId","receiverId","variables","fetchPolicy","data","loading","subscribeToMore","fetchMore","element","setScroll","unsubscribe","document","updateQuery","prev","subscriptionData","newDirectMessage","newData","Messages","DirectMessages","scroll","slice","reverse","map","u","i","sender","username","createdAt","hasMore","console","log","cursor","length","id"],"mappings":"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","sourcesContent":["import { Box, Text } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport { Waypoint } from 'react-waypoint'\nimport {\n  NewDirectMessageDocument,\n  useDirectMessageQuery,\n} from '../generated/graphql'\n\nconst Chats = ({ message }) => {\n  const { url, text, fileType } = message\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return <img src={url} alt=\"\" />\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return <RenderText url={url} />\n    } else if (fileType.startsWith('audio/')) {\n      return (\n        <div>\n          <audio controls>\n            <source src={url} type={fileType} />\n          </audio>\n        </div>\n      )\n    }\n  }\n  return <Box>{text}</Box>\n}\n\ninterface MessageProps {\n  teamId: number\n  receiverId: number\n}\n\nexport const DirectMessage: React.FC<MessageProps> = ({\n  teamId,\n  receiverId,\n}) => {\n  const { data, loading, subscribeToMore, fetchMore } = useDirectMessageQuery({\n    variables: {\n      receiverId,\n      teamId,\n    },\n    fetchPolicy: 'network-only',\n  })\n  const [element, setScroll] = useState<HTMLDivElement>()\n\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewDirectMessageDocument,\n      variables: { receiverId, teamId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        //@ts-ignore\n        const { newDirectMessage } = subscriptionData.data\n        // prev is a data with __typename and Message\n        let newData = {\n          ...prev,\n          Messages: {\n            ...prev.DirectMessages,\n            Messages: [newDirectMessage, ...prev.DirectMessages.Messages],\n          },\n          //FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. DON'T FORGET TO CHANGE THE DirectMessages FIELD NAME ACCORDING TO YOUR NEEDS\n        }\n        return newData\n      },\n    })\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, receiverId, teamId])\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n      ref={(scroll) => setScroll(scroll)}\n      pl={3}\n      pt={4}\n    >\n      <Box display=\"flex\" flexDirection=\"column\">\n        {' '}\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        {data?.DirectMessages\n          ? data.DirectMessages.Messages.slice()\n              .reverse()\n              .map((u, i) => (\n                <Box mb={4} key={`directMessage-${u.id}`}>\n                  <Box\n                    fontSize=\"19px\"\n                    fontFamily=\"sans-serif\"\n                    fontWeight=\"bold\"\n                  >\n                    {u.sender.username}\n                    <Text\n                      ml={2}\n                      display=\"inline\"\n                      fontSize=\"13px\"\n                      fontFamily=\"sans-serif\"\n                      color=\"#958993\"\n                    >\n                      {u.createdAt}\n                    </Text>\n                  </Box>\n                  <Chats message={u} />\n                  {i === 10 && data.DirectMessages.hasMore ? (\n                    <Waypoint\n                      onEnter={() => {\n                        console.log(i)\n                        return fetchMore({\n                          variables: {\n                            receiverId,\n                            teamId,\n                            cursor:\n                              data.DirectMessages.Messages[\n                                data.DirectMessages.Messages.length - 1\n                              ].createdAt,\n                          },\n                        })\n                      }}\n                    />\n                  ) : null}\n                </Box>\n              ))\n          : null}\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}