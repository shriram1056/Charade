{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Stack, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport { useMessagesQuery } from '../generated/graphql';\nexport var Message = function Message(_ref) {\n  _s();\n\n  var channelId = _ref.channelId;\n\n  var _useMessagesQuery = useMessagesQuery({\n    variables: {\n      channelId: channelId\n    }\n  }),\n      data = _useMessagesQuery.data,\n      loading = _useMessagesQuery.loading;\n\n  console.log(data);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      mt: 4,\n      ml: 3,\n      children: data.Messages.map(function (u) {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 4,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            fontSize: \"36px\",\n            children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n              ml: 2,\n              display: \"inline\",\n              fontFamily: \"mono\",\n              children: u.createdAt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            children: u.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, _this)]\n        }, \"message-\".concat(u.id), true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Message, \"u7TPfYI/5LwZdz4sqAWsS7txgfA=\", false, function () {\n  return [useMessagesQuery];\n});\n\n_c = Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Stack","Text","React","useMessagesQuery","Message","channelId","variables","data","loading","console","log","Messages","map","u","user","username","createdAt","text","id"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAMA,OAAO,IAAMC,OAA+B,GAAG,SAAlCA,OAAkC,OAAmB;AAAA;;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,0BACtCF,gBAAgB,CAAC;AACzCG,IAAAA,SAAS,EAAE;AAAED,MAAAA,SAAS,EAAEA;AAAb;AAD8B,GAAD,CADsB;AAAA,MACxDE,IADwD,qBACxDA,IADwD;AAAA,MAClDC,OADkD,qBAClDA,OADkD;;AAIhEC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,MAAIC,OAAJ,EAAa;AACX,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,sBACE,QAAC,GAAD;AAAK,IAAA,UAAU,EAAC,GAAhB;AAAoB,IAAA,OAAO,EAAC,GAA5B;AAAgC,IAAA,eAAe,EAAC,SAAhD;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,EAAE,EAAE,CAAX;AAAc,MAAA,EAAE,EAAE,CAAlB;AAAA,gBACGD,IAAI,CAACI,QAAL,CAAcC,GAAd,CAAkB,UAACC,CAAD;AAAA,4BACjB,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,kCACE,QAAC,GAAD;AAAK,YAAA,QAAQ,EAAC,MAAd;AAAA,uBACGA,CAAC,CAACC,IAAF,CAAOC,QADV,eAEE,QAAC,IAAD;AAAM,cAAA,EAAE,EAAE,CAAV;AAAa,cAAA,OAAO,EAAC,QAArB;AAA8B,cAAA,UAAU,EAAC,MAAzC;AAAA,wBACGF,CAAC,CAACG;AADL;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAOE,QAAC,GAAD;AAAA,sBAAMH,CAAC,CAACI;AAAR;AAAA;AAAA;AAAA;AAAA,mBAPF;AAAA,6BAA4BJ,CAAC,CAACK,EAA9B;AAAA;AAAA;AAAA;AAAA,iBADiB;AAAA,OAAlB;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAiBD,CAzBM;;GAAMd,O;UACeD,gB;;;KADfC,O","sourcesContent":["import { Box, Stack, Text } from '@chakra-ui/react'\nimport React from 'react'\nimport { useMessagesQuery } from '../generated/graphql'\n\ninterface MessageProps {\n  channelId: number\n}\n\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading } = useMessagesQuery({\n    variables: { channelId: channelId },\n  })\n  console.log(data)\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box gridColumn=\"3\" gridRow=\"2\" backgroundColor=\"#e6e6e6\">\n      <Stack mt={4} ml={3}>\n        {data.Messages.map((u) => (\n          <Box mb={4} key={`message-${u.id}`}>\n            <Box fontSize=\"36px\">\n              {u.user.username}\n              <Text ml={2} display=\"inline\" fontFamily=\"mono\">\n                {u.createdAt}\n              </Text>\n            </Box>\n            <Box>{u.text}</Box>\n          </Box>\n        ))}\n      </Stack>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}