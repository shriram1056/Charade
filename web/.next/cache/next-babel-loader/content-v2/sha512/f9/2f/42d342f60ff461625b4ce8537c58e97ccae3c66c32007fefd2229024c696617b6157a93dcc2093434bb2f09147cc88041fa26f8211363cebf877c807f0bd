{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const FragmentErrorFragmentDoc = gql`\n    fragment FragmentError on FieldError {\n  field\n  message\n}\n    `;\nexport const FragmentTeamFragmentDoc = gql`\n    fragment FragmentTeam on Team {\n  name\n}\n    `;\nexport const FragmentTeamResponseFragmentDoc = gql`\n    fragment FragmentTeamResponse on TeamResponse {\n  errors {\n    ...FragmentError\n  }\n  team {\n    ...FragmentTeam\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentTeamFragmentDoc}`;\nexport const FragmentUserFragmentDoc = gql`\n    fragment FragmentUser on Users {\n  id\n  username\n}\n    `;\nexport const FragmentUserResponseFragmentDoc = gql`\n    fragment FragmentUserResponse on UserResponse {\n  errors {\n    ...FragmentError\n  }\n  user {\n    ...FragmentUser\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentUserFragmentDoc}`;\nexport const AddTeamMemberDocument = gql`\n    mutation AddTeamMember($teamId: Int!, $email: String!) {\n  addTeamMember(teamId: $teamId, email: $email) {\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useAddTeamMemberMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(AddTeamMemberDocument, options);\n}\nexport const CreateChannelDocument = gql`\n    mutation CreateChannel($teamId: Int!, $name: String!) {\n  createChannel(teamId: $teamId, name: $name) {\n    channel {\n      id\n      name\n      public\n    }\n    errors {\n      ...FragmentError\n    }\n  }\n}\n    ${FragmentErrorFragmentDoc}`;\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateChannelMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateChannelDocument, options);\n}\nexport const CreateDirectMessageDocument = gql`\n    mutation CreateDirectMessage($text: String!, $receiverId: Int!, $teamId: Int!) {\n  createDirectMessages(text: $text, receiverId: $receiverId, teamId: $teamId)\n}\n    `;\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useCreateDirectMessageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateDirectMessageDocument, options);\n}\nexport const CreateMessageDocument = gql`\n    mutation createMessage($channelId: Int!, $text: String!) {\n  createMessage(channelId: $channelId, text: $text) {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateMessageDocument, options);\n}\nexport const CreateTeamDocument = gql`\n    mutation CreateTeam($name: String!) {\n  createTeam(name: $name) {\n    ...FragmentTeamResponse\n  }\n}\n    ${FragmentTeamResponseFragmentDoc}`;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTeamDocument, options);\n}\nexport const CreateUserDocument = gql`\n    mutation createUser($options: UserCredentials!) {\n  createUser(options: $options) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateUserDocument, options);\n}\nexport const LoginDocument = gql`\n    mutation Login($password: String!, $email: String!) {\n  Login(password: $password, email: $email) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport const MessagesDocument = gql`\n    query Messages($channelId: Int!) {\n  Messages(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useMessagesQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MessagesDocument, options);\n}\nexport function useMessagesLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MessagesDocument, options);\n}\nexport const AllUserDocument = gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllUserDocument, options);\n}\nexport function useAllUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllUserDocument, options);\n}\nexport const DirectMessageDocument = gql`\n    query DirectMessage($receiverId: Int!, $teamId: Int!) {\n  DirectMessages(receiverId: $receiverId, teamId: $teamId) {\n    id\n    text\n    createdAt\n    sender {\n      username\n    }\n  }\n}\n    `;\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nexport function useDirectMessageQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(DirectMessageDocument, options);\n}\nexport function useDirectMessageLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(DirectMessageDocument, options);\n}\nexport const GetTeamMembersDocument = gql`\n    query GetTeamMembers($teamId: Int!) {\n  getTeamMembers(teamId: $teamId) {\n    id\n    username\n    email\n  }\n}\n    `;\n/**\n * __useGetTeamMembersQuery__\n *\n * To run a query within a React component, call `useGetTeamMembersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTeamMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTeamMembersQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nexport function useGetTeamMembersQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetTeamMembersDocument, options);\n}\nexport function useGetTeamMembersLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetTeamMembersDocument, options);\n}\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    username\n    team {\n      id\n      name\n      admin\n      users {\n        id\n        username\n      }\n      channels {\n        id\n        name\n        public\n      }\n    }\n  }\n}\n    `;\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGetUserQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetUserDocument, options);\n}\nexport function useGetUserLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetUserDocument, options);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const NewChannelMessageDocument = gql`\n    subscription NewChannelMessage($channelId: Int!) {\n  newChannelMessage(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useNewChannelMessageSubscription(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useSubscription(NewChannelMessageDocument, options);\n}","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","FragmentErrorFragmentDoc","FragmentTeamFragmentDoc","FragmentTeamResponseFragmentDoc","FragmentUserFragmentDoc","FragmentUserResponseFragmentDoc","AddTeamMemberDocument","useAddTeamMemberMutation","baseOptions","options","useMutation","CreateChannelDocument","useCreateChannelMutation","CreateDirectMessageDocument","useCreateDirectMessageMutation","CreateMessageDocument","useCreateMessageMutation","CreateTeamDocument","useCreateTeamMutation","CreateUserDocument","useCreateUserMutation","LoginDocument","useLoginMutation","MessagesDocument","useMessagesQuery","useQuery","useMessagesLazyQuery","useLazyQuery","AllUserDocument","useAllUserQuery","useAllUserLazyQuery","DirectMessageDocument","useDirectMessageQuery","useDirectMessageLazyQuery","GetTeamMembersDocument","useGetTeamMembersQuery","useGetTeamMembersLazyQuery","GetUserDocument","useGetUserQuery","useGetUserLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","NewChannelMessageDocument","useNewChannelMessageSubscription","useSubscription"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  allTeam: Array<Team>;\n  DirectMessages: Array<DirectMessage>;\n  getTeamMembers: Array<Users>;\n  Messages: Array<Message>;\n  allUser: Array<Users>;\n  getUser?: Maybe<Users>;\n  me?: Maybe<Users>;\n};\n\n\nexport type QueryDirectMessagesArgs = {\n  receiverId: Scalars['Int'];\n  teamId: Scalars['Int'];\n};\n\n\nexport type QueryGetTeamMembersArgs = {\n  teamId: Scalars['Int'];\n};\n\n\nexport type QueryMessagesArgs = {\n  channelId: Scalars['Int'];\n};\n\nexport type Team = {\n  __typename?: 'Team';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  admin: Scalars['Boolean'];\n  users?: Maybe<Array<User>>;\n  channels?: Maybe<Array<Channel>>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n};\n\nexport type Channel = {\n  __typename?: 'Channel';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  public: Scalars['Boolean'];\n};\n\nexport type DirectMessage = {\n  __typename?: 'DirectMessage';\n  id: Scalars['Float'];\n  text: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  receiverId: Scalars['Float'];\n  sender: Users;\n  team: Team;\n};\n\n\nexport type Users = {\n  __typename?: 'Users';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  team: Array<Team>;\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  id: Scalars['Float'];\n  text: Scalars['String'];\n  user: Users;\n  createdAt: Scalars['DateTime'];\n  channel: Channel;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createTeam: TeamResponse;\n  addTeamMember?: Maybe<AddUserResponse>;\n  createChannel: ChannelResponse;\n  createDirectMessages: Scalars['Boolean'];\n  createMessage: Message;\n  createUser: UserResponse;\n  Login: UserResponse;\n};\n\n\nexport type MutationCreateTeamArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddTeamMemberArgs = {\n  teamId: Scalars['Int'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationCreateChannelArgs = {\n  public?: Maybe<Scalars['Boolean']>;\n  teamId: Scalars['Int'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreateDirectMessagesArgs = {\n  teamId: Scalars['Int'];\n  text: Scalars['String'];\n  receiverId: Scalars['Int'];\n};\n\n\nexport type MutationCreateMessageArgs = {\n  channelId: Scalars['Int'];\n  text: Scalars['String'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  options: UserCredentials;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type TeamResponse = {\n  __typename?: 'TeamResponse';\n  errors?: Maybe<FieldError>;\n  team?: Maybe<Team>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type AddUserResponse = {\n  __typename?: 'AddUserResponse';\n  errors?: Maybe<FieldError>;\n  users?: Maybe<Users>;\n};\n\nexport type ChannelResponse = {\n  __typename?: 'ChannelResponse';\n  errors?: Maybe<FieldError>;\n  channel?: Maybe<Channel>;\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<FieldError>;\n  user?: Maybe<Users>;\n};\n\nexport type UserCredentials = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  newChannelMessage: Message;\n};\n\n\nexport type SubscriptionNewChannelMessageArgs = {\n  channelId: Scalars['Int'];\n};\n\nexport type FragmentErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type FragmentTeamFragment = (\n  { __typename?: 'Team' }\n  & Pick<Team, 'name'>\n);\n\nexport type FragmentTeamResponseFragment = (\n  { __typename?: 'TeamResponse' }\n  & { errors?: Maybe<(\n    { __typename?: 'FieldError' }\n    & FragmentErrorFragment\n  )>, team?: Maybe<(\n    { __typename?: 'Team' }\n    & FragmentTeamFragment\n  )> }\n);\n\nexport type FragmentUserFragment = (\n  { __typename?: 'Users' }\n  & Pick<Users, 'id' | 'username'>\n);\n\nexport type FragmentUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<(\n    { __typename?: 'FieldError' }\n    & FragmentErrorFragment\n  )>, user?: Maybe<(\n    { __typename?: 'Users' }\n    & FragmentUserFragment\n  )> }\n);\n\nexport type AddTeamMemberMutationVariables = Exact<{\n  teamId: Scalars['Int'];\n  email: Scalars['String'];\n}>;\n\n\nexport type AddTeamMemberMutation = (\n  { __typename?: 'Mutation' }\n  & { addTeamMember?: Maybe<(\n    { __typename?: 'AddUserResponse' }\n    & { errors?: Maybe<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )> }\n  )> }\n);\n\nexport type CreateChannelMutationVariables = Exact<{\n  teamId: Scalars['Int'];\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateChannelMutation = (\n  { __typename?: 'Mutation' }\n  & { createChannel: (\n    { __typename?: 'ChannelResponse' }\n    & { channel?: Maybe<(\n      { __typename?: 'Channel' }\n      & Pick<Channel, 'id' | 'name' | 'public'>\n    )>, errors?: Maybe<(\n      { __typename?: 'FieldError' }\n      & FragmentErrorFragment\n    )> }\n  ) }\n);\n\nexport type CreateDirectMessageMutationVariables = Exact<{\n  text: Scalars['String'];\n  receiverId: Scalars['Int'];\n  teamId: Scalars['Int'];\n}>;\n\n\nexport type CreateDirectMessageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createDirectMessages'>\n);\n\nexport type CreateMessageMutationVariables = Exact<{\n  channelId: Scalars['Int'];\n  text: Scalars['String'];\n}>;\n\n\nexport type CreateMessageMutation = (\n  { __typename?: 'Mutation' }\n  & { createMessage: (\n    { __typename?: 'Message' }\n    & Pick<Message, 'id' | 'text'>\n  ) }\n);\n\nexport type CreateTeamMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { createTeam: (\n    { __typename?: 'TeamResponse' }\n    & FragmentTeamResponseFragment\n  ) }\n);\n\nexport type CreateUserMutationVariables = Exact<{\n  options: UserCredentials;\n}>;\n\n\nexport type CreateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { createUser: (\n    { __typename?: 'UserResponse' }\n    & FragmentUserResponseFragment\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  password: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { Login: (\n    { __typename?: 'UserResponse' }\n    & FragmentUserResponseFragment\n  ) }\n);\n\nexport type MessagesQueryVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type MessagesQuery = (\n  { __typename?: 'Query' }\n  & { Messages: Array<(\n    { __typename?: 'Message' }\n    & Pick<Message, 'id' | 'text' | 'createdAt'>\n    & { user: (\n      { __typename?: 'Users' }\n      & Pick<Users, 'username'>\n    ) }\n  )> }\n);\n\nexport type AllUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllUserQuery = (\n  { __typename?: 'Query' }\n  & { allUser: Array<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'email'>\n  )> }\n);\n\nexport type DirectMessageQueryVariables = Exact<{\n  receiverId: Scalars['Int'];\n  teamId: Scalars['Int'];\n}>;\n\n\nexport type DirectMessageQuery = (\n  { __typename?: 'Query' }\n  & { DirectMessages: Array<(\n    { __typename?: 'DirectMessage' }\n    & Pick<DirectMessage, 'id' | 'text' | 'createdAt'>\n    & { sender: (\n      { __typename?: 'Users' }\n      & Pick<Users, 'username'>\n    ) }\n  )> }\n);\n\nexport type GetTeamMembersQueryVariables = Exact<{\n  teamId: Scalars['Int'];\n}>;\n\n\nexport type GetTeamMembersQuery = (\n  { __typename?: 'Query' }\n  & { getTeamMembers: Array<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'username' | 'email'>\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'username'>\n    & { team: Array<(\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'admin'>\n      & { users?: Maybe<Array<(\n        { __typename?: 'User' }\n        & Pick<User, 'id' | 'username'>\n      )>>, channels?: Maybe<Array<(\n        { __typename?: 'Channel' }\n        & Pick<Channel, 'id' | 'name' | 'public'>\n      )>> }\n    )> }\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id'>\n  )> }\n);\n\nexport type NewChannelMessageSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type NewChannelMessageSubscription = (\n  { __typename?: 'Subscription' }\n  & { newChannelMessage: (\n    { __typename?: 'Message' }\n    & Pick<Message, 'id' | 'text' | 'createdAt'>\n    & { user: (\n      { __typename?: 'Users' }\n      & Pick<Users, 'username'>\n    ) }\n  ) }\n);\n\nexport const FragmentErrorFragmentDoc = gql`\n    fragment FragmentError on FieldError {\n  field\n  message\n}\n    `;\nexport const FragmentTeamFragmentDoc = gql`\n    fragment FragmentTeam on Team {\n  name\n}\n    `;\nexport const FragmentTeamResponseFragmentDoc = gql`\n    fragment FragmentTeamResponse on TeamResponse {\n  errors {\n    ...FragmentError\n  }\n  team {\n    ...FragmentTeam\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentTeamFragmentDoc}`;\nexport const FragmentUserFragmentDoc = gql`\n    fragment FragmentUser on Users {\n  id\n  username\n}\n    `;\nexport const FragmentUserResponseFragmentDoc = gql`\n    fragment FragmentUserResponse on UserResponse {\n  errors {\n    ...FragmentError\n  }\n  user {\n    ...FragmentUser\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentUserFragmentDoc}`;\nexport const AddTeamMemberDocument = gql`\n    mutation AddTeamMember($teamId: Int!, $email: String!) {\n  addTeamMember(teamId: $teamId, email: $email) {\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\nexport type AddTeamMemberMutationFn = Apollo.MutationFunction<AddTeamMemberMutation, AddTeamMemberMutationVariables>;\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useAddTeamMemberMutation(baseOptions?: Apollo.MutationHookOptions<AddTeamMemberMutation, AddTeamMemberMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddTeamMemberMutation, AddTeamMemberMutationVariables>(AddTeamMemberDocument, options);\n      }\nexport type AddTeamMemberMutationHookResult = ReturnType<typeof useAddTeamMemberMutation>;\nexport type AddTeamMemberMutationResult = Apollo.MutationResult<AddTeamMemberMutation>;\nexport type AddTeamMemberMutationOptions = Apollo.BaseMutationOptions<AddTeamMemberMutation, AddTeamMemberMutationVariables>;\nexport const CreateChannelDocument = gql`\n    mutation CreateChannel($teamId: Int!, $name: String!) {\n  createChannel(teamId: $teamId, name: $name) {\n    channel {\n      id\n      name\n      public\n    }\n    errors {\n      ...FragmentError\n    }\n  }\n}\n    ${FragmentErrorFragmentDoc}`;\nexport type CreateChannelMutationFn = Apollo.MutationFunction<CreateChannelMutation, CreateChannelMutationVariables>;\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateChannelMutation(baseOptions?: Apollo.MutationHookOptions<CreateChannelMutation, CreateChannelMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateChannelMutation, CreateChannelMutationVariables>(CreateChannelDocument, options);\n      }\nexport type CreateChannelMutationHookResult = ReturnType<typeof useCreateChannelMutation>;\nexport type CreateChannelMutationResult = Apollo.MutationResult<CreateChannelMutation>;\nexport type CreateChannelMutationOptions = Apollo.BaseMutationOptions<CreateChannelMutation, CreateChannelMutationVariables>;\nexport const CreateDirectMessageDocument = gql`\n    mutation CreateDirectMessage($text: String!, $receiverId: Int!, $teamId: Int!) {\n  createDirectMessages(text: $text, receiverId: $receiverId, teamId: $teamId)\n}\n    `;\nexport type CreateDirectMessageMutationFn = Apollo.MutationFunction<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>;\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useCreateDirectMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>(CreateDirectMessageDocument, options);\n      }\nexport type CreateDirectMessageMutationHookResult = ReturnType<typeof useCreateDirectMessageMutation>;\nexport type CreateDirectMessageMutationResult = Apollo.MutationResult<CreateDirectMessageMutation>;\nexport type CreateDirectMessageMutationOptions = Apollo.BaseMutationOptions<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>;\nexport const CreateMessageDocument = gql`\n    mutation createMessage($channelId: Int!, $text: String!) {\n  createMessage(channelId: $channelId, text: $text) {\n    id\n    text\n  }\n}\n    `;\nexport type CreateMessageMutationFn = Apollo.MutationFunction<CreateMessageMutation, CreateMessageMutationVariables>;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateMessageMutation, CreateMessageMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateMessageMutation, CreateMessageMutationVariables>(CreateMessageDocument, options);\n      }\nexport type CreateMessageMutationHookResult = ReturnType<typeof useCreateMessageMutation>;\nexport type CreateMessageMutationResult = Apollo.MutationResult<CreateMessageMutation>;\nexport type CreateMessageMutationOptions = Apollo.BaseMutationOptions<CreateMessageMutation, CreateMessageMutationVariables>;\nexport const CreateTeamDocument = gql`\n    mutation CreateTeam($name: String!) {\n  createTeam(name: $name) {\n    ...FragmentTeamResponse\n  }\n}\n    ${FragmentTeamResponseFragmentDoc}`;\nexport type CreateTeamMutationFn = Apollo.MutationFunction<CreateTeamMutation, CreateTeamMutationVariables>;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions?: Apollo.MutationHookOptions<CreateTeamMutation, CreateTeamMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateTeamMutation, CreateTeamMutationVariables>(CreateTeamDocument, options);\n      }\nexport type CreateTeamMutationHookResult = ReturnType<typeof useCreateTeamMutation>;\nexport type CreateTeamMutationResult = Apollo.MutationResult<CreateTeamMutation>;\nexport type CreateTeamMutationOptions = Apollo.BaseMutationOptions<CreateTeamMutation, CreateTeamMutationVariables>;\nexport const CreateUserDocument = gql`\n    mutation createUser($options: UserCredentials!) {\n  createUser(options: $options) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);\n      }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($password: String!, $email: String!) {\n  Login(password: $password, email: $email) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MessagesDocument = gql`\n    query Messages($channelId: Int!) {\n  Messages(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useMessagesQuery(baseOptions: Apollo.QueryHookOptions<MessagesQuery, MessagesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MessagesQuery, MessagesQueryVariables>(MessagesDocument, options);\n      }\nexport function useMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MessagesQuery, MessagesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MessagesQuery, MessagesQueryVariables>(MessagesDocument, options);\n        }\nexport type MessagesQueryHookResult = ReturnType<typeof useMessagesQuery>;\nexport type MessagesLazyQueryHookResult = ReturnType<typeof useMessagesLazyQuery>;\nexport type MessagesQueryResult = Apollo.QueryResult<MessagesQuery, MessagesQueryVariables>;\nexport const AllUserDocument = gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllUserQuery(baseOptions?: Apollo.QueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n      }\nexport function useAllUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n        }\nexport type AllUserQueryHookResult = ReturnType<typeof useAllUserQuery>;\nexport type AllUserLazyQueryHookResult = ReturnType<typeof useAllUserLazyQuery>;\nexport type AllUserQueryResult = Apollo.QueryResult<AllUserQuery, AllUserQueryVariables>;\nexport const DirectMessageDocument = gql`\n    query DirectMessage($receiverId: Int!, $teamId: Int!) {\n  DirectMessages(receiverId: $receiverId, teamId: $teamId) {\n    id\n    text\n    createdAt\n    sender {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useDirectMessageQuery(baseOptions: Apollo.QueryHookOptions<DirectMessageQuery, DirectMessageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DirectMessageQuery, DirectMessageQueryVariables>(DirectMessageDocument, options);\n      }\nexport function useDirectMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DirectMessageQuery, DirectMessageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DirectMessageQuery, DirectMessageQueryVariables>(DirectMessageDocument, options);\n        }\nexport type DirectMessageQueryHookResult = ReturnType<typeof useDirectMessageQuery>;\nexport type DirectMessageLazyQueryHookResult = ReturnType<typeof useDirectMessageLazyQuery>;\nexport type DirectMessageQueryResult = Apollo.QueryResult<DirectMessageQuery, DirectMessageQueryVariables>;\nexport const GetTeamMembersDocument = gql`\n    query GetTeamMembers($teamId: Int!) {\n  getTeamMembers(teamId: $teamId) {\n    id\n    username\n    email\n  }\n}\n    `;\n\n/**\n * __useGetTeamMembersQuery__\n *\n * To run a query within a React component, call `useGetTeamMembersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTeamMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTeamMembersQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useGetTeamMembersQuery(baseOptions: Apollo.QueryHookOptions<GetTeamMembersQuery, GetTeamMembersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetTeamMembersQuery, GetTeamMembersQueryVariables>(GetTeamMembersDocument, options);\n      }\nexport function useGetTeamMembersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTeamMembersQuery, GetTeamMembersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetTeamMembersQuery, GetTeamMembersQueryVariables>(GetTeamMembersDocument, options);\n        }\nexport type GetTeamMembersQueryHookResult = ReturnType<typeof useGetTeamMembersQuery>;\nexport type GetTeamMembersLazyQueryHookResult = ReturnType<typeof useGetTeamMembersLazyQuery>;\nexport type GetTeamMembersQueryResult = Apollo.QueryResult<GetTeamMembersQuery, GetTeamMembersQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    username\n    team {\n      id\n      name\n      admin\n      users {\n        id\n        username\n      }\n      channels {\n        id\n        name\n        public\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n      }\nexport function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const NewChannelMessageDocument = gql`\n    subscription NewChannelMessage($channelId: Int!) {\n  newChannelMessage(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useNewChannelMessageSubscription(baseOptions: Apollo.SubscriptionHookOptions<NewChannelMessageSubscription, NewChannelMessageSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<NewChannelMessageSubscription, NewChannelMessageSubscriptionVariables>(NewChannelMessageDocument, options);\n      }\nexport type NewChannelMessageSubscriptionHookResult = ReturnType<typeof useNewChannelMessageSubscription>;\nexport type NewChannelMessageSubscriptionResult = Apollo.SubscriptionResult<NewChannelMessageSubscription>;"]},"metadata":{},"sourceType":"module"}