{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Input, ListItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, UnorderedList } from '@chakra-ui/react';\nimport Downshift from 'downshift';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nexport const DirectMessageForm = ({\n  open,\n  toClose,\n  teamId\n}) => {\n  const router = useRouter();\n  let loading = false;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Search Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [!loading && /*#__PURE__*/_jsxDEV(Downshift, {\n          onChange: selectedUser => {\n            router.push(`/view-team/user/${teamId}/${selectedUser.id}`);\n            toClose();\n          },\n          children: ({\n            getInputProps,\n            getItemProps,\n            getLabelProps,\n            getMenuProps,\n            isOpen,\n            inputValue,\n            highlightedIndex,\n            selectedItem,\n            getRootProps\n          }) => /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, getRootProps()), {}, {\n            children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, getInputProps()), {}, {\n              name: \"DirectMessage\",\n              id: \"DirectMessage\",\n              type: \"text\",\n              placeholder: \"search user\"\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(UnorderedList, _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n              children: isOpen ? ['fdssdffd', 'sdfdfdsf', 'fdsfdsfds'].filter(item => !inputValue || item.value.includes(inputValue)).map((item, index) => /*#__PURE__*/_jsxDEV(ListItem, _objectSpread(_objectSpread({}, getItemProps({\n                key: item.value,\n                index,\n                item,\n                style: {\n                  backgroundColor: highlightedIndex === index ? 'lightgray' : 'white',\n                  fontWeight: selectedItem === item ? 'bold' : 'normal'\n                }\n              })), {}, {\n                children: item.value\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 29\n              }, this)) : null\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this)]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          margin: \"10px auto 0 auto\",\n          display: \"block\",\n          backgroundColor: \"teal.300\",\n          onClick: toClose,\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, )}\n        >\n          <input {...getInputProps()} />\n        </div>\n        \n      </div>\n    )}\n  </Downshift> */\n}","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx"],"names":["Box","Button","Input","ListItem","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","UnorderedList","Downshift","useRouter","React","DirectMessageForm","open","toClose","teamId","router","loading","selectedUser","push","id","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","inputValue","highlightedIndex","selectedItem","getRootProps","filter","item","value","includes","map","index","key","style","backgroundColor","fontWeight"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Input,\n  InputProps,\n  ListItem,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  UnorderedList,\n} from '@chakra-ui/react'\nimport Downshift from 'downshift'\nimport { useRouter } from 'next/router'\nimport React, { Ref } from 'react'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\ninterface GetInputPropsOptionsRef extends InputProps {\n  ref?: Ref<HTMLInputElement>\n}\n\nexport const DirectMessageForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  const router = useRouter()\n  let loading = false\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Search Users</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {!loading && (\n            <Downshift\n              onChange={(selectedUser) => {\n                router.push(`/view-team/user/${teamId}/${selectedUser.id}`)\n                toClose()\n              }}\n            >\n              {({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                isOpen,\n                inputValue,\n                highlightedIndex,\n                selectedItem,\n                getRootProps,\n              }) => (\n                <Box {...getRootProps()}>\n                  {/* IMPORTANT DON'T REMOVE GET ROOT PROPS */}\n                  <Input\n                    {...(getInputProps() as GetInputPropsOptionsRef)}\n                    name=\"DirectMessage\"\n                    id=\"DirectMessage\"\n                    type=\"text\"\n                    placeholder=\"search user\"\n                  />\n                  <UnorderedList {...getMenuProps()}>\n                    {isOpen\n                      ? ['fdssdffd', 'sdfdfdsf', 'fdsfdsfds']\n                          .filter(\n                            (item) =>\n                              !inputValue || item.value.includes(inputValue)\n                          )\n                          .map((item, index) => (\n                            <ListItem\n                              {...getItemProps({\n                                key: item.value,\n                                index,\n                                item,\n                                style: {\n                                  backgroundColor:\n                                    highlightedIndex === index\n                                      ? 'lightgray'\n                                      : 'white',\n                                  fontWeight:\n                                    selectedItem === item ? 'bold' : 'normal',\n                                },\n                              })}\n                            >\n                              {item.value}\n                            </ListItem>\n                          ))\n                      : null}\n                  </UnorderedList>\n                </Box>\n              )}\n            </Downshift>\n          )}\n          <Button\n            type=\"submit\"\n            margin=\"10px auto 0 auto\"\n            display=\"block\"\n            backgroundColor=\"teal.300\"\n            onClick={toClose}\n          >\n            close\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, )}\n        >\n          <input {...getInputProps()} />\n        </div>\n        \n      </div>\n    )}\n  </Downshift> */\n}\n"]},"metadata":{},"sourceType":"module"}