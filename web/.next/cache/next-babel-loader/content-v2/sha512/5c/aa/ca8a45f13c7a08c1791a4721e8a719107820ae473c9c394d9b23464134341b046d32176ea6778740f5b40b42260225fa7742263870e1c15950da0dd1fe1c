{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\";\nimport { useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { ChannelForm } from '../components/channelForm';\nimport { DirectMessageForm } from '../components/DirectMessageForm';\nimport { InvitePeople } from '../components/InvitePeople';\nimport { Team as Teams } from '../components/team';\nimport { useGetTeamMembersQuery } from '../generated/graphql';\nexport const Sidebar = ({\n  AllTeams,\n  Team,\n  username,\n  currentUserId\n}) => {\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(); // open and close modal\n\n  const {\n    isOpen: Open,\n    onOpen: toOpen,\n    onClose: Close\n  } = useDisclosure();\n  const {\n    isOpen: DirectOpen,\n    onOpen: toDirectOpen,\n    onClose: DirectClose\n  } = useDisclosure();\n  const {\n    data,\n    loading\n  } = useGetTeamMembersQuery({\n    variables: {\n      teamId: Team.id\n    }\n  });\n  let isOwner = Team.admin; //data.me.id === Team.ownerId\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Teams, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: AllTeams.map(t => ({\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase()\n      })) // map return a new array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Channel, {\n      onInvite: toOpen,\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: Team.name,\n      username: username,\n      channels: Team.channels,\n      teamId: Team.id,\n      users: Team.directMessageUsers,\n      toOpen: onOpen,\n      isOwner: isOwner,\n      toDirectMessage: toDirectOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChannelForm, {\n      currentUserId: currentUserId,\n      open: isOpen,\n      toClose: onClose,\n      teamId: Team.id,\n      data: data,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvitePeople, {\n      open: Open,\n      toClose: Close,\n      teamId: Team.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DirectMessageForm, {\n      open: DirectOpen,\n      toClose: DirectClose,\n      teamId: Team.id,\n      data: data,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["useDisclosure","React","Channel","ChannelForm","DirectMessageForm","InvitePeople","Team","Teams","useGetTeamMembersQuery","Sidebar","AllTeams","username","currentUserId","isOpen","onOpen","onClose","Open","toOpen","Close","DirectOpen","toDirectOpen","DirectClose","data","loading","variables","teamId","id","isOwner","admin","map","t","name","charAt","toUpperCase","channels","directMessageUsers"],"mappings":"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","sourcesContent":["import { useDisclosure } from '@chakra-ui/react'\nimport React from 'react'\nimport { Channel } from '../components/channel'\nimport { ChannelForm } from '../components/channelForm'\nimport { DirectMessageForm } from '../components/DirectMessageForm'\nimport { InvitePeople } from '../components/InvitePeople'\nimport { Team as Teams } from '../components/team'\nimport { Team as team, useGetTeamMembersQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  AllTeams: team[]\n  Team: team\n  username: string\n  currentUserId\n}\nexport const Sidebar: React.FC<SidebarProps> = ({\n  AllTeams,\n  Team,\n  username,\n  currentUserId,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure() // open and close modal\n  const { isOpen: Open, onOpen: toOpen, onClose: Close } = useDisclosure()\n  const {\n    isOpen: DirectOpen,\n    onOpen: toDirectOpen,\n    onClose: DirectClose,\n  } = useDisclosure()\n  const { data, loading } = useGetTeamMembersQuery({\n    variables: {\n      teamId: Team.id,\n    },\n  })\n  let isOwner = Team.admin //data.me.id === Team.ownerId\n  return (\n    <>\n      <Teams\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      />\n\n      <Channel\n        onInvite={toOpen}\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={Team.name}\n        username={username}\n        channels={Team.channels}\n        teamId={Team.id}\n        users={Team.directMessageUsers}\n        toOpen={onOpen}\n        isOwner={isOwner}\n        toDirectMessage={toDirectOpen}\n      />\n      <ChannelForm\n        currentUserId={currentUserId}\n        open={isOpen}\n        toClose={onClose}\n        teamId={Team.id}\n        data={data}\n        loading={loading}\n      />\n      <InvitePeople open={Open} toClose={Close} teamId={Team.id} />\n      <DirectMessageForm\n        open={DirectOpen}\n        toClose={DirectClose}\n        teamId={Team.id}\n        data={data}\n        loading={loading}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}