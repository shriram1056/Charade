{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\";\nimport { useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { ChannelForm } from '../components/channelForm';\nimport { Team } from '../components/team';\nexport const Sidebar = ({\n  currentTeamId,\n  data,\n  user\n}) => {\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(); // open and close modal\n\n  let currentTeam = data.AllTeams[Idx];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Team, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: data.AllTeams.map(t => ({\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase()\n      })) // map return a new array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Channel, {\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: currentTeam.name,\n      username: user.me.username,\n      channels: currentTeam.channels,\n      teamId: currentTeamId,\n      users: null,\n      toOpen: onOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChannelForm, {\n      open: isOpen,\n      toClose: onClose,\n      teamId: currentTeamId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["useDisclosure","React","Channel","ChannelForm","Team","Sidebar","currentTeamId","data","user","isOpen","onOpen","onClose","currentTeam","AllTeams","Idx","map","t","id","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,IAAT,QAAqB,oBAArB;AASA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAC9CC,EAAAA,aAD8C;AAE9CC,EAAAA,IAF8C;AAG9CC,EAAAA;AAH8C,CAAD,KAIzC;AACJ,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8BX,aAAa,EAAjD,CADI,CACgD;;AAEpD,MAAIY,WAAW,GAAGL,IAAI,CAACM,QAAL,CAAcC,GAAd,CAAlB;AACA,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEP,IAAI,CAACM,QAAL,CAAcE,GAAd,CAAmBC,CAAD,KAAQ;AAC/BC,QAAAA,EAAE,EAAED,CAAC,CAACC,EADyB;AAE/BC,QAAAA,IAAI,EAAEF,CAAC,CAACE,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,OAAR,CAAlB,CALT,CAQO;;AARP;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,OAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAER,WAAW,CAACM,IALxB;AAME,MAAA,QAAQ,EAAEV,IAAI,CAACa,EAAL,CAAQC,QANpB;AAOE,MAAA,QAAQ,EAAEV,WAAW,CAACW,QAPxB;AAQE,MAAA,MAAM,EAAEjB,aARV;AASE,MAAA,KAAK,EAAE,IATT;AAUE,MAAA,MAAM,EAAEI;AAVV;AAAA;AAAA;AAAA;AAAA,YAZF,eAwBE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAED,MAAnB;AAA2B,MAAA,OAAO,EAAEE,OAApC;AAA6C,MAAA,MAAM,EAAEL;AAArD;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA,kBADF;AA4BD,CApCM","sourcesContent":["import { useDisclosure } from '@chakra-ui/react'\nimport React from 'react'\nimport { Channel } from '../components/channel'\nimport { ChannelForm } from '../components/channelForm'\nimport { Team } from '../components/team'\nimport { AllTeamsQuery, MeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: number\n  data: AllTeamsQuery\n  user: MeQuery\n  Idx: number\n}\nexport const Sidebar: React.FC<SidebarProps> = ({\n  currentTeamId,\n  data,\n  user,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure() // open and close modal\n\n  let currentTeam = data.AllTeams[Idx]\n  return (\n    <>\n      <Team\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={data.AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      />\n\n      <Channel\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={currentTeam.name}\n        username={user.me.username}\n        channels={currentTeam.channels}\n        teamId={currentTeamId}\n        users={null}\n        toOpen={onOpen}\n      />\n      <ChannelForm open={isOpen} toClose={onClose} teamId={currentTeamId} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}