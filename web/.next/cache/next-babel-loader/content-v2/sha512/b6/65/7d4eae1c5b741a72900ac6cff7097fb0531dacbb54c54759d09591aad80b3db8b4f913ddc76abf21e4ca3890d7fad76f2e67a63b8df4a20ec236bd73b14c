{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport Downshift from 'downshift';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nexport var DirectMessageForm = function DirectMessageForm(_ref) {\n  _s();\n\n  var open = _ref.open,\n      toClose = _ref.toClose,\n      teamId = _ref.teamId;\n  var router = useRouter();\n  var loading = false;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: toClose,\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Search Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [!loading && /*#__PURE__*/_jsxDEV(Downshift, {\n          onChange: function onChange(selectedUser) {\n            router.push(\"/view-team/user/\".concat(teamId, \"/\").concat(selectedUser.id));\n            toClose();\n          },\n          children: function children(_ref2) {\n            var getInputProps = _ref2.getInputProps,\n                getItemProps = _ref2.getItemProps,\n                getLabelProps = _ref2.getLabelProps,\n                getMenuProps = _ref2.getMenuProps,\n                isOpen = _ref2.isOpen,\n                inputValue = _ref2.inputValue,\n                highlightedIndex = _ref2.highlightedIndex,\n                selectedItem = _ref2.selectedItem,\n                getRootProps = _ref2.getRootProps;\n            return /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, getInputProps()), {}, {\n                name: \"DirectMessage\",\n                id: \"DirectMessage\",\n                type: \"text\",\n                placeholder: \"search user\"\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, _this), isOpen ? /*#__PURE__*/_jsxDEV(Box, {\n                style: {\n                  border: '1px solid #ccc'\n                },\n                children: ['addas', 'asdads', 'sadasd'].filter(function (i) {\n                  return !inputValue;\n                }).map(function (item, index) {\n                  return /*#__PURE__*/_createElement(Box, _objectSpread(_objectSpread({}, getItemProps({\n                    item: item\n                  })), {}, {\n                    key: 'sdfsdf',\n                    style: {\n                      backgroundColor: highlightedIndex === index ? 'gray' : 'white',\n                      fontWeight: selectedItem === item ? 'bold' : 'normal'\n                    },\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 72,\n                      columnNumber: 27\n                    }\n                  }));\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, _this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          margin: \"10px auto 0 auto\",\n          display: \"block\",\n          backgroundColor: \"teal.300\",\n          onClick: toClose,\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DirectMessageForm, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = DirectMessageForm;\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, {suppressRefError: true})}\n        >\n          <input {...getInputProps()} />\n        </div>\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n                .filter(item => !inputValue || item.value.includes(inputValue))\n                .map((item, index) => (\n                  <li\n                    {...getItemProps({\n                      key: item.value,\n                      index,\n                      item,\n                      style: {\n                        backgroundColor:\n                          highlightedIndex === index ? 'lightgray' : 'white',\n                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                      },\n                    })}\n                  >\n                    {item.value}\n                  </li>\n                ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectMessageForm\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageForm.tsx"],"names":["Box","Button","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Downshift","useRouter","React","DirectMessageForm","open","toClose","teamId","router","loading","selectedUser","push","id","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","inputValue","highlightedIndex","selectedItem","getRootProps","border","filter","i","map","item","index","backgroundColor","fontWeight"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Input,\n  InputProps,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport Downshift from 'downshift'\nimport { useRouter } from 'next/router'\nimport React, { Ref } from 'react'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\ninterface GetInputPropsOptionsRef extends InputProps {\n  ref?: Ref<HTMLInputElement>\n}\n\nexport const DirectMessageForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  const router = useRouter()\n  let loading = false\n  return (\n    <Modal onClose={toClose} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Search Users</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          {!loading && (\n            <Downshift\n              onChange={(selectedUser) => {\n                router.push(`/view-team/user/${teamId}/${selectedUser.id}`)\n                toClose()\n              }}\n            >\n              {({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                getMenuProps,\n                isOpen,\n                inputValue,\n                highlightedIndex,\n                selectedItem,\n                getRootProps,\n              }) => (\n                <Box>\n                  <Input\n                    {...(getInputProps() as GetInputPropsOptionsRef)}\n                    name=\"DirectMessage\"\n                    id=\"DirectMessage\"\n                    type=\"text\"\n                    placeholder=\"search user\"\n                  />\n                  {isOpen ? (\n                    <Box style={{ border: '1px solid #ccc' }}>\n                      {['addas', 'asdads', 'sadasd']\n                        .filter((i) => !inputValue)\n                        .map((item, index) => (\n                          <Box\n                            {...getItemProps({ item })}\n                            key={'sdfsdf'}\n                            style={{\n                              backgroundColor:\n                                highlightedIndex === index ? 'gray' : 'white',\n                              fontWeight:\n                                selectedItem === item ? 'bold' : 'normal',\n                            }}\n                          ></Box>\n                        ))}\n                    </Box>\n                  ) : null}\n                </Box>\n              )}\n            </Downshift>\n          )}\n          <Button\n            type=\"submit\"\n            margin=\"10px auto 0 auto\"\n            display=\"block\"\n            backgroundColor=\"teal.300\"\n            onClick={toClose}\n          >\n            close\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n{\n  /* <Downshift\n    onChange={selection =>\n      alert(selection ? `You selected ${selection.value}` : 'Selection Cleared')\n    }\n    itemToString={item => (item ? item.value : '')}\n  >\n    {({\n      getInputProps,\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      inputValue,\n      highlightedIndex,\n      selectedItem,\n      getRootProps,\n    }) => (\n      <div>\n        <label {...getLabelProps()}>Enter a fruit</label>\n        <div\n          style={{display: 'inline-block'}}\n          {...getRootProps({}, {suppressRefError: true})}\n        >\n          <input {...getInputProps()} />\n        </div>\n        <ul {...getMenuProps()}>\n          {isOpen\n            ? items\n                .filter(item => !inputValue || item.value.includes(inputValue))\n                .map((item, index) => (\n                  <li\n                    {...getItemProps({\n                      key: item.value,\n                      index,\n                      item,\n                      style: {\n                        backgroundColor:\n                          highlightedIndex === index ? 'lightgray' : 'white',\n                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                      },\n                    })}\n                  >\n                    {item.value}\n                  </li>\n                ))\n            : null}\n        </ul>\n      </div>\n    )}\n  </Downshift> */\n}\n"]},"metadata":{},"sourceType":"module"}