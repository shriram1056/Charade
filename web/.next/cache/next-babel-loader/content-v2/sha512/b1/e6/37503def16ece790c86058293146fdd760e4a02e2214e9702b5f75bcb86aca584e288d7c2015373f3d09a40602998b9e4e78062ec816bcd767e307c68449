{"ast":null,"code":"import _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/view-team/user/[[...id]].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Team {\\n                    directMessageUsers {\\n                      id\\n                      username\\n                    }\\n                  }\\n                \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Team {\\n                    directMessageUsers {\\n                      id\\n                      username\\n                    }\\n                  }\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Box } from '@chakra-ui/react';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport { useRouter } from 'next/router';\nimport React, { useState } from 'react';\nimport { DirectMessage } from '../../../components/DirectMessageContainer';\nimport { SendMessage } from '../../../components/SendMessage';\nimport { Sidebar } from '../../../container/Sidebar';\nimport { useCreateDirectMessageMutation, useGetUserDirectQuery } from '../../../generated/graphql';\nimport { withApollo } from '../../../utils/withApollo';\n\nvar ViewTeam = function ViewTeam() {\n  _s();\n\n  var teamId, receiverId;\n  var router = useRouter();\n\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]); // in initial render this will be undefined\n\n    receiverId = parseInt(router.query.id[1]);\n  }\n\n  var _useCreateDirectMessa = useCreateDirectMessageMutation(),\n      _useCreateDirectMessa2 = _slicedToArray(_useCreateDirectMessa, 1),\n      createDirectMessage = _useCreateDirectMessa2[0];\n\n  var _useGetUserDirectQuer = useGetUserDirectQuery({\n    fetchPolicy: 'network-only',\n    variables: {\n      id: receiverId\n    },\n    skip: true\n  }),\n      data = _useGetUserDirectQuer.data,\n      loading = _useGetUserDirectQuer.loading;\n\n  var _useState = useState(\"object\"),\n      state = _useState[0],\n      setstate = _useState[1];\n\n  if (state) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, _this);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var teams = data.getUser.team,\n      User = data.User; // direct destructing of data cause error\n\n  var Idx = teamId ? teams.indexOf(teams.find(function (u) {\n    return u.id === teamId;\n  })) : 0;\n  var Team = Idx === -1 ? teams[0] : teams[Idx]; // Idx is -1 if there is no item in allteam with the given ID.\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"grid\",\n    height: \"100vh\",\n    gridTemplateColumns: \"100px 250px 1fr\",\n    gridTemplateRows: \"auto 1fr auto\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      username: data.getUser.username,\n      Team: Team,\n      AllTeams: teams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"3\",\n      gridRow: \"1\",\n      textAlign: \"center\",\n      backgroundColor: \"#e6e6e6\",\n      children: User.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DirectMessage, {\n      teamId: Team.id,\n      receiverId: receiverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      name: receiverId,\n      onSubmit: /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return createDirectMessage({\n                    variables: {\n                      teamId: Team.id,\n                      text: text,\n                      receiverId: receiverId\n                    },\n                    optimisticResponse: {\n                      __typename: 'Mutation',\n                      createDirectMessages: true\n                    },\n                    update: function update(cache, _ref2) {\n                      var createDirectMessages = _ref2.data.createDirectMessages;\n                      var data = cache.readFragment({\n                        id: 'Team:' + Team.id,\n                        fragment: gql(_templateObject())\n                      });\n\n                      var writeData = _.cloneDeep(data);\n\n                      if (!(writeData !== null && writeData !== void 0 && writeData.directMessageUsers)) {\n                        writeData.directMessageUsers = [{\n                          __typename: 'User',\n                          id: receiverId,\n                          username: User.username\n                        }];\n                      } // for some unknown reason username changes perfectly\n\n\n                      var NotAnMember = writeData.directMessageUsers.every(function (u) {\n                        return u.id !== receiverId;\n                      }); //The every() method tests whether all elements in the array pass the test implemented by the provided function.\n\n                      if (NotAnMember && writeData.directMessageUsers) {\n                        // if there is channel\n                        writeData.directMessageUsers.push({\n                          __typename: 'User',\n                          id: receiverId,\n                          username: User.username\n                        }); // if there is no channel\n                      }\n\n                      console.log(writeData);\n                      cache.writeFragment({\n                        id: 'Team:' + Team.id,\n                        fragment: gql(_templateObject2()),\n                        data: writeData\n                      });\n                    }\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ViewTeam, \"ElYNv5SO0W4OMnHQi6eTkyMsJX0=\", false, function () {\n  return [useRouter, useCreateDirectMessageMutation, useGetUserDirectQuery];\n});\n\n_c = ViewTeam;\nexport default withApollo({\n  ssr: false\n})(ViewTeam);\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewTeam\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/view-team/user/[[...id]].tsx"],"names":["Box","gql","_","useRouter","React","useState","DirectMessage","SendMessage","Sidebar","useCreateDirectMessageMutation","useGetUserDirectQuery","withApollo","ViewTeam","teamId","receiverId","router","query","id","parseInt","createDirectMessage","fetchPolicy","variables","skip","data","loading","state","setstate","teams","getUser","team","User","Idx","indexOf","find","u","Team","username","text","optimisticResponse","__typename","createDirectMessages","update","cache","readFragment","fragment","writeData","cloneDeep","directMessageUsers","NotAnMember","every","push","console","log","writeFragment","ssr"],"mappings":"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","sourcesContent":["import { Box } from '@chakra-ui/react'\nimport gql from 'graphql-tag'\nimport _ from 'lodash'\nimport { useRouter } from 'next/router'\nimport React, { useState } from 'react'\nimport { DirectMessage } from '../../../components/DirectMessageContainer'\nimport { SendMessage } from '../../../components/SendMessage'\nimport { Sidebar } from '../../../container/Sidebar'\nimport {\n  useCreateDirectMessageMutation,\n  useGetUserDirectQuery,\n  User,\n} from '../../../generated/graphql'\nimport { withApollo } from '../../../utils/withApollo'\n\nconst ViewTeam = () => {\n  let teamId, receiverId\n  const router = useRouter()\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]) // in initial render this will be undefined\n    receiverId = parseInt(router.query.id[1])\n  }\n  const [createDirectMessage] = useCreateDirectMessageMutation()\n  const { data, loading } = useGetUserDirectQuery({\n    fetchPolicy: 'network-only',\n    variables: { id: receiverId },\n    skip: typeof window !== 'undefined',\n  })\n  const [state, setstate] = useState(typeof window)\n  if (state) {\n    return <Box>loading</Box>\n  }\n  if (loading) {\n    return <Box>loading</Box>\n  }\n\n  const {\n    getUser: { team: teams },\n    User,\n  } = data // direct destructing of data cause error\n\n  const Idx = teamId ? teams.indexOf(teams.find((u) => u.id === teamId)) : 0\n\n  const Team = Idx === -1 ? teams[0] : teams[Idx] // Idx is -1 if there is no item in allteam with the given ID.\n\n  return (\n    <Box\n      display=\"grid\"\n      height=\"100vh\"\n      gridTemplateColumns=\"100px 250px 1fr\"\n      gridTemplateRows=\"auto 1fr auto\"\n    >\n      <Sidebar username={data.getUser.username} Team={Team} AllTeams={teams} />\n      <Box\n        gridColumn=\"3\"\n        gridRow=\"1\"\n        textAlign=\"center\"\n        backgroundColor=\"#e6e6e6\"\n      >\n        {User.username}\n      </Box>\n      <DirectMessage teamId={Team.id} receiverId={receiverId} />\n      <SendMessage\n        name={receiverId}\n        onSubmit={async (text) => {\n          await createDirectMessage({\n            variables: {\n              teamId: Team.id,\n              text,\n              receiverId,\n            },\n            optimisticResponse: {\n              __typename: 'Mutation',\n              createDirectMessages: true,\n            },\n            update: (cache, { data: { createDirectMessages } }) => {\n              const data = cache.readFragment<{\n                directMessageUsers: Pick<\n                  User,\n                  'id' | 'username' | '__typename'\n                >[]\n              }>({\n                id: 'Team:' + Team.id,\n                fragment: gql`\n                  fragment _ on Team {\n                    directMessageUsers {\n                      id\n                      username\n                    }\n                  }\n                `,\n              })\n              const writeData = _.cloneDeep(data)\n              if (!writeData?.directMessageUsers) {\n                writeData.directMessageUsers = [\n                  {\n                    __typename: 'User',\n                    id: receiverId,\n                    username: User.username,\n                  },\n                ]\n              }\n              // for some unknown reason username changes perfectly\n              const NotAnMember = writeData.directMessageUsers.every(\n                (u) => u.id !== receiverId\n              )\n              //The every() method tests whether all elements in the array pass the test implemented by the provided function.\n              if (NotAnMember && writeData.directMessageUsers) {\n                // if there is channel\n                writeData.directMessageUsers.push({\n                  __typename: 'User',\n                  id: receiverId,\n                  username: User.username,\n                })\n                // if there is no channel\n              }\n              console.log(writeData)\n              cache.writeFragment({\n                id: 'Team:' + Team.id,\n                fragment: gql`\n                  fragment _ on Team {\n                    directMessageUsers {\n                      id\n                      username\n                    }\n                  }\n                `,\n                data: writeData,\n              })\n            },\n          })\n        }}\n      />\n    </Box>\n  )\n}\nexport default withApollo({ ssr: false })(ViewTeam)\n"]},"metadata":{},"sourceType":"module"}