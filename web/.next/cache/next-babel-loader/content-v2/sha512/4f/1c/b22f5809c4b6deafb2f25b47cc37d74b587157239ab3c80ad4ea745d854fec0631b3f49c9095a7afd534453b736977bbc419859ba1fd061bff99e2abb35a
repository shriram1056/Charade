{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Text } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { NewChannelMessageDocument, useMessagesQuery } from '../generated/graphql';\n\nconst Chats = ({\n  message\n}) => {\n  const {\n    url,\n    text,\n    fileType\n  } = message;\n\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 14\n      }, this);\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return /*#__PURE__*/_jsxDEV(RenderText, {\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 14\n      }, this);\n    } else if (fileType.startsWith('audio/')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: url,\n            type: fileType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message = ({\n  channelId\n}) => {\n  const {\n    data,\n    loading,\n    subscribeToMore,\n    fetchMore\n  } = useMessagesQuery({\n    variables: {\n      channelId\n    },\n    fetchPolicy: 'network-only' // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n\n  });\n  const {\n    0: scroller,\n    1: setScroll\n  } = useState();\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: {\n        channelId\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) {\n          return prev;\n        } // @ts-ignore\n\n\n        const {\n          newChannelMessage\n        } = subscriptionData.data; // prev is a data with hasMore, incoming dont have that\n\n        let newData = _objectSpread(_objectSpread({}, prev), {}, {\n          Messages: _objectSpread(_objectSpread({}, prev.Messages), {}, {\n            Messages: [newChannelMessage, ...prev.Messages.Messages]\n          })\n        });\n\n        return newData;\n      }\n    });\n\n    if (scroller) {\n      console.log(scroller);\n    }\n\n    if (unsubscribe) {\n      return () => unsubscribe(); // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId, scroller]); // make new subscription if channelId is changed\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n  let handleScroll = () => {\n    console.log(scroller.scrollTop);\n\n    if (scroller && scroller.scrollTop < 100 && data.Messages.hasMore && data.Messages.Messages.length >= 35) {// fetchMore({\n      //   variables: {\n      //     channelId,\n      //     cursor:\n      //       data.Messages.Messages[data.Messages.Messages.length - 1].createdAt,\n      //   },\n      // })\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    onScroll: handleScroll,\n    ref: scroller => {\n      setScroll(scroller);\n    },\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    pl: 3,\n    pt: 4,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"column-reverse\",\n      children: data.Messages.Messages.slice() // message is immuatble. so we slice\n      .reverse().map(u => /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          fontSize: \"19px\",\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n            ml: 2,\n            display: \"inline\",\n            fontSize: \"13px\",\n            fontFamily: \"sans-serif\",\n            color: \"#958993\",\n            children: u.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Chats, {\n          message: u\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this)]\n      }, `message-${u.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Text","React","useEffect","useState","NewChannelMessageDocument","useMessagesQuery","Chats","message","url","text","fileType","startsWith","Message","channelId","data","loading","subscribeToMore","fetchMore","variables","fetchPolicy","scroller","setScroll","unsubscribe","document","updateQuery","prev","subscriptionData","newChannelMessage","newData","Messages","console","log","handleScroll","scrollTop","hasMore","length","slice","reverse","map","u","user","username","createdAt","id"],"mappings":"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","sourcesContent":["import { Box, Text } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport {\n  NewChannelMessageDocument,\n  useMessagesQuery,\n} from '../generated/graphql'\n\nconst Chats = ({ message }) => {\n  const { url, text, fileType } = message\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return <img src={url} alt=\"\" />\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return <RenderText url={url} />\n    } else if (fileType.startsWith('audio/')) {\n      return (\n        <div>\n          <audio controls>\n            <source src={url} type={fileType} />\n          </audio>\n        </div>\n      )\n    }\n  }\n  return <Box>{text}</Box>\n}\n\ninterface MessageProps {\n  channelId: number\n}\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading, subscribeToMore, fetchMore } = useMessagesQuery({\n    variables: { channelId },\n    fetchPolicy: 'network-only', // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n  })\n\n  const [scroller, setScroll] = useState<HTMLDivElement>()\n  useEffect(() => {\n    // this starts the subscription\n\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: { channelId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        // @ts-ignore\n        const { newChannelMessage } = subscriptionData.data\n\n        // prev is a data with hasMore, incoming dont have that\n        let newData = {\n          ...prev,\n          Messages: {\n            ...prev.Messages,\n            Messages: [newChannelMessage, ...prev.Messages.Messages],\n          },\n        }\n\n        return newData\n      },\n    })\n\n    if (scroller) {\n      console.log(scroller)\n    }\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId, scroller]) // make new subscription if channelId is changed\n\n  if (loading) {\n    return <Box>loading</Box>\n  }\n\n  let handleScroll = () => {\n    console.log(scroller.scrollTop)\n    if (\n      scroller &&\n      scroller.scrollTop < 100 &&\n      data.Messages.hasMore &&\n      data.Messages.Messages.length >= 35\n    ) {\n      // fetchMore({\n      //   variables: {\n      //     channelId,\n      //     cursor:\n      //       data.Messages.Messages[data.Messages.Messages.length - 1].createdAt,\n      //   },\n      // })\n    }\n  }\n\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      onScroll={handleScroll}\n      ref={(scroller) => {\n        setScroll(scroller)\n      }}\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n      pl={3}\n      pt={4}\n    >\n      {/* For example your input element there, with ref=\"input\", would expose its DOM node in its parent (here inside currency-input this), as this.$refs[\"input\"] (or this.$refs.input). */}\n      {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n      <Box display=\"flex\" flexDirection=\"column-reverse\">\n        {data.Messages.Messages.slice() // message is immuatble. so we slice\n          .reverse()\n          .map((u) => (\n            <Box mb={4} key={`message-${u.id}`}>\n              <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n                {u.user.username}\n                <Text\n                  ml={2}\n                  display=\"inline\"\n                  fontSize=\"13px\"\n                  fontFamily=\"sans-serif\"\n                  color=\"#958993\"\n                >\n                  {u.createdAt}\n                </Text>\n              </Box>\n              <Chats message={u} />\n            </Box>\n          ))}\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}