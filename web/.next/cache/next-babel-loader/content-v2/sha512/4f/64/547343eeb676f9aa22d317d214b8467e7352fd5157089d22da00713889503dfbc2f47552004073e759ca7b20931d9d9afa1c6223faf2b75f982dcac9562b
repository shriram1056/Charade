{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport cookieCutter from 'js-cookie';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo';\nimport { SubscriptionClient } from 'subscriptions-transport-ws'; // subscription connect as soon as i load the page.so, lazy true only reconnect it on subscription trigger\n//but we also reconnect on login\n//and also trigger subscribe to more in Message component on page load\n\nexport const wsLink = false ? new SubscriptionClient('ws://localhost:4001/subscriptions', {\n  reconnect: true,\n  connectionParams: {\n    authToken: {\n      Rtoken: cookieCutter.get('refresh-token'),\n      Atoken: cookieCutter.get('access-token')\n    }\n  },\n  lazy: true\n}) : null; // ctx can be undefined in ssr:false, so we need optional\n\nconst createClient = ctx => // ctx for forwarding cookie in ssr\n{\n  var _ctx$req;\n\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include',\n    //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    }\n  }); //WebSocket is a property that exists only in the browser\n\n  const splitLink = false ? split(({\n    query\n  }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, wsLink, httpLink) : httpLink; // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new ApolloClient({\n    link: splitLink,\n    //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache(),\n    ssrMode: true // Disables forceFetch on the server (so queries are only run once)\n\n  });\n};\n\nexport const withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","getMainDefinition","cookieCutter","withApollo","createWithApollo","SubscriptionClient","wsLink","reconnect","connectionParams","authToken","Rtoken","get","Atoken","lazy","createClient","ctx","httpLink","uri","credentials","headers","cookie","req","undefined","splitLink","query","definition","kind","operation","link","cache","ssrMode"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,KAAhD,QAA6D,gBAA7D;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,YAAP,MAAyB,WAAzB;AAEA;AACA,SAASC,UAAU,IAAIC,gBAAvB,QAA+C,aAA/C;AACA,SAASC,kBAAT,QAAmC,4BAAnC,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GACjB,QACI,IAAID,kBAAJ,CAAuB,mCAAvB,EAA4D;AAC1DE,EAAAA,SAAS,EAAE,IAD+C;AAE1DC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAER,YAAY,CAACS,GAAb,CAAiB,eAAjB,CADC;AAETC,MAAAA,MAAM,EAAEV,YAAY,CAACS,GAAb,CAAiB,cAAjB;AAFC;AADK,GAFwC;AAQ1DE,EAAAA,IAAI,EAAE;AARoD,CAA5D,CADJ,GAWI,IAZC,C,CAcP;;AACA,MAAMC,YAAY,GAChBC,GADmB,IACG;AACnB;AAAA;;AACH,QAAMC,QAAQ,GAAG,IAAIlB,QAAJ,CAAa;AAC5BmB,IAAAA,GAAG,EAAE,+BADuB;AAE5BC,IAAAA,WAAW,EAAE,SAFe;AAEJ;AACxBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,CAAC,OACGL,GADH,aACGA,GADH,mCACGA,GAAG,CAAEM,GADR,6CACG,SAAUF,OAAV,CAAkBC,MADrB,GAEGE,SAFJ,KAEkB;AAJb;AAHmB,GAAb,CAAjB,CADG,CAYH;;AAEA,QAAMC,SAAS,GACb,QACIvB,KAAK,CACH,CAAC;AAAEwB,IAAAA;AAAF,GAAD,KAAe;AACb,UAAMC,UAAU,GAAGxB,iBAAiB,CAACuB,KAAD,CAApC;AACA,WACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,GAPE,EAQHrB,MARG,EASHU,QATG,CADT,GAYIA,QAbN,CAdG,CA2BY;;AAEf,SAAO,IAAInB,YAAJ,CAAiB;AACtB+B,IAAAA,IAAI,EAAEL,SADgB;AACL;AACjBM,IAAAA,KAAK,EAAE,IAAI9B,aAAJ,EAFe;AAGtB+B,IAAAA,OAAO,MAHe,CAGkB;;AAHlB,GAAjB,CAAP;AAKD,CApCD;;AAqCA,OAAO,MAAM3B,UAAU,GAAGC,gBAAgB,CAACU,YAAD,CAAnC,C,CAEP","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport cookieCutter from 'js-cookie'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\n\n// subscription connect as soon as i load the page.so, lazy true only reconnect it on subscription trigger\n//but we also reconnect on login\n//and also trigger subscribe to more in Message component on page load\nexport const wsLink =\n  typeof window !== 'undefined'\n    ? new SubscriptionClient('ws://localhost:4001/subscriptions', {\n        reconnect: true,\n        connectionParams: {\n          authToken: {\n            Rtoken: cookieCutter.get('refresh-token'),\n            Atoken: cookieCutter.get('access-token'),\n          },\n        },\n        lazy: true,\n      })\n    : null\n\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (\n  ctx?: NextPageContext // ctx for forwarding cookie in ssr\n) => {\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie:\n        (typeof window === 'undefined'\n          ? ctx?.req?.headers.cookie\n          : undefined) || '',\n    },\n  })\n\n  //WebSocket is a property that exists only in the browser\n\n  const splitLink =\n    typeof window !== 'undefined'\n      ? split(\n          ({ query }) => {\n            const definition = getMainDefinition(query)\n            return (\n              definition.kind === 'OperationDefinition' &&\n              definition.operation === 'subscription'\n            )\n          },\n          wsLink,\n          httpLink\n        )\n      : httpLink // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new ApolloClient({\n    link: splitLink, //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache(),\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n  })\n}\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n"]},"metadata":{},"sourceType":"module"}