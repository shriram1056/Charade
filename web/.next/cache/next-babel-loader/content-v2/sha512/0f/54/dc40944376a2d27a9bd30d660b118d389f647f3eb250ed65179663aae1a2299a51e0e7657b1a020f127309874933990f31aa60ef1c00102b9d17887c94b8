{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4001/graphql'\n}); //WebSocket is a property that exists only in the browser\n\nconst wsLink = false ? new WebSocketLink({\n  uri: 'wss://localhost:4001/subscriptions',\n  options: {\n    reconnect: true\n  }\n}) : null;\n\nif (wsLink) {\n  console.log('connected');\n}\n\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink); // ctx can be undefined in ssr:false, so we need optional\n\nconst createClient = ctx => {\n  var _ctx$req;\n\n  return new ApolloClient({\n    uri: 'http://localhost:4001/graphql',\n    link: true ? null : splitLink,\n    //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    credentials: 'include',\n    //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    },\n    cache: new InMemoryCache()\n  });\n};\n\nexport const withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n//React Context provides a way to pass data through the component tree without having to pass props down manually at every level.","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","WebSocketLink","getMainDefinition","withApollo","createWithApollo","httpLink","uri","wsLink","options","reconnect","console","log","splitLink","query","definition","kind","operation","createClient","ctx","link","credentials","headers","cookie","req","undefined","cache"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,KAAhD,QAA6D,gBAA7D;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA;AACA,SAASC,UAAU,IAAIC,gBAAvB,QAA+C,aAA/C;AAEA,MAAMC,QAAQ,GAAG,IAAIP,QAAJ,CAAa;AAC5BQ,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB,C,CAGA;;AACA,MAAMC,MAAM,GACV,QACI,IAAIN,aAAJ,CAAkB;AAChBK,EAAAA,GAAG,EAAE,oCADW;AAEhBE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFO,CAAlB,CADJ,GAOI,IARN;;AAUA,IAAIF,MAAJ,EAAY;AACVG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AAED,MAAMC,SAAS,GAAGZ,KAAK,CACrB,CAAC;AAAEa,EAAAA;AAAF,CAAD,KAAgC;AAC9B,QAAMC,UAAU,GAAGZ,iBAAiB,CAACW,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBT,MARqB,EASrBF,QATqB,CAAvB,C,CAYA;;AACA,MAAMY,YAAY,GAAIC,GAAD;AAAA;;AAAA,SACnB,IAAIrB,YAAJ,CAAiB;AACfS,IAAAA,GAAG,EAAE,+BADU;AAEfa,IAAAA,IAAI,EAAE,OAAgC,IAAhC,GAAuCP,SAF9B;AAEyC;AACxDQ,IAAAA,WAAW,EAAE,SAHE;AAGS;AACxBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,CAAC,OACGJ,GADH,aACGA,GADH,mCACGA,GAAG,CAAEK,GADR,6CACG,SAAUF,OAAV,CAAkBC,MADrB,GAEGE,SAFJ,KAEkB;AAJb,KAJM;AAUfC,IAAAA,KAAK,EAAE,IAAI1B,aAAJ;AAVQ,GAAjB,CADmB;AAAA,CAArB;;AAcA,OAAO,MAAMI,UAAU,GAAGC,gBAAgB,CAACa,YAAD,CAAnC,C,CAEP;AAEA","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4001/graphql',\n})\n//WebSocket is a property that exists only in the browser\nconst wsLink =\n  typeof window !== 'undefined'\n    ? new WebSocketLink({\n        uri: 'wss://localhost:4001/subscriptions',\n        options: {\n          reconnect: true,\n        },\n      })\n    : null\n\nif (wsLink) {\n  console.log('connected')\n}\n\nconst splitLink = split(\n  ({ query }: NextPageContext) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink\n)\n\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (ctx?: NextPageContext) =>\n  new ApolloClient({\n    uri: 'http://localhost:4001/graphql',\n    link: typeof window === 'undefined' ? null : splitLink, //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie:\n        (typeof window === 'undefined'\n          ? ctx?.req?.headers.cookie\n          : undefined) || '',\n    },\n    cache: new InMemoryCache(),\n  })\n\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n\n//React Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n"]},"metadata":{},"sourceType":"module"}