{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { ChannelForm } from '../components/channelForm';\nimport { Team } from '../components/team';\nexport var Sidebar = function Sidebar(_ref) {\n  _s();\n\n  var currentTeamId = _ref.currentTeamId,\n      data = _ref.data,\n      user = _ref.user;\n\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose; // open and close modal\n\n\n  var Idx = currentTeamId ? data.AllTeams.indexOf(data.AllTeams.find(function (u) {\n    return u.id === currentTeamId;\n  })) : 0;\n  var currentTeam = data.AllTeams[Idx];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Team, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: data.AllTeams.map(function (t) {\n        return {\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase()\n        };\n      }) // map return a new array\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Channel, {\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: currentTeam.name,\n      username: user.me.username,\n      channels: currentTeam.channels,\n      teamId: currentTeamId,\n      users: null,\n      toOpen: onOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ChannelForm, {\n      open: isOpen,\n      toClose: onClose,\n      teamId: currentTeamId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Sidebar, \"b6HgRGUKK6FEfELRcVwOTS4RtgI=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["useDisclosure","React","Channel","ChannelForm","Team","Sidebar","currentTeamId","data","user","isOpen","onOpen","onClose","Idx","AllTeams","indexOf","find","u","id","currentTeam","map","t","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;;;;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,IAAT,QAAqB,oBAArB;AAQA,OAAO,IAAMC,OAA+B,GAAG,SAAlCA,OAAkC,OAIzC;AAAA;;AAAA,MAHJC,aAGI,QAHJA,aAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADJC,IACI,QADJA,IACI;;AAAA,uBACgCR,aAAa,EAD7C;AAAA,MACIS,MADJ,kBACIA,MADJ;AAAA,MACYC,MADZ,kBACYA,MADZ;AAAA,MACoBC,OADpB,kBACoBA,OADpB,EACgD;;;AAEpD,MAAIC,GAAG,GAAGN,aAAa,GACnBC,IAAI,CAACM,QAAL,CAAcC,OAAd,CAAsBP,IAAI,CAACM,QAAL,CAAcE,IAAd,CAAmB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,EAAF,KAASX,aAAhB;AAAA,GAAnB,CAAtB,CADmB,GAEnB,CAFJ;AAGA,MAAIY,WAAW,GAAGX,IAAI,CAACM,QAAL,CAAcD,GAAd,CAAlB;AACA,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEL,IAAI,CAACM,QAAL,CAAcM,GAAd,CAAkB,UAACC,CAAD;AAAA,eAAQ;AAC/BH,UAAAA,EAAE,EAAEG,CAAC,CAACH,EADyB;AAE/BI,UAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,SAAR;AAAA,OAAlB,CALT,CAQO;;AARP;AAAA;AAAA;AAAA;AAAA,aADF,eAYE,QAAC,OAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAEL,WAAW,CAACG,IALxB;AAME,MAAA,QAAQ,EAAEb,IAAI,CAACgB,EAAL,CAAQC,QANpB;AAOE,MAAA,QAAQ,EAAEP,WAAW,CAACQ,QAPxB;AAQE,MAAA,MAAM,EAAEpB,aARV;AASE,MAAA,KAAK,EAAE,IATT;AAUE,MAAA,MAAM,EAAEI;AAVV;AAAA;AAAA;AAAA;AAAA,aAZF,eAwBE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAED,MAAnB;AAA2B,MAAA,OAAO,EAAEE,OAApC;AAA6C,MAAA,MAAM,EAAEL;AAArD;AAAA;AAAA;AAAA;AAAA,aAxBF;AAAA,kBADF;AA4BD,CAvCM;;GAAMD,O;UAKyBL,a;;;KALzBK,O","sourcesContent":["import { useDisclosure } from '@chakra-ui/react'\nimport React from 'react'\nimport { Channel } from '../components/channel'\nimport { ChannelForm } from '../components/channelForm'\nimport { Team } from '../components/team'\nimport { AllTeamsQuery, MeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: number\n  data: AllTeamsQuery\n  user: MeQuery\n}\nexport const Sidebar: React.FC<SidebarProps> = ({\n  currentTeamId,\n  data,\n  user,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure() // open and close modal\n\n  let Idx = currentTeamId\n    ? data.AllTeams.indexOf(data.AllTeams.find((u) => u.id === currentTeamId))\n    : 0\n  let currentTeam = data.AllTeams[Idx]\n  return (\n    <>\n      <Team\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={data.AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      />\n\n      <Channel\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={currentTeam.name}\n        username={user.me.username}\n        channels={currentTeam.channels}\n        teamId={currentTeamId}\n        users={null}\n        toOpen={onOpen}\n      />\n      <ChannelForm open={isOpen} toClose={onClose} teamId={currentTeamId} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}