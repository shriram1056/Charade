{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Stack, Text } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { NewChannelMessageDocument, useMessagesQuery } from '../generated/graphql';\nexport var Message = function Message(_ref) {\n  _s();\n\n  var channelId = _ref.channelId;\n\n  var _useMessagesQuery = useMessagesQuery({\n    variables: {\n      channelId: channelId\n    }\n  }),\n      data = _useMessagesQuery.data,\n      loading = _useMessagesQuery.loading,\n      subscribeToMore = _useMessagesQuery.subscribeToMore;\n\n  useEffect(function () {\n    subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: {\n        channelId: channelId\n      },\n      updateQuery: function updateQuery(prev, _ref2) {\n        var subscriptionData = _ref2.subscriptionData;\n\n        if (!subscriptionData.data) {\n          return prev;\n        }\n\n        console.log(subscriptionData); // prev is a data with __typename and Message\n\n        var newData = _objectSpread(_objectSpread({}, prev), {}, {\n          Messages: [].concat(_toConsumableArray(prev.Messages), _toConsumableArray(subscriptionData.data.Messages)) // Messages: [...prev.Messages, ],\n\n        });\n\n        console.log(newData);\n        return newData;\n      }\n    }), [subscribeToMore];\n  });\n  console.log(data);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      mt: 4,\n      ml: 3,\n      flexDirection: \"column-reverse\",\n      children: data.Messages.map(function (u) {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mb: 4,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            fontSize: \"19px\",\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n              ml: 2,\n              display: \"inline\",\n              fontSize: \"13px\",\n              fontFamily: \"sans-serif\",\n              color: \"#958993\",\n              children: u.createdAt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            children: u.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, _this)]\n        }, \"message-\".concat(u.id), true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Message, \"AcbsqtB5ipSJ5Lc25kXEXVwnWGQ=\", false, function () {\n  return [useMessagesQuery];\n});\n\n_c = Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Stack","Text","React","useEffect","NewChannelMessageDocument","useMessagesQuery","Message","channelId","variables","data","loading","subscribeToMore","document","updateQuery","prev","subscriptionData","console","log","newData","Messages","map","u","user","username","createdAt","text","id"],"mappings":"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","sourcesContent":["import { Box, Stack, Text } from '@chakra-ui/react'\nimport React, { useEffect } from 'react'\nimport {\n  NewChannelMessageDocument,\n  useMessagesQuery,\n} from '../generated/graphql'\n\ninterface MessageProps {\n  channelId: number\n}\n\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading, subscribeToMore } = useMessagesQuery({\n    variables: { channelId: channelId },\n  })\n\n  useEffect(() => {\n    subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: { channelId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        console.log(subscriptionData)\n        // prev is a data with __typename and Message\n        let newData = {\n          ...prev,\n          Messages: [...prev.Messages, ...subscriptionData.data.Messages],\n          // Messages: [...prev.Messages, ],\n        }\n        console.log(newData)\n        return newData\n      },\n    }),\n      [subscribeToMore]\n  })\n  console.log(data)\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box gridColumn=\"3\" gridRow=\"2\" backgroundColor=\"#e6e6e6\" overflowY=\"auto\">\n      <Stack mt={4} ml={3} flexDirection=\"column-reverse\">\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        {data.Messages.map((u) => (\n          <Box mb={4} key={`message-${u.id}`}>\n            <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n              {u.user.username}\n              <Text\n                ml={2}\n                display=\"inline\"\n                fontSize=\"13px\"\n                fontFamily=\"sans-serif\"\n                color=\"#958993\"\n              >\n                {u.createdAt}\n              </Text>\n            </Box>\n            <Box>{u.text}</Box>\n          </Box>\n        ))}\n      </Stack>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}