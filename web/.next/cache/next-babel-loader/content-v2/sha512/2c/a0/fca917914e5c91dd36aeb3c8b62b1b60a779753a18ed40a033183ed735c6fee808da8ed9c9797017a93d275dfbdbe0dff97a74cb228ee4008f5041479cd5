{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel, Input, Textarea } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React from 'react'; //InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\n\n// 'props' is a special keyword in React, which stands for properties and is being used for passing data from one component to another.\nexport var InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      textarea = _ref.textarea,\n      channel = _ref.channel,\n      placeholder = _ref.placeholder,\n      _placeHolder = _ref._placeHolder,\n      _ = _ref.size,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"channel\", \"placeholder\", \"_placeHolder\", \"size\"]);\n\n  var InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error; //this helps to connect the input fields to formik. name is required\n  // field: value,name and onChange\n  //error is received from setErrors\n\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [channel ? null : /*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }, _this), /*#__PURE__*/_jsxDEV(InputOrTextarea, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      // html input attributes\n      id: field.name,\n      placeholder: placeholder,\n      _placeholder: _placeHolder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this), error ? /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","Textarea","useField","React","InputField","label","textarea","channel","placeholder","_placeHolder","_","size","props","InputOrTextarea","field","error","name"],"mappings":";;;;;;;;;;;;;AAAA,SAGEA,WAHF,EAIEC,gBAJF,EAKEC,SALF,EAMEC,KANF,EAOEC,QAPF,QAQO,kBARP;AASA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAA2C,OAA3C,C,CACA;;AAYA;AAEA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAU/C;AAAA;;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,OAMI,QANJA,OAMI;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAFEC,CAEF,QAFJC,IAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGb,KAAtB;;AACA,MAAIM,QAAJ,EAAc;AACZO,IAAAA,eAAe,GAAGZ,QAAlB;AACD;;AAJG,kBAMuBC,QAAQ,CAACU,KAAD,CAN/B;AAAA;AAAA,MAMGE,KANH;AAAA,MAMYC,KANZ,iBAMYA,KANZ,EAOJ;AACA;AACA;;;AACA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA,eAEGR,OAAO,GAAG,IAAH,gBAAU,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEO,KAAK,CAACE,IAA1B;AAAA,gBAAiCX;AAAjC;AAAA;AAAA;AAAA;AAAA,aAFpB,eAIE,QAAC,eAAD,gDACMS,KADN,GAEMF,KAFN;AAEa;AACX,MAAA,EAAE,EAAEE,KAAK,CAACE,IAHZ;AAIE,MAAA,WAAW,EAAER,WAJf;AAKE,MAAA,YAAY,EAAEC;AALhB;AAAA;AAAA;AAAA;AAAA,aAJF,EAWGM,KAAK,gBAAG,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,aAAH,GAAkD,IAX1D;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CAnCM;;GAAMX,U;UAgBgBF,Q;;;KAhBhBE,U","sourcesContent":["import {\n  BackgroundProps,\n  CSSObject,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Textarea,\n} from '@chakra-ui/react'\nimport { useField } from 'formik'\nimport React, { InputHTMLAttributes } from 'react'\n//InputHTMLAttributes<HTMLInputElement> this has a lot of optional properties\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> &\n  BackgroundProps & {\n    // non-input properties\n    label?: string\n    placeholder: string\n    _placeHolder?: CSSObject\n    //end\n    name: string // we are modifying the InputHTMLAttributes's properties here to be required\n    channel?: boolean\n    textarea?: boolean\n  }\n// 'props' is a special keyword in React, which stands for properties and is being used for passing data from one component to another.\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  //the below 2 are not html properties\n  label,\n  textarea,\n  channel,\n  placeholder,\n  _placeHolder,\n  // end\n  size: _,\n  ...props\n}) => {\n  let InputOrTextarea = Input\n  if (textarea) {\n    InputOrTextarea = Textarea as any\n  }\n\n  const [field, { error }] = useField(props)\n  //this helps to connect the input fields to formik. name is required\n  // field: value,name and onChange\n  //error is received from setErrors\n  return (\n    <FormControl isInvalid={!!error}>\n      {/*if you render FormErrorMessage and isInvalid is false or undefined, FormErrorMessage won't be visible. The only way to make it visible is by passing isInvalid and setting it to true. */}\n      {channel ? null : <FormLabel htmlFor={field.name}>{label}</FormLabel>}\n      {/* point label to field with id */}\n      <InputOrTextarea\n        {...field} // state for value\n        {...props} // html input attributes\n        id={field.name}\n        placeholder={placeholder}\n        _placeholder={_placeHolder}\n      />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}