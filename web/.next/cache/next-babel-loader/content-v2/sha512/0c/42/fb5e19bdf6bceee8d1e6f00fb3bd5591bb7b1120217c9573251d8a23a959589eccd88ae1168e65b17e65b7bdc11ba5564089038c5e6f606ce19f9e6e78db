{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$();\n\nfunction _templateObject18() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription NewChannelMessage($channelId: Int!) {\\n  newChannelMessage(channelId: $channelId) {\\n    id\\n    text\\n    user {\\n      username\\n    }\\n    createdAt\\n  }\\n}\\n    \"]);\n\n  _templateObject18 = function _templateObject18() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject17() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject17 = function _templateObject17() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    query DirectMessage($receiverId: Int!, $teamId: Int!) {\\n  DirectMessages(receiverId: $receiverId, teamId: $teamId) {\\n    id\\n    text\\n    createdAt\\n    sender {\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    query allUser {\\n  allUser {\\n    id\\n    email\\n  }\\n}\\n    \"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    query getUser {\\n  getUser {\\n    id\\n    username\\n    team {\\n      id\\n      name\\n      admin\\n      channels {\\n        id\\n        name\\n        public\\n      }\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    query Messages($channelId: Int!) {\\n  Messages(channelId: $channelId) {\\n    id\\n    text\\n    user {\\n      username\\n    }\\n    createdAt\\n  }\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($password: String!, $email: String!) {\\n  Login(password: $password, email: $email) {\\n    ...FragmentUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createUser($options: UserCredentials!) {\\n  createUser(options: $options) {\\n    ...FragmentUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateTeam($name: String!) {\\n  createTeam(name: $name) {\\n    ...FragmentTeamResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createMessage($channelId: Int!, $text: String!) {\\n  createMessage(channelId: $channelId, text: $text) {\\n    id\\n    text\\n  }\\n}\\n    \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateDirectMessage($text: String!, $receiverId: Int!, $teamId: Int!) {\\n  createDirectMessages(text: $text, receiverId: $receiverId, teamId: $teamId)\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateChannel($teamId: Int!, $name: String!) {\\n  createChannel(teamId: $teamId, name: $name) {\\n    channel {\\n      id\\n      name\\n      public\\n    }\\n    errors {\\n      ...FragmentError\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation AddTeamMember($teamId: Int!, $email: String!) {\\n  addTeamMember(teamId: $teamId, email: $email) {\\n    errors {\\n      field\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentUserResponse on UserResponse {\\n  errors {\\n    ...FragmentError\\n  }\\n  user {\\n    ...FragmentUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentUser on Users {\\n  id\\n  username\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentTeamResponse on TeamResponse {\\n  errors {\\n    ...FragmentError\\n  }\\n  team {\\n    ...FragmentTeam\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentTeam on Team {\\n  name\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment FragmentError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nvar defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport var FragmentErrorFragmentDoc = gql(_templateObject());\nexport var FragmentTeamFragmentDoc = gql(_templateObject2());\nexport var FragmentTeamResponseFragmentDoc = gql(_templateObject3(), FragmentErrorFragmentDoc, FragmentTeamFragmentDoc);\nexport var FragmentUserFragmentDoc = gql(_templateObject4());\nexport var FragmentUserResponseFragmentDoc = gql(_templateObject5(), FragmentErrorFragmentDoc, FragmentUserFragmentDoc);\nexport var AddTeamMemberDocument = gql(_templateObject6());\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useAddTeamMemberMutation(baseOptions) {\n  _s();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(AddTeamMemberDocument, options);\n}\n\n_s(useAddTeamMemberMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateChannelDocument = gql(_templateObject7(), FragmentErrorFragmentDoc);\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateChannelMutation(baseOptions) {\n  _s2();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateChannelDocument, options);\n}\n\n_s2(useCreateChannelMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateDirectMessageDocument = gql(_templateObject8());\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useCreateDirectMessageMutation(baseOptions) {\n  _s3();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateDirectMessageDocument, options);\n}\n\n_s3(useCreateDirectMessageMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateMessageDocument = gql(_templateObject9());\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(baseOptions) {\n  _s4();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateMessageDocument, options);\n}\n\n_s4(useCreateMessageMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateTeamDocument = gql(_templateObject10(), FragmentTeamResponseFragmentDoc);\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions) {\n  _s5();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateTeamDocument, options);\n}\n\n_s5(useCreateTeamMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateUserDocument = gql(_templateObject11(), FragmentUserResponseFragmentDoc);\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions) {\n  _s6();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateUserDocument, options);\n}\n\n_s6(useCreateUserMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject12(), FragmentUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s7();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\n\n_s7(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MessagesDocument = gql(_templateObject13());\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useMessagesQuery(baseOptions) {\n  _s8();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MessagesDocument, options);\n}\n\n_s8(useMessagesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMessagesLazyQuery(baseOptions) {\n  _s9();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MessagesDocument, options);\n}\n\n_s9(useMessagesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var GetUserDocument = gql(_templateObject14());\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGetUserQuery(baseOptions) {\n  _s10();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(GetUserDocument, options);\n}\n\n_s10(useGetUserQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useGetUserLazyQuery(baseOptions) {\n  _s11();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(GetUserDocument, options);\n}\n\n_s11(useGetUserLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var AllUserDocument = gql(_templateObject15());\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllUserQuery(baseOptions) {\n  _s12();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(AllUserDocument, options);\n}\n\n_s12(useAllUserQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useAllUserLazyQuery(baseOptions) {\n  _s13();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(AllUserDocument, options);\n}\n\n_s13(useAllUserLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var DirectMessageDocument = gql(_templateObject16());\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\n\nexport function useDirectMessageQuery(baseOptions) {\n  _s14();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(DirectMessageDocument, options);\n}\n\n_s14(useDirectMessageQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useDirectMessageLazyQuery(baseOptions) {\n  _s15();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(DirectMessageDocument, options);\n}\n\n_s15(useDirectMessageLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var MeDocument = gql(_templateObject17());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s16();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\n\n_s16(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s17();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\n\n_s17(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var NewChannelMessageDocument = gql(_templateObject18());\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useNewChannelMessageSubscription(baseOptions) {\n  _s18();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useSubscription(NewChannelMessageDocument, options);\n}\n\n_s18(useNewChannelMessageSubscription, \"wpUHqjcXqLAwY/8SnoVwGjhIUKk=\", false, function () {\n  return [Apollo.useSubscription];\n});","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","FragmentErrorFragmentDoc","FragmentTeamFragmentDoc","FragmentTeamResponseFragmentDoc","FragmentUserFragmentDoc","FragmentUserResponseFragmentDoc","AddTeamMemberDocument","useAddTeamMemberMutation","baseOptions","options","useMutation","CreateChannelDocument","useCreateChannelMutation","CreateDirectMessageDocument","useCreateDirectMessageMutation","CreateMessageDocument","useCreateMessageMutation","CreateTeamDocument","useCreateTeamMutation","CreateUserDocument","useCreateUserMutation","LoginDocument","useLoginMutation","MessagesDocument","useMessagesQuery","useQuery","useMessagesLazyQuery","useLazyQuery","GetUserDocument","useGetUserQuery","useGetUserLazyQuery","AllUserDocument","useAllUserQuery","useAllUserLazyQuery","DirectMessageDocument","useDirectMessageQuery","useDirectMessageLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","NewChannelMessageDocument","useNewChannelMessageSubscription","useSubscription"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  DirectMessages: Array<DirectMessage>;\n  Messages: Array<Message>;\n  allUser: Array<Users>;\n  getUser?: Maybe<Users>;\n  me?: Maybe<Users>;\n};\n\n\nexport type QueryDirectMessagesArgs = {\n  receiverId: Scalars['Int'];\n  teamId: Scalars['Int'];\n};\n\n\nexport type QueryMessagesArgs = {\n  channelId: Scalars['Int'];\n};\n\nexport type DirectMessage = {\n  __typename?: 'DirectMessage';\n  id: Scalars['Float'];\n  text: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  receiverId: Scalars['Float'];\n  sender: Users;\n  team: Team;\n};\n\n\nexport type Users = {\n  __typename?: 'Users';\n  id: Scalars['Float'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  team: Array<Team>;\n};\n\nexport type Team = {\n  __typename?: 'Team';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  admin: Scalars['Boolean'];\n  channels?: Maybe<Array<Channel>>;\n};\n\nexport type Channel = {\n  __typename?: 'Channel';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  public: Scalars['Boolean'];\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  id: Scalars['Float'];\n  text: Scalars['String'];\n  user: Users;\n  createdAt: Scalars['DateTime'];\n  channel: Channel;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createChannel: ChannelResponse;\n  createDirectMessages: Scalars['Boolean'];\n  createMessage: Message;\n  createTeam: TeamResponse;\n  addTeamMember?: Maybe<AddUserResponse>;\n  createUser: UserResponse;\n  Login: UserResponse;\n};\n\n\nexport type MutationCreateChannelArgs = {\n  public?: Maybe<Scalars['Boolean']>;\n  teamId: Scalars['Int'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationCreateDirectMessagesArgs = {\n  teamId: Scalars['Int'];\n  text: Scalars['String'];\n  receiverId: Scalars['Int'];\n};\n\n\nexport type MutationCreateMessageArgs = {\n  channelId: Scalars['Int'];\n  text: Scalars['String'];\n};\n\n\nexport type MutationCreateTeamArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddTeamMemberArgs = {\n  teamId: Scalars['Int'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  options: UserCredentials;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type ChannelResponse = {\n  __typename?: 'ChannelResponse';\n  errors?: Maybe<FieldError>;\n  channel?: Maybe<Channel>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type TeamResponse = {\n  __typename?: 'TeamResponse';\n  errors?: Maybe<FieldError>;\n  team?: Maybe<Team>;\n};\n\nexport type AddUserResponse = {\n  __typename?: 'AddUserResponse';\n  errors?: Maybe<FieldError>;\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<FieldError>;\n  user?: Maybe<Users>;\n};\n\nexport type UserCredentials = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  newChannelMessage: Message;\n};\n\n\nexport type SubscriptionNewChannelMessageArgs = {\n  channelId: Scalars['Int'];\n};\n\nexport type FragmentErrorFragment = (\n  { __typename?: 'FieldError' }\n  & Pick<FieldError, 'field' | 'message'>\n);\n\nexport type FragmentTeamFragment = (\n  { __typename?: 'Team' }\n  & Pick<Team, 'name'>\n);\n\nexport type FragmentTeamResponseFragment = (\n  { __typename?: 'TeamResponse' }\n  & { errors?: Maybe<(\n    { __typename?: 'FieldError' }\n    & FragmentErrorFragment\n  )>, team?: Maybe<(\n    { __typename?: 'Team' }\n    & FragmentTeamFragment\n  )> }\n);\n\nexport type FragmentUserFragment = (\n  { __typename?: 'Users' }\n  & Pick<Users, 'id' | 'username'>\n);\n\nexport type FragmentUserResponseFragment = (\n  { __typename?: 'UserResponse' }\n  & { errors?: Maybe<(\n    { __typename?: 'FieldError' }\n    & FragmentErrorFragment\n  )>, user?: Maybe<(\n    { __typename?: 'Users' }\n    & FragmentUserFragment\n  )> }\n);\n\nexport type AddTeamMemberMutationVariables = Exact<{\n  teamId: Scalars['Int'];\n  email: Scalars['String'];\n}>;\n\n\nexport type AddTeamMemberMutation = (\n  { __typename?: 'Mutation' }\n  & { addTeamMember?: Maybe<(\n    { __typename?: 'AddUserResponse' }\n    & { errors?: Maybe<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )> }\n  )> }\n);\n\nexport type CreateChannelMutationVariables = Exact<{\n  teamId: Scalars['Int'];\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateChannelMutation = (\n  { __typename?: 'Mutation' }\n  & { createChannel: (\n    { __typename?: 'ChannelResponse' }\n    & { channel?: Maybe<(\n      { __typename?: 'Channel' }\n      & Pick<Channel, 'id' | 'name' | 'public'>\n    )>, errors?: Maybe<(\n      { __typename?: 'FieldError' }\n      & FragmentErrorFragment\n    )> }\n  ) }\n);\n\nexport type CreateDirectMessageMutationVariables = Exact<{\n  text: Scalars['String'];\n  receiverId: Scalars['Int'];\n  teamId: Scalars['Int'];\n}>;\n\n\nexport type CreateDirectMessageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createDirectMessages'>\n);\n\nexport type CreateMessageMutationVariables = Exact<{\n  channelId: Scalars['Int'];\n  text: Scalars['String'];\n}>;\n\n\nexport type CreateMessageMutation = (\n  { __typename?: 'Mutation' }\n  & { createMessage: (\n    { __typename?: 'Message' }\n    & Pick<Message, 'id' | 'text'>\n  ) }\n);\n\nexport type CreateTeamMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { createTeam: (\n    { __typename?: 'TeamResponse' }\n    & FragmentTeamResponseFragment\n  ) }\n);\n\nexport type CreateUserMutationVariables = Exact<{\n  options: UserCredentials;\n}>;\n\n\nexport type CreateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { createUser: (\n    { __typename?: 'UserResponse' }\n    & FragmentUserResponseFragment\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  password: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { Login: (\n    { __typename?: 'UserResponse' }\n    & FragmentUserResponseFragment\n  ) }\n);\n\nexport type MessagesQueryVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type MessagesQuery = (\n  { __typename?: 'Query' }\n  & { Messages: Array<(\n    { __typename?: 'Message' }\n    & Pick<Message, 'id' | 'text' | 'createdAt'>\n    & { user: (\n      { __typename?: 'Users' }\n      & Pick<Users, 'username'>\n    ) }\n  )> }\n);\n\nexport type GetUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser?: Maybe<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'username'>\n    & { team: Array<(\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'admin'>\n      & { channels?: Maybe<Array<(\n        { __typename?: 'Channel' }\n        & Pick<Channel, 'id' | 'name' | 'public'>\n      )>> }\n    )> }\n  )> }\n);\n\nexport type AllUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllUserQuery = (\n  { __typename?: 'Query' }\n  & { allUser: Array<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id' | 'email'>\n  )> }\n);\n\nexport type DirectMessageQueryVariables = Exact<{\n  receiverId: Scalars['Int'];\n  teamId: Scalars['Int'];\n}>;\n\n\nexport type DirectMessageQuery = (\n  { __typename?: 'Query' }\n  & { DirectMessages: Array<(\n    { __typename?: 'DirectMessage' }\n    & Pick<DirectMessage, 'id' | 'text' | 'createdAt'>\n    & { sender: (\n      { __typename?: 'Users' }\n      & Pick<Users, 'username'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'Users' }\n    & Pick<Users, 'id'>\n  )> }\n);\n\nexport type NewChannelMessageSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type NewChannelMessageSubscription = (\n  { __typename?: 'Subscription' }\n  & { newChannelMessage: (\n    { __typename?: 'Message' }\n    & Pick<Message, 'id' | 'text' | 'createdAt'>\n    & { user: (\n      { __typename?: 'Users' }\n      & Pick<Users, 'username'>\n    ) }\n  ) }\n);\n\nexport const FragmentErrorFragmentDoc = gql`\n    fragment FragmentError on FieldError {\n  field\n  message\n}\n    `;\nexport const FragmentTeamFragmentDoc = gql`\n    fragment FragmentTeam on Team {\n  name\n}\n    `;\nexport const FragmentTeamResponseFragmentDoc = gql`\n    fragment FragmentTeamResponse on TeamResponse {\n  errors {\n    ...FragmentError\n  }\n  team {\n    ...FragmentTeam\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentTeamFragmentDoc}`;\nexport const FragmentUserFragmentDoc = gql`\n    fragment FragmentUser on Users {\n  id\n  username\n}\n    `;\nexport const FragmentUserResponseFragmentDoc = gql`\n    fragment FragmentUserResponse on UserResponse {\n  errors {\n    ...FragmentError\n  }\n  user {\n    ...FragmentUser\n  }\n}\n    ${FragmentErrorFragmentDoc}\n${FragmentUserFragmentDoc}`;\nexport const AddTeamMemberDocument = gql`\n    mutation AddTeamMember($teamId: Int!, $email: String!) {\n  addTeamMember(teamId: $teamId, email: $email) {\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\nexport type AddTeamMemberMutationFn = Apollo.MutationFunction<AddTeamMemberMutation, AddTeamMemberMutationVariables>;\n\n/**\n * __useAddTeamMemberMutation__\n *\n * To run a mutation, you first call `useAddTeamMemberMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTeamMemberMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTeamMemberMutation, { data, loading, error }] = useAddTeamMemberMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useAddTeamMemberMutation(baseOptions?: Apollo.MutationHookOptions<AddTeamMemberMutation, AddTeamMemberMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddTeamMemberMutation, AddTeamMemberMutationVariables>(AddTeamMemberDocument, options);\n      }\nexport type AddTeamMemberMutationHookResult = ReturnType<typeof useAddTeamMemberMutation>;\nexport type AddTeamMemberMutationResult = Apollo.MutationResult<AddTeamMemberMutation>;\nexport type AddTeamMemberMutationOptions = Apollo.BaseMutationOptions<AddTeamMemberMutation, AddTeamMemberMutationVariables>;\nexport const CreateChannelDocument = gql`\n    mutation CreateChannel($teamId: Int!, $name: String!) {\n  createChannel(teamId: $teamId, name: $name) {\n    channel {\n      id\n      name\n      public\n    }\n    errors {\n      ...FragmentError\n    }\n  }\n}\n    ${FragmentErrorFragmentDoc}`;\nexport type CreateChannelMutationFn = Apollo.MutationFunction<CreateChannelMutation, CreateChannelMutationVariables>;\n\n/**\n * __useCreateChannelMutation__\n *\n * To run a mutation, you first call `useCreateChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createChannelMutation, { data, loading, error }] = useCreateChannelMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateChannelMutation(baseOptions?: Apollo.MutationHookOptions<CreateChannelMutation, CreateChannelMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateChannelMutation, CreateChannelMutationVariables>(CreateChannelDocument, options);\n      }\nexport type CreateChannelMutationHookResult = ReturnType<typeof useCreateChannelMutation>;\nexport type CreateChannelMutationResult = Apollo.MutationResult<CreateChannelMutation>;\nexport type CreateChannelMutationOptions = Apollo.BaseMutationOptions<CreateChannelMutation, CreateChannelMutationVariables>;\nexport const CreateDirectMessageDocument = gql`\n    mutation CreateDirectMessage($text: String!, $receiverId: Int!, $teamId: Int!) {\n  createDirectMessages(text: $text, receiverId: $receiverId, teamId: $teamId)\n}\n    `;\nexport type CreateDirectMessageMutationFn = Apollo.MutationFunction<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>;\n\n/**\n * __useCreateDirectMessageMutation__\n *\n * To run a mutation, you first call `useCreateDirectMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateDirectMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createDirectMessageMutation, { data, loading, error }] = useCreateDirectMessageMutation({\n *   variables: {\n *      text: // value for 'text'\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useCreateDirectMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>(CreateDirectMessageDocument, options);\n      }\nexport type CreateDirectMessageMutationHookResult = ReturnType<typeof useCreateDirectMessageMutation>;\nexport type CreateDirectMessageMutationResult = Apollo.MutationResult<CreateDirectMessageMutation>;\nexport type CreateDirectMessageMutationOptions = Apollo.BaseMutationOptions<CreateDirectMessageMutation, CreateDirectMessageMutationVariables>;\nexport const CreateMessageDocument = gql`\n    mutation createMessage($channelId: Int!, $text: String!) {\n  createMessage(channelId: $channelId, text: $text) {\n    id\n    text\n  }\n}\n    `;\nexport type CreateMessageMutationFn = Apollo.MutationFunction<CreateMessageMutation, CreateMessageMutationVariables>;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateMessageMutation, CreateMessageMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateMessageMutation, CreateMessageMutationVariables>(CreateMessageDocument, options);\n      }\nexport type CreateMessageMutationHookResult = ReturnType<typeof useCreateMessageMutation>;\nexport type CreateMessageMutationResult = Apollo.MutationResult<CreateMessageMutation>;\nexport type CreateMessageMutationOptions = Apollo.BaseMutationOptions<CreateMessageMutation, CreateMessageMutationVariables>;\nexport const CreateTeamDocument = gql`\n    mutation CreateTeam($name: String!) {\n  createTeam(name: $name) {\n    ...FragmentTeamResponse\n  }\n}\n    ${FragmentTeamResponseFragmentDoc}`;\nexport type CreateTeamMutationFn = Apollo.MutationFunction<CreateTeamMutation, CreateTeamMutationVariables>;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions?: Apollo.MutationHookOptions<CreateTeamMutation, CreateTeamMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateTeamMutation, CreateTeamMutationVariables>(CreateTeamDocument, options);\n      }\nexport type CreateTeamMutationHookResult = ReturnType<typeof useCreateTeamMutation>;\nexport type CreateTeamMutationResult = Apollo.MutationResult<CreateTeamMutation>;\nexport type CreateTeamMutationOptions = Apollo.BaseMutationOptions<CreateTeamMutation, CreateTeamMutationVariables>;\nexport const CreateUserDocument = gql`\n    mutation createUser($options: UserCredentials!) {\n  createUser(options: $options) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);\n      }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($password: String!, $email: String!) {\n  Login(password: $password, email: $email) {\n    ...FragmentUserResponse\n  }\n}\n    ${FragmentUserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      password: // value for 'password'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MessagesDocument = gql`\n    query Messages($channelId: Int!) {\n  Messages(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useMessagesQuery(baseOptions: Apollo.QueryHookOptions<MessagesQuery, MessagesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MessagesQuery, MessagesQueryVariables>(MessagesDocument, options);\n      }\nexport function useMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MessagesQuery, MessagesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MessagesQuery, MessagesQueryVariables>(MessagesDocument, options);\n        }\nexport type MessagesQueryHookResult = ReturnType<typeof useMessagesQuery>;\nexport type MessagesLazyQueryHookResult = ReturnType<typeof useMessagesLazyQuery>;\nexport type MessagesQueryResult = Apollo.QueryResult<MessagesQuery, MessagesQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser {\n  getUser {\n    id\n    username\n    team {\n      id\n      name\n      admin\n      channels {\n        id\n        name\n        public\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n      }\nexport function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const AllUserDocument = gql`\n    query allUser {\n  allUser {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useAllUserQuery__\n *\n * To run a query within a React component, call `useAllUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllUserQuery(baseOptions?: Apollo.QueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n      }\nexport function useAllUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllUserQuery, AllUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AllUserQuery, AllUserQueryVariables>(AllUserDocument, options);\n        }\nexport type AllUserQueryHookResult = ReturnType<typeof useAllUserQuery>;\nexport type AllUserLazyQueryHookResult = ReturnType<typeof useAllUserLazyQuery>;\nexport type AllUserQueryResult = Apollo.QueryResult<AllUserQuery, AllUserQueryVariables>;\nexport const DirectMessageDocument = gql`\n    query DirectMessage($receiverId: Int!, $teamId: Int!) {\n  DirectMessages(receiverId: $receiverId, teamId: $teamId) {\n    id\n    text\n    createdAt\n    sender {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useDirectMessageQuery__\n *\n * To run a query within a React component, call `useDirectMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useDirectMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDirectMessageQuery({\n *   variables: {\n *      receiverId: // value for 'receiverId'\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useDirectMessageQuery(baseOptions: Apollo.QueryHookOptions<DirectMessageQuery, DirectMessageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DirectMessageQuery, DirectMessageQueryVariables>(DirectMessageDocument, options);\n      }\nexport function useDirectMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DirectMessageQuery, DirectMessageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DirectMessageQuery, DirectMessageQueryVariables>(DirectMessageDocument, options);\n        }\nexport type DirectMessageQueryHookResult = ReturnType<typeof useDirectMessageQuery>;\nexport type DirectMessageLazyQueryHookResult = ReturnType<typeof useDirectMessageLazyQuery>;\nexport type DirectMessageQueryResult = Apollo.QueryResult<DirectMessageQuery, DirectMessageQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const NewChannelMessageDocument = gql`\n    subscription NewChannelMessage($channelId: Int!) {\n  newChannelMessage(channelId: $channelId) {\n    id\n    text\n    user {\n      username\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useNewChannelMessageSubscription__\n *\n * To run a query within a React component, call `useNewChannelMessageSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNewChannelMessageSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNewChannelMessageSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useNewChannelMessageSubscription(baseOptions: Apollo.SubscriptionHookOptions<NewChannelMessageSubscription, NewChannelMessageSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<NewChannelMessageSubscription, NewChannelMessageSubscriptionVariables>(NewChannelMessageDocument, options);\n      }\nexport type NewChannelMessageSubscriptionHookResult = ReturnType<typeof useNewChannelMessageSubscription>;\nexport type NewChannelMessageSubscriptionResult = Apollo.SubscriptionResult<NewChannelMessageSubscription>;"]},"metadata":{},"sourceType":"module"}