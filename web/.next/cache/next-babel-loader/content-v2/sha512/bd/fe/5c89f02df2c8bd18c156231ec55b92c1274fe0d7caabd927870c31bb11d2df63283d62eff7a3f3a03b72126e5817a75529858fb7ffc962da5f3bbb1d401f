{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx\";\nimport React from 'react';\nimport { Channel } from '../components/channel';\nimport { Team } from '../components/team';\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql';\nexport const Sidebar = ({\n  currentTeamId\n}) => {\n  const {\n    data,\n    loading\n  } = useAllTeamsQuery();\n  const {\n    data: user,\n    loading: userLoad\n  } = useMeQuery(); // the graphql queries and mutations should be at the top\n\n  console.log(data.AllTeams);\n\n  if (loading) {\n    return null;\n  }\n\n  let currentTeam;\n\n  if (typeof currentTeamId === 'string') {\n    let teamId = parseInt(currentTeamId);\n    data.AllTeams.find(u => u.id === teamId);\n  }\n\n  if (userLoad) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Team, {\n      gridColumn: \"1\",\n      gridRow: \"1 / 4\",\n      bg: \"#362234\",\n      color: \"#958993\",\n      teams: data.AllTeams.map(t => ({\n        id: t.id,\n        name: t.name.charAt(0).toUpperCase()\n      })) // map return a new array\n      ,\n      children: \"Teams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Channel, {\n      gridColumn: \"2\",\n      gridRow: \"1 / 4\",\n      bg: \"#4e3a4c\",\n      color: \"#958993\",\n      teamName: currentTeam.name,\n      username: user.me.username,\n      channels: currentTeam.channels,\n      users: null,\n      children: \"Channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/container/Sidebar.tsx"],"names":["React","Channel","Team","useAllTeamsQuery","useMeQuery","Sidebar","currentTeamId","data","loading","user","userLoad","console","log","AllTeams","currentTeam","teamId","parseInt","find","u","id","map","t","name","charAt","toUpperCase","me","username","channels"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,sBAA7C;AAKA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AACpE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,gBAAgB,EAA1C;AACA,QAAM;AAAEI,IAAAA,IAAI,EAAEE,IAAR;AAAcD,IAAAA,OAAO,EAAEE;AAAvB,MAAoCN,UAAU,EAApD,CAFoE,CAGpE;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,QAAjB;;AACA,MAAIL,OAAJ,EAAa;AACX,WAAO,IAAP;AACD;;AACD,MAAIM,WAAJ;;AACA,MAAI,OAAOR,aAAP,KAAyB,QAA7B,EAAuC;AACrC,QAAIS,MAAM,GAAGC,QAAQ,CAACV,aAAD,CAArB;AACAC,IAAAA,IAAI,CAACM,QAAL,CAAcI,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,MAAnC;AACD;;AACD,MAAIL,QAAJ,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,KAAK,EAAEH,IAAI,CAACM,QAAL,CAAcO,GAAd,CAAmBC,CAAD,KAAQ;AAC/BF,QAAAA,EAAE,EAAEE,CAAC,CAACF,EADyB;AAE/BG,QAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOC,MAAP,CAAc,CAAd,EAAiBC,WAAjB;AAFyB,OAAR,CAAlB,CALT,CAQO;AARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE,QAAC,OAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,EAAE,EAAC,SAHL;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAEV,WAAW,CAACQ,IALxB;AAME,MAAA,QAAQ,EAAEb,IAAI,CAACgB,EAAL,CAAQC,QANpB;AAOE,MAAA,QAAQ,EAAEZ,WAAW,CAACa,QAPxB;AAQE,MAAA,KAAK,EAAE,IART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA,kBADF;AA4BD,CA5CM","sourcesContent":["import React from 'react'\nimport { Channel } from '../components/channel'\nimport { Team } from '../components/team'\nimport { useAllTeamsQuery, useMeQuery } from '../generated/graphql'\n\ninterface SidebarProps {\n  currentTeamId: string | string[]\n}\nexport const Sidebar: React.FC<SidebarProps> = ({ currentTeamId }) => {\n  const { data, loading } = useAllTeamsQuery()\n  const { data: user, loading: userLoad } = useMeQuery()\n  // the graphql queries and mutations should be at the top\n  console.log(data.AllTeams)\n  if (loading) {\n    return null\n  }\n  let currentTeam\n  if (typeof currentTeamId === 'string') {\n    let teamId = parseInt(currentTeamId)\n    data.AllTeams.find((u) => u.id === teamId)\n  }\n  if (userLoad) {\n    return null\n  }\n  return (\n    <>\n      <Team\n        gridColumn=\"1\"\n        gridRow=\"1 / 4\"\n        bg=\"#362234\"\n        color=\"#958993\"\n        teams={data.AllTeams.map((t) => ({\n          id: t.id,\n          name: t.name.charAt(0).toUpperCase(),\n        }))} // map return a new array\n      >\n        Teams\n      </Team>\n      <Channel\n        gridColumn=\"2\"\n        gridRow=\"1 / 4\"\n        bg=\"#4e3a4c\"\n        color=\"#958993\"\n        teamName={currentTeam.name}\n        username={user.me.username}\n        channels={currentTeam.channels}\n        users={null}\n      >\n        Channels\n      </Channel>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}