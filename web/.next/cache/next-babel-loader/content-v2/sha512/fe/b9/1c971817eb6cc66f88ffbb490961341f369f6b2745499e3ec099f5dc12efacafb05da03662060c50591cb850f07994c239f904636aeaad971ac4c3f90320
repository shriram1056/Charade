{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/multipleUser.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { CUIAutoComplete } from 'chakra-ui-autocomplete';\nimport React from 'react';\nexport var MultipleUser = function MultipleUser(_ref) {\n  _s();\n\n  var data = _ref.data,\n      loading = _ref.loading,\n      values = _ref.values,\n      currentUserId = _ref.currentUserId;\n\n  if (loading) {\n    return null;\n  }\n\n  var getTeamMembers = data.getTeamMembers;\n  var testData = getTeamMembers.map(function (t) {\n    return {\n      value: t.id,\n      label: t.username\n    };\n  });\n  var actualData = testData.filter(function (t) {\n    return t.value !== currentUserId;\n  });\n\n  var _React$useState = React.useState(actualData),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pickerItems = _React$useState2[0],\n      _ = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedItems = _React$useState4[0],\n      setSelectedItems = _React$useState4[1];\n\n  var handleSelectedItemsChange = function handleSelectedItemsChange(selectedItems) {\n    if (selectedItems) {\n      setSelectedItems(selectedItems);\n      values('members', selectedItems);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CUIAutoComplete, {\n    label: \"add channel members\",\n    placeholder: \"add member\",\n    items: pickerItems,\n    selectedItems: selectedItems,\n    onSelectedItemsChange: function onSelectedItemsChange(changes) {\n      handleSelectedItemsChange(changes.selectedItems);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MultipleUser, \"OaecjkRAuUBNxM5vAkyNZDuVo0o=\");\n\n_c = MultipleUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleUser\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/multipleUser.tsx"],"names":["CUIAutoComplete","React","MultipleUser","data","loading","values","currentUserId","getTeamMembers","testData","map","t","value","id","label","username","actualData","filter","useState","pickerItems","_","selectedItems","setSelectedItems","handleSelectedItemsChange","changes"],"mappings":";;;;;;;AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAaA,OAAO,IAAMC,YAAyC,GAAG,SAA5CA,YAA4C,OAKnD;AAAA;;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,MAHJC,OAGI,QAHJA,OAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,MADJC,aACI,QADJA,aACI;;AACJ,MAAIF,OAAJ,EAAa;AACX,WAAO,IAAP;AACD;;AAHG,MAIIG,cAJJ,GAIuBJ,IAJvB,CAIII,cAJJ;AAKJ,MAAMC,QAAQ,GAAGD,cAAc,CAACE,GAAf,CAAmB,UAACC,CAAD,EAAO;AACzC,WAAO;AAAEC,MAAAA,KAAK,EAAED,CAAC,CAACE,EAAX;AAAeC,MAAAA,KAAK,EAAEH,CAAC,CAACI;AAAxB,KAAP;AACD,GAFgB,CAAjB;AAGA,MAAMC,UAAU,GAAGP,QAAQ,CAACQ,MAAT,CAAgB,UAACN,CAAD;AAAA,WAAOA,CAAC,CAACC,KAAF,KAAYL,aAAnB;AAAA,GAAhB,CAAnB;;AARI,wBAUqBL,KAAK,CAACgB,QAAN,CAAeF,UAAf,CAVrB;AAAA;AAAA,MAUGG,WAVH;AAAA,MAUgBC,CAVhB;;AAAA,yBAWsClB,KAAK,CAACgB,QAAN,CAAuB,EAAvB,CAXtC;AAAA;AAAA,MAWGG,aAXH;AAAA,MAWkBC,gBAXlB;;AAaJ,MAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACF,aAAD,EAA4B;AAC5D,QAAIA,aAAJ,EAAmB;AACjBC,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAf,MAAAA,MAAM,CAAC,SAAD,EAAYe,aAAZ,CAAN;AACD;AACF,GALD;;AAOA,sBACE,QAAC,eAAD;AACE,IAAA,KAAK,EAAC,qBADR;AAEE,IAAA,WAAW,EAAC,YAFd;AAGE,IAAA,KAAK,EAAEF,WAHT;AAIE,IAAA,aAAa,EAAEE,aAJjB;AAKE,IAAA,qBAAqB,EAAE,+BAACG,OAAD,EAAa;AAClCD,MAAAA,yBAAyB,CAACC,OAAO,CAACH,aAAT,CAAzB;AACD;AAPH;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CApCM;;GAAMlB,Y;;KAAAA,Y","sourcesContent":["import { CUIAutoComplete } from 'chakra-ui-autocomplete'\nimport React from 'react'\ninterface MultipleUserProps {\n  data: any\n  loading: boolean\n  values: (field: string, value: any, shouldValidate?: boolean) => void\n  currentUserId: number\n}\n\nexport interface Item {\n  label: string\n  value: string\n}\n\nexport const MultipleUser: React.FC<MultipleUserProps> = ({\n  data,\n  loading,\n  values,\n  currentUserId,\n}) => {\n  if (loading) {\n    return null\n  }\n  const { getTeamMembers } = data\n  const testData = getTeamMembers.map((t) => {\n    return { value: t.id, label: t.username }\n  })\n  const actualData = testData.filter((t) => t.value !== currentUserId)\n\n  const [pickerItems, _] = React.useState(actualData)\n  const [selectedItems, setSelectedItems] = React.useState<Item[]>([])\n\n  const handleSelectedItemsChange = (selectedItems?: Item[]) => {\n    if (selectedItems) {\n      setSelectedItems(selectedItems)\n      values('members', selectedItems)\n    }\n  }\n\n  return (\n    <CUIAutoComplete\n      label=\"add channel members\"\n      placeholder=\"add member\"\n      items={pickerItems}\n      selectedItems={selectedItems}\n      onSelectedItemsChange={(changes) => {\n        handleSelectedItemsChange(changes.selectedItems)\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}