{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Text } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport { NewChannelMessageDocument, useMessagesQuery } from '../generated/graphql';\n\nconst Chats = ({\n  message\n}) => {\n  const {\n    url,\n    text,\n    fileType\n  } = message;\n\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 14\n      }, this);\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return /*#__PURE__*/_jsxDEV(RenderText, {\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 14\n      }, this);\n    } else if (fileType.startsWith('audio/')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: url,\n            type: fileType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\n\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message = ({\n  channelId\n}) => {\n  var _data$Messages2;\n\n  const {\n    data,\n    loading,\n    subscribeToMore,\n    fetchMore,\n    previousData\n  } = useMessagesQuery({\n    variables: {\n      channelId\n    },\n    fetchPolicy: 'network-only',\n    // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n    notifyOnNetworkStatusChange: true // to update loading after the initial fetch\n\n  });\n  const {\n    0: scroller,\n    1: setScroll\n  } = useState();\n  useEffect(() => {\n    var _data$Messages;\n\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: {\n        channelId\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) {\n          return prev;\n        } // @ts-ignore\n\n\n        const {\n          newChannelMessage\n        } = subscriptionData.data; // prev is a data with hasMore, incoming dont have that\n\n        let newData = _objectSpread(_objectSpread({}, prev), {}, {\n          Messages: _objectSpread(_objectSpread({}, prev.Messages), {}, {\n            Messages: [newChannelMessage, ...prev.Messages.Messages]\n          })\n        });\n\n        return newData;\n      }\n    });\n\n    if (scroller && data !== null && data !== void 0 && (_data$Messages = data.Messages) !== null && _data$Messages !== void 0 && _data$Messages.Messages) {\n      const heightBeforeRender = scroller.scrollHeight; // wait for 70 items to render\n\n      console.log('dfsdf');\n      setTimeout(() => {\n        scroller.scrollTop = scroller.scrollHeight - heightBeforeRender;\n      }, 120);\n    }\n\n    if (unsubscribe) {\n      return () => unsubscribe(); // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId, scroller, data === null || data === void 0 ? void 0 : (_data$Messages2 = data.Messages) === null || _data$Messages2 === void 0 ? void 0 : _data$Messages2.Messages]); // make new subscription if channelId is changed\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    pl: 3,\n    pt: 4,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      children: data.Messages.Messages.slice() // message is immuatble. so we slice\n      .reverse().map((u, i) => /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          fontSize: \"19px\",\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n            ml: 2,\n            display: \"inline\",\n            fontSize: \"13px\",\n            fontFamily: \"sans-serif\",\n            color: \"#958993\",\n            children: u.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Chats, {\n          message: u\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), i === data.Messages.Messages.length - 25 && data.Messages.hasMore ? /*#__PURE__*/_jsxDEV(Waypoint, {\n          onEnter: () => {\n            console.log(i);\n            return fetchMore({\n              variables: {\n                channelId,\n                cursor: data.Messages.Messages[data.Messages.Messages.length - 1].createdAt\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this) : null]\n      }, `message-${u.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Text","React","useEffect","useState","Waypoint","NewChannelMessageDocument","useMessagesQuery","Chats","message","url","text","fileType","startsWith","Message","channelId","data","loading","subscribeToMore","fetchMore","previousData","variables","fetchPolicy","notifyOnNetworkStatusChange","scroller","setScroll","unsubscribe","document","updateQuery","prev","subscriptionData","newChannelMessage","newData","Messages","heightBeforeRender","scrollHeight","console","log","setTimeout","scrollTop","slice","reverse","map","u","i","user","username","createdAt","length","hasMore","cursor","id"],"mappings":"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","sourcesContent":["import { Box, Text } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport { Waypoint } from 'react-waypoint'\nimport {\n  NewChannelMessageDocument,\n  useMessagesQuery,\n} from '../generated/graphql'\n\nconst Chats = ({ message }) => {\n  const { url, text, fileType } = message\n  if (url) {\n    if (fileType.startsWith('image/')) {\n      return <img src={url} alt=\"\" />\n    } else if (fileType === 'text/plain') {\n      //@ts-ignore\n      return <RenderText url={url} />\n    } else if (fileType.startsWith('audio/')) {\n      return (\n        <div>\n          <audio controls>\n            <source src={url} type={fileType} />\n          </audio>\n        </div>\n      )\n    }\n  }\n  return <Box>{text}</Box>\n}\n\ninterface MessageProps {\n  channelId: number\n}\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const {\n    data,\n    loading,\n    subscribeToMore,\n    fetchMore,\n    previousData,\n  } = useMessagesQuery({\n    variables: { channelId },\n    fetchPolicy: 'network-only', // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n    notifyOnNetworkStatusChange: true, // to update loading after the initial fetch\n  })\n\n  const [scroller, setScroll] = useState<HTMLDivElement>()\n\n  useEffect(() => {\n    // this starts the subscription\n\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: { channelId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        // @ts-ignore\n        const { newChannelMessage } = subscriptionData.data\n\n        // prev is a data with hasMore, incoming dont have that\n        let newData = {\n          ...prev,\n          Messages: {\n            ...prev.Messages,\n            Messages: [newChannelMessage, ...prev.Messages.Messages],\n          },\n        }\n        return newData\n      },\n    })\n    if (scroller && data?.Messages?.Messages) {\n      const heightBeforeRender = scroller.scrollHeight\n      // wait for 70 items to render\n      console.log('dfsdf')\n      setTimeout(() => {\n        scroller.scrollTop = scroller.scrollHeight - heightBeforeRender\n      }, 120)\n    }\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId, scroller, data?.Messages?.Messages]) // make new subscription if channelId is changed\n\n  if (!data) {\n    return <Box>loading</Box>\n  }\n\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n      pl={3}\n      pt={4}\n    >\n      {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n      <Box display=\"flex\" flexDirection=\"column\">\n        {data.Messages.Messages.slice() // message is immuatble. so we slice\n          .reverse()\n          .map((u, i) => (\n            <Box mb={4} key={`message-${u.id}`}>\n              <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n                {u.user.username}\n                <Text\n                  ml={2}\n                  display=\"inline\"\n                  fontSize=\"13px\"\n                  fontFamily=\"sans-serif\"\n                  color=\"#958993\"\n                >\n                  {u.createdAt}\n                </Text>\n              </Box>\n              <Chats message={u} />\n              {i === data.Messages.Messages.length - 25 &&\n              data.Messages.hasMore ? (\n                <Waypoint\n                  onEnter={() => {\n                    console.log(i)\n                    return fetchMore({\n                      variables: {\n                        channelId,\n                        cursor:\n                          data.Messages.Messages[\n                            data.Messages.Messages.length - 1\n                          ].createdAt,\n                      },\n                    })\n                  }}\n                />\n              ) : null}\n            </Box>\n          ))}\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}