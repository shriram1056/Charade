{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channel.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, ListItem, UnorderedList } from '@chakra-ui/react';\nimport React from 'react';\n\nconst channel = ({\n  id,\n  name\n}) => /*#__PURE__*/_jsxDEV(ListItem, {\n  children: name\n}, `channel-${id}`, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this);\n\nconst user = ({\n  id,\n  username\n}) => /*#__PURE__*/_jsxDEV(ListItem, {\n  children: username\n}, `user-${id}`, false, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 3\n}, this);\n\nexport const Channel = (_ref) => {\n  let {\n    teamName,\n    channels,\n    users,\n    username\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"teamName\", \"channels\", \"users\", \"username\"]);\n\n  return /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [teamName, username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(UnorderedList, {\n        children: /*#__PURE__*/_jsxDEV(ListItem, {\n          children: channels.map(channel)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(UnorderedList, {\n        children: /*#__PURE__*/_jsxDEV(ListItem, {\n          children: users.map(user)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channel.tsx"],"names":["Box","ListItem","UnorderedList","React","channel","id","name","user","username","Channel","teamName","channels","users","props","map"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AASA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,kBACd,QAAC,QAAD;AAAA,YAAiCA;AAAjC,GAAgB,WAAUD,EAAG,EAA7B;AAAA;AAAA;AAAA;AAAA,QADF;;AAGA,MAAME,IAAI,GAAG,CAAC;AAAEF,EAAAA,EAAF;AAAMG,EAAAA;AAAN,CAAD,kBACX,QAAC,QAAD;AAAA,YAA8BA;AAA9B,GAAgB,QAAOH,EAAG,EAA1B;AAAA;AAAA;AAAA;AAAA,QADF;;AAGA,OAAO,MAAMI,OAA+B,GAAG,UAMzC;AAAA,MAN0C;AAC9CC,IAAAA,QAD8C;AAE9CC,IAAAA,QAF8C;AAG9CC,IAAAA,KAH8C;AAI9CJ,IAAAA;AAJ8C,GAM1C;AAAA,MADDK,KACC;;AACJ,sBACE,QAAC,GAAD,kCAASA,KAAT;AAAA,4BACE,QAAC,GAAD;AAAA,iBACGH,QADH,EAEGF,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,GAAD;AAAA,6BACE,QAAC,aAAD;AAAA,+BACE,QAAC,QAAD;AAAA,oBAAWG,QAAQ,CAACG,GAAT,CAAaV,OAAb;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF,eAUE,QAAC,GAAD;AAAA,6BACE,QAAC,aAAD;AAAA,+BACE,QAAC,QAAD;AAAA,oBAAWQ,KAAK,CAACE,GAAN,CAAUP,IAAV;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzBM","sourcesContent":["import { Box, ListItem, UnorderedList } from '@chakra-ui/react'\nimport React from 'react'\nimport { Channel as Channels, Users } from '../generated/graphql' // name conflict with channel page\n\ninterface ChannelProps {\n  teamName: string\n  channels: Channels[]\n  users: Users[]\n  username: string\n}\nconst channel = ({ id, name }) => (\n  <ListItem key={`channel-${id}`}>{name}</ListItem>\n)\nconst user = ({ id, username }) => (\n  <ListItem key={`user-${id}`}>{username}</ListItem>\n)\nexport const Channel: React.FC<ChannelProps> = ({\n  teamName,\n  channels,\n  users,\n  username,\n  ...props\n}) => {\n  return (\n    <Box {...props}>\n      <Box>\n        {teamName}\n        {username}\n      </Box>\n      <Box>\n        <UnorderedList>\n          <ListItem>{channels.map(channel)}</ListItem>\n        </UnorderedList>\n      </Box>\n      <Box>\n        <UnorderedList>\n          <ListItem>{users.map(user)}</ListItem>\n        </UnorderedList>\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}