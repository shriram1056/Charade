{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { createUploadLink } from 'apollo-upload-client';\nimport cookieCutter from 'js-cookie';\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n// subscription connect as soon as i load the page.so, lazy true only reconnect it on subscription trigger\n//but we also reconnect on login\nexport const subscriptionClient = false ? new SubscriptionClient('ws://localhost:4001/subscriptions', {\n  // automatic reconnect in case of connection error\n  reconnect: true,\n  // THE MOST IMPORTANT THING, DON'T EVER CHANGE THE VALUE OF CONNECTION PARAMS TO PLAIN OBJECT, USE FUNCTION\n  //FUNCTION FETCH VALUES EVERYTIME INSTEAD OF READING NOT UPDATED COOKIE VALUE IN VARIABLES\n  connectionParams: () => ({\n    //object that will be available as first argument of onConnect (in server side), if passed a function - it will call it and send the return value\n    authToken: {\n      Rtoken: cookieCutter.get('refresh-token'),\n      Atoken: cookieCutter.get('access-token')\n    }\n  }),\n  lazy: true\n}) : null; // ctx can be undefined in ssr:false, so we need optional\n\nconst createClient = ctx => // ctx for forwarding cookie in ssr\n{\n  var _ctx$req;\n\n  const httpLink = new createUploadLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include',\n    //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    }\n  }); //WebSocket is a property that exists only in the browser\n\n  const wsLink = false ? new WebSocketLink(subscriptionClient) : null;\n  const splitLink = false ? split(({\n    query\n  }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, wsLink, httpLink) : httpLink; // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new ApolloClient({\n    link: splitLink,\n    //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            DirectMessages: {\n              keyArgs: [],\n\n              //// cache based on args of query\n              merge(existing, incoming) {\n                var _existing$Messages$, _incoming$Messages$, _existing$Messages$2, _incoming$;\n\n                if (!existing) {\n                  //there won't be any cache on the first query\n                  return incoming;\n                }\n\n                console.log('fuck', existing, 'ddf', incoming);\n\n                if (((_existing$Messages$ = existing.Messages[0]) === null || _existing$Messages$ === void 0 ? void 0 : _existing$Messages$.__ref) === ((_incoming$Messages$ = incoming.Messages[0]) === null || _incoming$Messages$ === void 0 ? void 0 : _incoming$Messages$.__ref)) {\n                  return incoming; // when the useMessagesQuery make an another request due to fetch-policy\n                  // fetch policy make sure we don't read from cache\n                }\n\n                if (((_existing$Messages$2 = existing.Messages[0]) === null || _existing$Messages$2 === void 0 ? void 0 : _existing$Messages$2.__ref) === ((_incoming$ = incoming[1]) === null || _incoming$ === void 0 ? void 0 : _incoming$.__ref)) {\n                  return incoming; // when subscription updates cache.incoming updated cache\n                }\n\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  Messages: [...existing.Messages, ...incoming.Messages]\n                }); //in the first query existing will be empty\n              }\n\n            },\n            Messages: {\n              keyArgs: [],\n\n              //// cache based on args of query\n              merge(existing, incoming) {\n                var _existing$Messages$3, _incoming$Messages$2, _existing$Messages$4, _incoming$Messages$3;\n\n                if (!existing) {\n                  //there won't be any cache on the first query\n                  return incoming;\n                }\n\n                if (((_existing$Messages$3 = existing.Messages[0]) === null || _existing$Messages$3 === void 0 ? void 0 : _existing$Messages$3.__ref) === ((_incoming$Messages$2 = incoming.Messages[0]) === null || _incoming$Messages$2 === void 0 ? void 0 : _incoming$Messages$2.__ref)) {\n                  return incoming; // when the useMessagesQuery make an another request due to fetch-policy\n                  // fetch policy make sure we don't read from cache\n                }\n\n                if (((_existing$Messages$4 = existing.Messages[0]) === null || _existing$Messages$4 === void 0 ? void 0 : _existing$Messages$4.__ref) === ((_incoming$Messages$3 = incoming.Messages[1]) === null || _incoming$Messages$3 === void 0 ? void 0 : _incoming$Messages$3.__ref)) {\n                  return incoming; // when subscription updates cache.incoming updated cache\n                } //  console.log('fuck', existing, 'ddf', incoming)\n\n\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  Messages: [...existing.Messages, ...incoming.Messages]\n                }); //in the first query existing will be empty\n              }\n\n            }\n          }\n        }\n      }\n    }),\n    ssrMode: true // Disables forceFetch on the server (so queries are only run once)\n\n  });\n};\n\nexport const withApollo = createWithApollo(createClient); //createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/utils/withApollo.ts"],"names":["ApolloClient","InMemoryCache","split","WebSocketLink","getMainDefinition","createUploadLink","cookieCutter","withApollo","createWithApollo","SubscriptionClient","subscriptionClient","reconnect","connectionParams","authToken","Rtoken","get","Atoken","lazy","createClient","ctx","httpLink","uri","credentials","headers","cookie","req","undefined","wsLink","splitLink","query","definition","kind","operation","link","cache","typePolicies","Query","fields","DirectMessages","keyArgs","merge","existing","incoming","console","log","Messages","__ref","ssrMode"],"mappings":"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","sourcesContent":["import { ApolloClient, InMemoryCache, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { createUploadLink } from 'apollo-upload-client'\nimport cookieCutter from 'js-cookie'\nimport { NextPageContext } from 'next'\n// this import is for forwarding the cookie\nimport { withApollo as createWithApollo } from 'next-apollo'\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\nimport { PaginatedMessages } from '../generated/graphql'\n\n// subscription connect as soon as i load the page.so, lazy true only reconnect it on subscription trigger\n//but we also reconnect on login\nexport const subscriptionClient =\n  typeof window !== 'undefined'\n    ? new SubscriptionClient('ws://localhost:4001/subscriptions', {\n        // automatic reconnect in case of connection error\n        reconnect: true,\n        // THE MOST IMPORTANT THING, DON'T EVER CHANGE THE VALUE OF CONNECTION PARAMS TO PLAIN OBJECT, USE FUNCTION\n        //FUNCTION FETCH VALUES EVERYTIME INSTEAD OF READING NOT UPDATED COOKIE VALUE IN VARIABLES\n        connectionParams: () => ({\n          //object that will be available as first argument of onConnect (in server side), if passed a function - it will call it and send the return value\n          authToken: {\n            Rtoken: cookieCutter.get('refresh-token'),\n            Atoken: cookieCutter.get('access-token'),\n          },\n        }),\n        lazy: true,\n      })\n    : null\n\n// ctx can be undefined in ssr:false, so we need optional\nconst createClient = (\n  ctx?: NextPageContext // ctx for forwarding cookie in ssr\n) => {\n  const httpLink = new createUploadLink({\n    uri: 'http://localhost:4001/graphql',\n    credentials: 'include', //Apollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client.also, set credentials to true in cors package in express\n    headers: {\n      cookie:\n        (typeof window === 'undefined'\n          ? ctx?.req?.headers.cookie\n          : undefined) || '',\n    },\n  })\n\n  //WebSocket is a property that exists only in the browser\n  const wsLink =\n    typeof window !== 'undefined' ? new WebSocketLink(subscriptionClient) : null\n  const splitLink =\n    typeof window !== 'undefined'\n      ? split(\n          ({ query }) => {\n            const definition = getMainDefinition(query)\n            return (\n              definition.kind === 'OperationDefinition' &&\n              definition.operation === 'subscription'\n            )\n          },\n          wsLink,\n          httpLink\n        )\n      : httpLink // this should be http link becuase in server, we use http and in client we use both http and sockets\n\n  return new ApolloClient({\n    link: splitLink, //link option, it takes precedence over the uri option (uri sets up a default HTTP link chain using the provided URL).\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            DirectMessages: {\n              keyArgs: [], //// cache based on args of query\n              merge(existing: any | undefined, incoming: any): any[] | null {\n                if (!existing) {\n                  //there won't be any cache on the first query\n                  return incoming\n                }\n                console.log('fuck', existing, 'ddf', incoming)\n                if (\n                  existing.Messages[0]?.__ref === incoming.Messages[0]?.__ref\n                ) {\n                  return incoming\n                  // when the useMessagesQuery make an another request due to fetch-policy\n                  // fetch policy make sure we don't read from cache\n                }\n                if (existing.Messages[0]?.__ref === incoming[1]?.__ref) {\n                  return incoming\n                  // when subscription updates cache.incoming updated cache\n                }\n                return {\n                  ...incoming,\n                  Messages: [...existing.Messages, ...incoming.Messages],\n                }\n                //in the first query existing will be empty\n              },\n            },\n            Messages: {\n              keyArgs: [], //// cache based on args of query\n              merge(\n                existing: any | undefined,\n                incoming: any\n              ): PaginatedMessages | null {\n                if (!existing) {\n                  //there won't be any cache on the first query\n                  return incoming\n                }\n                if (\n                  existing.Messages[0]?.__ref === incoming.Messages[0]?.__ref\n                ) {\n                  return incoming\n                  // when the useMessagesQuery make an another request due to fetch-policy\n                  // fetch policy make sure we don't read from cache\n                }\n                if (\n                  existing.Messages[0]?.__ref === incoming.Messages[1]?.__ref\n                ) {\n                  return incoming\n                  // when subscription updates cache.incoming updated cache\n                }\n                //  console.log('fuck', existing, 'ddf', incoming)\n                return {\n                  ...incoming,\n                  Messages: [...existing.Messages, ...incoming.Messages],\n                }\n                //in the first query existing will be empty\n              },\n            },\n          },\n        },\n      },\n    }),\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n  })\n}\nexport const withApollo = createWithApollo(createClient)\n\n//createWithApollo takes a ApolloClient<NormalizedCacheObject> | ((ctx?: NextPageContext) => ApolloClient<NormalizedCacheObject>); your createClient is of type (ctx: NextPageContext) => ApolloClient<NormalizedCacheObject>\n"]},"metadata":{},"sourceType":"module"}