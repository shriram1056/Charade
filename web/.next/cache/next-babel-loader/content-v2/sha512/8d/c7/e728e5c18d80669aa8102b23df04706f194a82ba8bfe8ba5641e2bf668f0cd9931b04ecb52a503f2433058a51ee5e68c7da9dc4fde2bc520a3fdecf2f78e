{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/view-team/user/[[...id]].tsx\";\nimport { Box } from '@chakra-ui/react';\nimport gql from 'graphql-tag';\nimport _ from 'lodash';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { DirectMessage } from '../../../components/DirectMessageContainer';\nimport { SendMessage } from '../../../components/SendMessage';\nimport { Sidebar } from '../../../container/Sidebar';\nimport { useCreateDirectMessageMutation, useGetUserQuery } from '../../../generated/graphql';\nimport { withApollo } from '../../../utils/withApollo';\n\nconst ViewTeam = () => {\n  let teamId, receiverId;\n  const router = useRouter();\n\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]); // in initial render this will be undefined\n\n    receiverId = parseInt(router.query.id[1]);\n  }\n\n  const [createDirectMessage] = useCreateDirectMessageMutation();\n  const {\n    data,\n    loading\n  } = useGetUserQuery({\n    fetchPolicy: 'network-only'\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  const {\n    getUser: {\n      team: teams\n    }\n  } = data; // direct destructing of data cause error\n\n  const Idx = teamId ? teams.indexOf(teams.find(u => u.id === teamId)) : 0;\n  const Team = Idx === -1 ? teams[0] : teams[Idx]; // Idx is -1 if there is no item in allteam with the given ID.\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"grid\",\n    height: \"100vh\",\n    gridTemplateColumns: \"100px 250px 1fr\",\n    gridTemplateRows: \"auto 1fr auto\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      username: data.getUser.username,\n      Team: Team,\n      AllTeams: teams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"3\",\n      gridRow: \"1\",\n      textAlign: \"center\",\n      backgroundColor: \"#e6e6e6\",\n      children: \"adsfdsf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DirectMessage, {\n      teamId: Team.id,\n      receiverId: receiverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      name: receiverId,\n      onSubmit: async text => {\n        await createDirectMessage({\n          variables: {\n            teamId: Team.id,\n            text,\n            receiverId\n          },\n          optimisticResponse: {\n            __typename: 'Mutation',\n            createDirectMessages: true\n          },\n          update: (cache, {\n            data: {\n              createDirectMessages\n            }\n          }) => {\n            console.log(Team.id);\n            const data = cache.readFragment({\n              id: 'Team:' + Team.id,\n              fragment: gql`\n                  fragment _ on Team {\n                    directMessageUsers {\n                      id\n                      username\n                    }\n                  }\n                `\n            });\n\n            const writeData = _.cloneDeep(data);\n\n            const NotAnMember = writeData.directMessageUsers.every(u => u.id !== receiverId); //The every() method tests whether all elements in the array pass the test implemented by the provided function.\n\n            if (NotAnMember) if (writeData.directMessageUsers) {\n              // if there is channel\n              writeData.directMessageUsers.push({\n                id: receiverId,\n                username: ''\n              });\n            } else {\n              // if there is no channel\n              writeData.directMessageUsers = [{\n                id: receiverId,\n                username: ''\n              }];\n            }\n            console.log(writeData);\n            cache.writeFragment({\n              id: 'Team:' + Team.id,\n              fragment: gql`\n                  fragment _ on Team {\n                    directMessageUsers {\n                      id\n                      username\n                    }\n                  }\n                `,\n              data: writeData\n            });\n          }\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo({\n  ssr: false\n})(ViewTeam);","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/view-team/user/[[...id]].tsx"],"names":["Box","gql","_","useRouter","React","DirectMessage","SendMessage","Sidebar","useCreateDirectMessageMutation","useGetUserQuery","withApollo","ViewTeam","teamId","receiverId","router","query","id","parseInt","createDirectMessage","data","loading","fetchPolicy","getUser","team","teams","Idx","indexOf","find","u","Team","username","text","variables","optimisticResponse","__typename","createDirectMessages","update","cache","console","log","readFragment","fragment","writeData","cloneDeep","NotAnMember","directMessageUsers","every","push","writeFragment","ssr"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SACEC,8BADF,EAEEC,eAFF,QAIO,4BAJP;AAKA,SAASC,UAAT,QAA2B,2BAA3B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAIC,MAAJ,EAAYC,UAAZ;AACA,QAAMC,MAAM,GAAGX,SAAS,EAAxB;;AACA,MAAIW,MAAM,CAACC,KAAP,CAAaC,EAAjB,EAAqB;AACnBJ,IAAAA,MAAM,GAAGK,QAAQ,CAACH,MAAM,CAACC,KAAP,CAAaC,EAAb,CAAgB,CAAhB,CAAD,CAAjB,CADmB,CACmB;;AACtCH,IAAAA,UAAU,GAAGI,QAAQ,CAACH,MAAM,CAACC,KAAP,CAAaC,EAAb,CAAgB,CAAhB,CAAD,CAArB;AACD;;AACD,QAAM,CAACE,mBAAD,IAAwBV,8BAA8B,EAA5D;AACA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBX,eAAe,CAAC;AAAEY,IAAAA,WAAW,EAAE;AAAf,GAAD,CAAzC;;AAEA,MAAID,OAAJ,EAAa;AACX,wBAAO,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,QAAM;AACJE,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAI,EAAEC;AAAR;AADL,MAEFL,IAFJ,CAbqB,CAeZ;;AAET,QAAMM,GAAG,GAAGb,MAAM,GAAGY,KAAK,CAACE,OAAN,CAAcF,KAAK,CAACG,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACZ,EAAF,KAASJ,MAA3B,CAAd,CAAH,GAAuD,CAAzE;AAEA,QAAMiB,IAAI,GAAGJ,GAAG,KAAK,CAAC,CAAT,GAAaD,KAAK,CAAC,CAAD,CAAlB,GAAwBA,KAAK,CAACC,GAAD,CAA1C,CAnBqB,CAmB2B;;AAEhD,sBACE,QAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,MAAM,EAAC,OAFT;AAGE,IAAA,mBAAmB,EAAC,iBAHtB;AAIE,IAAA,gBAAgB,EAAC,eAJnB;AAAA,4BAME,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEN,IAAI,CAACG,OAAL,CAAaQ,QAAhC;AAA0C,MAAA,IAAI,EAAED,IAAhD;AAAsD,MAAA,QAAQ,EAAEL;AAAhE;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,GAAD;AACE,MAAA,UAAU,EAAC,GADb;AAEE,MAAA,OAAO,EAAC,GAFV;AAGE,MAAA,SAAS,EAAC,QAHZ;AAIE,MAAA,eAAe,EAAC,SAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAeE,QAAC,aAAD;AAAe,MAAA,MAAM,EAAEK,IAAI,CAACb,EAA5B;AAAgC,MAAA,UAAU,EAAEH;AAA5C;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE,QAAC,WAAD;AACE,MAAA,IAAI,EAAEA,UADR;AAEE,MAAA,QAAQ,EAAE,MAAOkB,IAAP,IAAgB;AACxB,cAAMb,mBAAmB,CAAC;AACxBc,UAAAA,SAAS,EAAE;AACTpB,YAAAA,MAAM,EAAEiB,IAAI,CAACb,EADJ;AAETe,YAAAA,IAFS;AAGTlB,YAAAA;AAHS,WADa;AAMxBoB,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,UAAU,EAAE,UADM;AAElBC,YAAAA,oBAAoB,EAAE;AAFJ,WANI;AAUxBC,UAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAElB,YAAAA,IAAI,EAAE;AAAEgB,cAAAA;AAAF;AAAR,WAAR,KAA+C;AACrDG,YAAAA,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACb,EAAjB;AACA,kBAAMG,IAAI,GAAGkB,KAAK,CAACG,YAAN,CAEV;AACDxB,cAAAA,EAAE,EAAE,UAAUa,IAAI,CAACb,EADlB;AAEDyB,cAAAA,QAAQ,EAAExC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AATiB,aAFU,CAAb;;AAaA,kBAAMyC,SAAS,GAAGxC,CAAC,CAACyC,SAAF,CAAYxB,IAAZ,CAAlB;;AACA,kBAAMyB,WAAW,GAAGF,SAAS,CAACG,kBAAV,CAA6BC,KAA7B,CACjBlB,CAAD,IAAOA,CAAC,CAACZ,EAAF,KAASH,UADE,CAApB,CAhBqD,CAmBrD;;AACA,gBAAI+B,WAAJ,EACE,IAAIF,SAAS,CAACG,kBAAd,EAAkC;AAChC;AACAH,cAAAA,SAAS,CAACG,kBAAV,CAA6BE,IAA7B,CAAkC;AAChC/B,gBAAAA,EAAE,EAAEH,UAD4B;AAEhCiB,gBAAAA,QAAQ,EAAE;AAFsB,eAAlC;AAID,aAND,MAMO;AACL;AACAY,cAAAA,SAAS,CAACG,kBAAV,GAA+B,CAC7B;AACE7B,gBAAAA,EAAE,EAAEH,UADN;AAEEiB,gBAAAA,QAAQ,EAAE;AAFZ,eAD6B,CAA/B;AAMD;AACHQ,YAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACAL,YAAAA,KAAK,CAACW,aAAN,CAAoB;AAClBhC,cAAAA,EAAE,EAAE,UAAUa,IAAI,CAACb,EADD;AAElByB,cAAAA,QAAQ,EAAExC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,iBATkC;AAUlBkB,cAAAA,IAAI,EAAEuB;AAVY,aAApB;AAYD;AA3DuB,SAAD,CAAzB;AA6DD;AAhEH;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqFD,CA1GD;;AA2GA,eAAehC,UAAU,CAAC;AAAEuC,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BtC,QAA3B,CAAf","sourcesContent":["import { Box } from '@chakra-ui/react'\nimport gql from 'graphql-tag'\nimport _ from 'lodash'\nimport { useRouter } from 'next/router'\nimport React from 'react'\nimport { DirectMessage } from '../../../components/DirectMessageContainer'\nimport { SendMessage } from '../../../components/SendMessage'\nimport { Sidebar } from '../../../container/Sidebar'\nimport {\n  useCreateDirectMessageMutation,\n  useGetUserQuery,\n  User,\n} from '../../../generated/graphql'\nimport { withApollo } from '../../../utils/withApollo'\n\nconst ViewTeam = () => {\n  let teamId, receiverId\n  const router = useRouter()\n  if (router.query.id) {\n    teamId = parseInt(router.query.id[0]) // in initial render this will be undefined\n    receiverId = parseInt(router.query.id[1])\n  }\n  const [createDirectMessage] = useCreateDirectMessageMutation()\n  const { data, loading } = useGetUserQuery({ fetchPolicy: 'network-only' })\n\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  const {\n    getUser: { team: teams },\n  } = data // direct destructing of data cause error\n\n  const Idx = teamId ? teams.indexOf(teams.find((u) => u.id === teamId)) : 0\n\n  const Team = Idx === -1 ? teams[0] : teams[Idx] // Idx is -1 if there is no item in allteam with the given ID.\n\n  return (\n    <Box\n      display=\"grid\"\n      height=\"100vh\"\n      gridTemplateColumns=\"100px 250px 1fr\"\n      gridTemplateRows=\"auto 1fr auto\"\n    >\n      <Sidebar username={data.getUser.username} Team={Team} AllTeams={teams} />\n      <Box\n        gridColumn=\"3\"\n        gridRow=\"1\"\n        textAlign=\"center\"\n        backgroundColor=\"#e6e6e6\"\n      >\n        adsfdsf\n      </Box>\n      <DirectMessage teamId={Team.id} receiverId={receiverId} />\n      <SendMessage\n        name={receiverId}\n        onSubmit={async (text) => {\n          await createDirectMessage({\n            variables: {\n              teamId: Team.id,\n              text,\n              receiverId,\n            },\n            optimisticResponse: {\n              __typename: 'Mutation',\n              createDirectMessages: true,\n            },\n            update: (cache, { data: { createDirectMessages } }) => {\n              console.log(Team.id)\n              const data = cache.readFragment<{\n                directMessageUsers: Pick<User, 'id' | 'username'>[]\n              }>({\n                id: 'Team:' + Team.id,\n                fragment: gql`\n                  fragment _ on Team {\n                    directMessageUsers {\n                      id\n                      username\n                    }\n                  }\n                `,\n              })\n              const writeData = _.cloneDeep(data)\n              const NotAnMember = writeData.directMessageUsers.every(\n                (u) => u.id !== receiverId\n              )\n              //The every() method tests whether all elements in the array pass the test implemented by the provided function.\n              if (NotAnMember)\n                if (writeData.directMessageUsers) {\n                  // if there is channel\n                  writeData.directMessageUsers.push({\n                    id: receiverId,\n                    username: '',\n                  })\n                } else {\n                  // if there is no channel\n                  writeData.directMessageUsers = [\n                    {\n                      id: receiverId,\n                      username: '',\n                    },\n                  ]\n                }\n              console.log(writeData)\n              cache.writeFragment({\n                id: 'Team:' + Team.id,\n                fragment: gql`\n                  fragment _ on Team {\n                    directMessageUsers {\n                      id\n                      username\n                    }\n                  }\n                `,\n                data: writeData,\n              })\n            },\n          })\n        }}\n      />\n    </Box>\n  )\n}\nexport default withApollo({ ssr: false })(ViewTeam)\n"]},"metadata":{},"sourceType":"module"}