{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/SendMessage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Box, Button, IconButton } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { InputField } from './InputField';\nconst ENTER_KEY = 13;\nexport const SendMessage = ({\n  name,\n  onSubmit\n}) => {\n  const onDrop = useCallback(acceptedFiles => {// Do something with the files\n  }, []); //useCallBack: useCallback will return a cached version of the callback that only changes if one of the dependency array has changed.\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"3\",\n    backgroundColor: \"#e6e6e6\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        message: ''\n      },\n      onSubmit: async (values, {\n        setErrors,\n        setSubmitting,\n        resetForm\n      }) => {\n        if (!values.message || !values.message.trim()) {\n          //trim to remove the white spaces\n          setSubmitting(false);\n          return;\n        }\n\n        const response = onSubmit(values.message);\n        resetForm();\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n          display: \"flex\",\n          padding: \"20px\"\n        }, getRootProps()), {}, {\n          children: [/*#__PURE__*/_jsxDEV(IconButton, _objectSpread({\n            colorScheme: \"black\",\n            backgroundColor: \"black\",\n            \"aria-label\": \"upload file\",\n            mr: \"1\",\n            icon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 23\n            }, this)\n          }, getInputProps()), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputField, {\n            placeholder: `message-${name}`,\n            channel: true,\n            name: \"message\",\n            backgroundColor: \"#bfbfbf\",\n            _placeholder: {\n              color: 'black'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            backgroundColor: \"black\",\n            color: \"white\",\n            isLoading: isSubmitting //     onClick={isSubmitting ? null : toClose}\n            ,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/SendMessage.tsx"],"names":["AddIcon","Box","Button","IconButton","Form","Formik","React","useCallback","useDropzone","InputField","ENTER_KEY","SendMessage","name","onSubmit","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","message","values","setErrors","setSubmitting","resetForm","trim","response","isSubmitting","color"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,QAAwC,kBAAxC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAMA,MAAMC,SAAS,GAAG,EAAlB;AAEA,OAAO,MAAMC,WAAuC,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AAC7E,QAAMC,MAAM,GAAGP,WAAW,CAAEQ,aAAD,IAAmB,CAC5C;AACD,GAFyB,EAEvB,EAFuB,CAA1B,CAD6E,CAI7E;;AAEA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,MAAgDV,WAAW,CAAC;AAChEM,IAAAA;AADgE,GAAD,CAAjE;AAGA,sBACE,QAAC,GAAD;AAAK,IAAA,UAAU,EAAC,GAAhB;AAAoB,IAAA,OAAO,EAAC,GAA5B;AAAgC,IAAA,eAAe,EAAC,SAAhD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEK,QAAAA,OAAO,EAAE;AAAX,OADjB;AAEE,MAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,aAAb;AAA4BC,QAAAA;AAA5B,OAAf,KAA2D;AACnE,YAAI,CAACH,MAAM,CAACD,OAAR,IAAmB,CAACC,MAAM,CAACD,OAAP,CAAeK,IAAf,EAAxB,EAA+C;AAC7C;AACAF,UAAAA,aAAa,CAAC,KAAD,CAAb;AACA;AACD;;AACD,cAAMG,QAAQ,GAAGZ,QAAQ,CAACO,MAAM,CAACD,OAAR,CAAzB;AACAI,QAAAA,SAAS;AACV,OAVH;AAAA,gBAYG,CAAC;AAAEG,QAAAA;AAAF,OAAD,kBACC,QAAC,IAAD;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,MAAb;AAAoB,UAAA,OAAO,EAAC;AAA5B,WAAuCV,YAAY,EAAnD;AAAA,kCAEE,QAAC,UAAD;AACE,YAAA,WAAW,EAAC,OADd;AAEE,YAAA,eAAe,EAAC,OAFlB;AAGE,0BAAW,aAHb;AAIE,YAAA,EAAE,EAAC,GAJL;AAKE,YAAA,IAAI,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AALR,aAMMC,aAAa,EANnB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAUE,QAAC,UAAD;AACE,YAAA,WAAW,EAAG,WAAUL,IAAK,EAD/B;AAEE,YAAA,OAAO,EAAE,IAFX;AAGE,YAAA,IAAI,EAAC,SAHP;AAIE,YAAA,eAAe,EAAC,SAJlB;AAKE,YAAA,YAAY,EAAE;AAAEe,cAAAA,KAAK,EAAE;AAAT;AALhB;AAAA;AAAA;AAAA;AAAA,kBAVF,eAiBE,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,eAAe,EAAC,OAFlB;AAGE,YAAA,KAAK,EAAC,OAHR;AAIE,YAAA,SAAS,EAAED,YAJb,CAKE;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CAzDM","sourcesContent":["import { AddIcon } from '@chakra-ui/icons'\nimport { Box, Button, IconButton } from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { InputField } from './InputField'\n\ninterface SendMessageProps {\n  name: string\n  onSubmit: Function\n}\nconst ENTER_KEY = 13\n\nexport const SendMessage: React.FC<SendMessageProps> = ({ name, onSubmit }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    // Do something with the files\n  }, [])\n  //useCallBack: useCallback will return a cached version of the callback that only changes if one of the dependency array has changed.\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n  })\n  return (\n    <Box gridColumn=\"3\" gridRow=\"3\" backgroundColor=\"#e6e6e6\">\n      <Formik\n        initialValues={{ message: '' }}\n        onSubmit={async (values, { setErrors, setSubmitting, resetForm }) => {\n          if (!values.message || !values.message.trim()) {\n            //trim to remove the white spaces\n            setSubmitting(false)\n            return\n          }\n          const response = onSubmit(values.message)\n          resetForm()\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Box display=\"flex\" padding=\"20px\" {...getRootProps()}>\n              {/* @ts-ignore */}\n              <IconButton\n                colorScheme=\"black\"\n                backgroundColor=\"black\"\n                aria-label=\"upload file\"\n                mr=\"1\"\n                icon={<AddIcon />}\n                {...getInputProps()}\n              />\n              <InputField\n                placeholder={`message-${name}`}\n                channel={true}\n                name=\"message\"\n                backgroundColor=\"#bfbfbf\"\n                _placeholder={{ color: 'black' }}\n              />\n              <Button\n                type=\"submit\"\n                backgroundColor=\"black\"\n                color=\"white\"\n                isLoading={isSubmitting}\n                //     onClick={isSubmitting ? null : toClose}\n              >\n                Send\n              </Button>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}