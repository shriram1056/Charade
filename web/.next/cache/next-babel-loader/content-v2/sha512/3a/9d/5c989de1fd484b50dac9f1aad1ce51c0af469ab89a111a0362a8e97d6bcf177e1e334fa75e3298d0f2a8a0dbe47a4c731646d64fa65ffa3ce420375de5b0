{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/DirectMessageContainer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Stack, Text } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { NewDirectMessageDocument, useDirectMessageQuery } from '../generated/graphql';\nexport const DirectMessage = ({\n  teamId,\n  receiverId\n}) => {\n  const {\n    data,\n    loading,\n    subscribeToMore\n  } = useDirectMessageQuery({\n    variables: {\n      receiverId,\n      teamId\n    },\n    fetchPolicy: 'network-only'\n  });\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewDirectMessageDocument,\n      variables: {\n        receiverId,\n        teamId\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) {\n          return prev;\n        } //@ts-ignore\n\n\n        const {\n          newDirectMessage\n        } = subscriptionData.data; // prev is a data with __typename and Message\n\n        let newData = _objectSpread(_objectSpread({}, prev), {}, {\n          DirectMessages: [...prev.DirectMessages, newDirectMessage] //FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. DON'T FORGET TO CHANGE THE DirectMessages FIELD NAME ACCORDING TO YOUR NEEDS\n\n        });\n\n        console.log(newData);\n        return newData;\n      }\n    });\n\n    if (unsubscribe) {\n      return () => unsubscribe(); // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, receiverId, teamId]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      mt: 4,\n      ml: 3,\n      children: data !== null && data !== void 0 && data.DirectMessages ? data.DirectMessages.map(u => /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          fontSize: \"19px\",\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          children: [u.sender.username, /*#__PURE__*/_jsxDEV(Text, {\n            ml: 2,\n            display: \"inline\",\n            fontSize: \"13px\",\n            fontFamily: \"sans-serif\",\n            color: \"#958993\",\n            children: u.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: u.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)]\n      }, `directMessage-${u.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/DirectMessageContainer.tsx"],"names":["Box","Stack","Text","React","useEffect","NewDirectMessageDocument","useDirectMessageQuery","DirectMessage","teamId","receiverId","data","loading","subscribeToMore","variables","fetchPolicy","unsubscribe","document","updateQuery","prev","subscriptionData","newDirectMessage","newData","DirectMessages","console","log","map","u","sender","username","createdAt","text","id"],"mappings":"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","sourcesContent":["import { Box, Stack, Text } from '@chakra-ui/react'\nimport React, { useEffect } from 'react'\nimport {\n  NewDirectMessageDocument,\n  useDirectMessageQuery,\n} from '../generated/graphql'\n\ninterface MessageProps {\n  teamId: number\n  receiverId: number\n}\n\nexport const DirectMessage: React.FC<MessageProps> = ({\n  teamId,\n  receiverId,\n}) => {\n  const { data, loading, subscribeToMore } = useDirectMessageQuery({\n    variables: {\n      receiverId,\n      teamId,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewDirectMessageDocument,\n      variables: { receiverId, teamId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        //@ts-ignore\n        const { newDirectMessage } = subscriptionData.data\n        // prev is a data with __typename and Message\n        let newData = {\n          ...prev,\n          DirectMessages: [...prev.DirectMessages, newDirectMessage],\n          //FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. DON'T FORGET TO CHANGE THE DirectMessages FIELD NAME ACCORDING TO YOUR NEEDS\n        }\n        console.log(newData)\n        return newData\n      },\n    })\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, receiverId, teamId])\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n    >\n      <Stack mt={4} ml={3}>\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        {data?.DirectMessages\n          ? data.DirectMessages.map((u) => (\n              <Box mb={4} key={`directMessage-${u.id}`}>\n                <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n                  {u.sender.username}\n                  <Text\n                    ml={2}\n                    display=\"inline\"\n                    fontSize=\"13px\"\n                    fontFamily=\"sans-serif\"\n                    color=\"#958993\"\n                  >\n                    {u.createdAt}\n                  </Text>\n                </Box>\n                <Box>{u.text}</Box>\n              </Box>\n            ))\n          : null}\n      </Stack>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}