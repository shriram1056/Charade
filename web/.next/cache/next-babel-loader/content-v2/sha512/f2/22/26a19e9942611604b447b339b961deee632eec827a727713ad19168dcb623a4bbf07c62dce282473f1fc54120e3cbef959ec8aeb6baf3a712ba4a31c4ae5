{"ast":null,"code":"import _defineProperty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/SendMessage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Box, Button } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { InputField } from './InputField';\nvar ENTER_KEY = 13;\nexport var SendMessage = function SendMessage(_ref) {\n  _s();\n\n  var name = _ref.name,\n      onSubmit = _ref.onSubmit;\n  var onDrop = useCallback(function (acceptedFiles) {// Do something with the files\n  }, []); //useCallBack: useCallback will return a cached version of the callback that only changes if one of the dependency array has changed.\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragActive = _useDropzone.isDragActive;\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"3\",\n    backgroundColor: \"#e6e6e6\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        message: ''\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var setErrors, setSubmitting, resetForm, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors, setSubmitting = _ref2.setSubmitting, resetForm = _ref2.resetForm;\n\n                  if (!(!values.message || !values.message.trim())) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  //trim to remove the white spaces\n                  setSubmitting(false);\n                  return _context.abrupt(\"return\");\n\n                case 4:\n                  response = onSubmit(values.message);\n                  resetForm();\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref4) {\n        var isSubmitting = _ref4.isSubmitting;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n            display: \"flex\",\n            padding: \"20px\"\n          }, getRootProps()), {}, {\n            children: [/*#__PURE__*/_jsxDEV(Icon, _objectSpread({\n              colorScheme: \"black\",\n              backgroundColor: \"black\",\n              \"aria-label\": \"upload file\",\n              mr: \"1\",\n              icon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 23\n              }, _this)\n            }, getInputProps()), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n              placeholder: \"message-\".concat(name),\n              channel: true,\n              name: \"message\",\n              backgroundColor: \"#bfbfbf\",\n              _placeholder: {\n                color: 'black'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              backgroundColor: \"black\",\n              color: \"white\",\n              isLoading: isSubmitting //     onClick={isSubmitting ? null : toClose}\n              ,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, _this)]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SendMessage, \"yd//yJtVY5DqPYzQY0xGsdgoRlk=\", false, function () {\n  return [useDropzone];\n});\n\n_c = SendMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendMessage\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/SendMessage.tsx"],"names":["AddIcon","Box","Button","Form","Formik","React","useCallback","useDropzone","InputField","ENTER_KEY","SendMessage","name","onSubmit","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","message","values","setErrors","setSubmitting","resetForm","trim","response","isSubmitting","color"],"mappings":"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","sourcesContent":["import { AddIcon } from '@chakra-ui/icons'\nimport { Box, Button } from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { InputField } from './InputField'\n\ninterface SendMessageProps {\n  name: string\n  onSubmit: Function\n}\nconst ENTER_KEY = 13\n\nexport const SendMessage: React.FC<SendMessageProps> = ({ name, onSubmit }) => {\n  const onDrop = useCallback((acceptedFiles) => {\n    // Do something with the files\n  }, [])\n  //useCallBack: useCallback will return a cached version of the callback that only changes if one of the dependency array has changed.\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n  })\n  return (\n    <Box gridColumn=\"3\" gridRow=\"3\" backgroundColor=\"#e6e6e6\">\n      <Formik\n        initialValues={{ message: '' }}\n        onSubmit={async (values, { setErrors, setSubmitting, resetForm }) => {\n          if (!values.message || !values.message.trim()) {\n            //trim to remove the white spaces\n            setSubmitting(false)\n            return\n          }\n          const response = onSubmit(values.message)\n          resetForm()\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Box display=\"flex\" padding=\"20px\" {...getRootProps()}>\n              <Icon\n                colorScheme=\"black\"\n                backgroundColor=\"black\"\n                aria-label=\"upload file\"\n                mr=\"1\"\n                icon={<AddIcon />}\n                {...getInputProps()}\n              />\n              <InputField\n                placeholder={`message-${name}`}\n                channel={true}\n                name=\"message\"\n                backgroundColor=\"#bfbfbf\"\n                _placeholder={{ color: 'black' }}\n              />\n              <Button\n                type=\"submit\"\n                backgroundColor=\"black\"\n                color=\"white\"\n                isLoading={isSubmitting}\n                //     onClick={isSubmitting ? null : toClose}\n              >\n                Send\n              </Button>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}