{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx\";\nimport { Button, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useCreateChannelMutation } from '../generated/graphql';\nimport { InputField } from './InputField';\nexport const ChannelForm = ({\n  open,\n  toClose,\n  teamId\n}) => {\n  const [createChannel] = useCreateChannelMutation();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => toClose(),\n    isOpen: open,\n    children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {\n      opacity: \"0.2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      pb: 5,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        children: \"Add Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            channelName: '',\n            public: true\n          },\n          onSubmit: async (values, {\n            setErrors\n          }) => {\n            console.log(values); // const response = await createChannel({\n            //   variables: {\n            //     teamId: teamId,\n            //     name: values.channelName,\n            //     public: values.public,\n            //   },\n            //   optimisticResponse: {\n            //     // this mimics the response object\n            //     __typename: 'Mutation',\n            //     createChannel: {\n            //       __typename: 'ChannelResponse',\n            //       channel: {\n            //         __typename: 'Channel',\n            //         id: -1,\n            //         name: values.channelName,\n            //         public: true,\n            //       },\n            //     },\n            //   },\n            //   update: (cache, { data: { createChannel } }) => {\n            //     // double destructure: You can destructure and assign the default value in a single statement.\n            //     // here the data is channelResponse\n            //     //data is the result of query/mutation.\n            //     const data = cache.readFragment<{\n            //       channels: Channel[]\n            //     }>({\n            //       id: 'Team:' + teamId,\n            //       fragment: gql`\n            //         fragment _ on Team {\n            //           channels {\n            //             id\n            //             name\n            //             public\n            //           }\n            //         }\n            //       `,\n            //     })\n            //     const writeData = _.cloneDeep(data)\n            //     if (writeData.channels) {\n            //       // if there is channel\n            //       writeData.channels.push(createChannel.channel)\n            //     } else {\n            //       // if there is no channel\n            //       writeData.channels = [createChannel.channel]\n            //     }\n            //     console.log(writeData)\n            //     toClose()\n            //     cache.writeFragment({\n            //       id: 'Team:' + teamId,\n            //       fragment: gql`\n            //         fragment _ on Team {\n            //           channels {\n            //             id\n            //             name\n            //             public\n            //           }\n            //         }\n            //       `,\n            //       data: writeData,\n            //     })\n            //   },\n            // })\n          },\n          children: ({\n            isSubmitting,\n            values,\n            setFieldValue\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              placeholder: \"channel\",\n              channel: true,\n              name: \"channelcName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n              label: \"private\",\n              mt: 2,\n              children: \"private\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              margin: \"10px auto 0 auto\",\n              display: \"block\",\n              backgroundColor: \"teal.300\",\n              isLoading: isSubmitting,\n              children: \"Create Channel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}; //Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/channelForm.tsx"],"names":["Button","Checkbox","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","Form","Formik","React","useCreateChannelMutation","InputField","ChannelForm","open","toClose","teamId","createChannel","channelName","public","values","setErrors","console","log","isSubmitting","setFieldValue"],"mappings":";;AAAA,SACEA,MADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,gBALF,EAMEC,YANF,EAOEC,WAPF,EAQEC,YARF,QASO,kBATP;AAUA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAOA,OAAO,MAAMC,WAAkC,GAAG,CAAC;AACjDC,EAAAA,IADiD;AAEjDC,EAAAA,OAFiD;AAGjDC,EAAAA;AAHiD,CAAD,KAI5C;AACJ,QAAM,CAACC,aAAD,IAAkBN,wBAAwB,EAAhD;AACA,sBACE,QAAC,KAAD;AAAO,IAAA,OAAO,EAAE,MAAMI,OAAO,EAA7B;AAAiC,IAAA,MAAM,EAAED,IAAzC;AAAA,4BAEE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,YAAD;AAAc,MAAA,EAAE,EAAE,CAAlB;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,QAArB;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,aAAa,EAAE;AAAEI,YAAAA,WAAW,EAAE,EAAf;AAAmBC,YAAAA,MAAM,EAAE;AAA3B,WADjB;AAEE,UAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,YAAAA;AAAF,WAAf,KAAiC;AACzCC,YAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EADyC,CAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAnEH;AAAA,oBAqEG,CAAC;AAAEI,YAAAA,YAAF;AAAgBJ,YAAAA,MAAhB;AAAwBK,YAAAA;AAAxB,WAAD,kBACC,QAAC,IAAD;AAAA,oCACE,QAAC,UAAD;AACE,cAAA,WAAW,EAAC,SADd;AAEE,cAAA,OAAO,EAAE,IAFX;AAGE,cAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,oBADF,eAME,QAAC,QAAD;AAAU,cAAA,KAAK,EAAC,SAAhB;AAA0B,cAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eASE,QAAC,MAAD;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,MAAM,EAAC,kBAFT;AAGE,cAAA,OAAO,EAAC,OAHV;AAIE,cAAA,eAAe,EAAC,UAJlB;AAKE,cAAA,SAAS,EAAED,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAtEJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuGD,CA7GM,C,CA+GP;AACA;AAEA;;AAEA;AACA","sourcesContent":["import {\n  Button,\n  Checkbox,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport React from 'react'\nimport { useCreateChannelMutation } from '../generated/graphql'\nimport { InputField } from './InputField'\n\ninterface Channelform {\n  open: boolean\n  toClose: any\n  teamId: number\n}\nexport const ChannelForm: React.FC<Channelform> = ({\n  open,\n  toClose,\n  teamId,\n}) => {\n  const [createChannel] = useCreateChannelMutation()\n  return (\n    <Modal onClose={() => toClose()} isOpen={open}>\n      {/*  on Close needs callback and not run toOpen() */}\n      <ModalOverlay opacity=\"0.2\" />\n      <ModalContent pb={5}>\n        <ModalHeader>Add Channel</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody textAlign=\"center\">\n          <Formik\n            initialValues={{ channelName: '', public: true }}\n            onSubmit={async (values, { setErrors }) => {\n              console.log(values)\n              // const response = await createChannel({\n              //   variables: {\n              //     teamId: teamId,\n              //     name: values.channelName,\n              //     public: values.public,\n              //   },\n              //   optimisticResponse: {\n              //     // this mimics the response object\n              //     __typename: 'Mutation',\n              //     createChannel: {\n              //       __typename: 'ChannelResponse',\n              //       channel: {\n              //         __typename: 'Channel',\n              //         id: -1,\n              //         name: values.channelName,\n              //         public: true,\n              //       },\n              //     },\n              //   },\n              //   update: (cache, { data: { createChannel } }) => {\n              //     // double destructure: You can destructure and assign the default value in a single statement.\n              //     // here the data is channelResponse\n              //     //data is the result of query/mutation.\n\n              //     const data = cache.readFragment<{\n              //       channels: Channel[]\n              //     }>({\n              //       id: 'Team:' + teamId,\n              //       fragment: gql`\n              //         fragment _ on Team {\n              //           channels {\n              //             id\n              //             name\n              //             public\n              //           }\n              //         }\n              //       `,\n              //     })\n              //     const writeData = _.cloneDeep(data)\n              //     if (writeData.channels) {\n              //       // if there is channel\n              //       writeData.channels.push(createChannel.channel)\n              //     } else {\n              //       // if there is no channel\n              //       writeData.channels = [createChannel.channel]\n              //     }\n              //     console.log(writeData)\n              //     toClose()\n              //     cache.writeFragment({\n              //       id: 'Team:' + teamId,\n              //       fragment: gql`\n              //         fragment _ on Team {\n              //           channels {\n              //             id\n              //             name\n              //             public\n              //           }\n              //         }\n              //       `,\n              //       data: writeData,\n              //     })\n              //   },\n              // })\n            }}\n          >\n            {({ isSubmitting, values, setFieldValue }) => (\n              <Form>\n                <InputField\n                  placeholder=\"channel\"\n                  channel={true}\n                  name=\"channelcName\"\n                />\n                <Checkbox label=\"private\" mt={2}>\n                  private\n                </Checkbox>\n                <Button\n                  type=\"submit\"\n                  margin=\"10px auto 0 auto\"\n                  display=\"block\"\n                  backgroundColor=\"teal.300\"\n                  isLoading={isSubmitting}\n                >\n                  Create Channel\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\n//Default identifier generation\n// By default, the InMemoryCache generates a unique identifier for any object that includes a __typename field. To do so, it combines the object's __typename with its id or _id field (whichever is defined). These two values are separated by a colon (:).\n\n// For example, an object with a __typename of Task and an id of 14 is assigned a default identifier of Task:14.\n\n/*addTypename:this is enabled by default\nIf true, the cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually. */\n"]},"metadata":{},"sourceType":"module"}