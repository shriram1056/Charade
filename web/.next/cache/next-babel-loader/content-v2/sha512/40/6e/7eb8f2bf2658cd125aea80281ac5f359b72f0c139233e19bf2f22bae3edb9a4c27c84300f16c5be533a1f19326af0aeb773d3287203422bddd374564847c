{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Stack, Text } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { NewChannelMessageDocument, useMessagesQuery } from '../generated/graphql';\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message = ({\n  channelId\n}) => {\n  const {\n    data,\n    loading,\n    subscribeToMore,\n    fetchMore\n  } = useMessagesQuery({\n    variables: {\n      channelId\n    },\n    fetchPolicy: 'network-only',\n    // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n    notifyOnNetworkStatusChange: true // this changes the loading when we fetchmore normally that doesn't change.that is why we need this\n\n  });\n  useEffect(() => {\n    // this starts the subscription\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: {\n        channelId\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) {\n          return prev;\n        } // @ts-ignore\n\n\n        const {\n          newChannelMessage\n        } = subscriptionData.data; // prev is a data with __typename and Message\n\n        let newData = _objectSpread(_objectSpread({}, prev), {}, {\n          Messages: [newChannelMessage, ...prev.Messages]\n        });\n\n        console.log(newData);\n        return newData;\n      }\n    });\n\n    if (unsubscribe) {\n      return () => unsubscribe(); // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId]); // make new subscription if channelId is changed\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(data.Messages);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: \"3\",\n    gridRow: \"2\",\n    backgroundColor: \"#e6e6e6\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      mt: 4,\n      ml: 3,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => fetchMore({\n          variables: {\n            channelId,\n            offset: data.Messages.length\n          }\n        }),\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), data.Messages.slice().reverse().map(u => /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          fontSize: \"19px\",\n          fontFamily: \"sans-serif\",\n          fontWeight: \"bold\",\n          children: [u.user.username, /*#__PURE__*/_jsxDEV(Text, {\n            ml: 2,\n            display: \"inline\",\n            fontSize: \"13px\",\n            fontFamily: \"sans-serif\",\n            color: \"#958993\",\n            children: u.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: u.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)]\n      }, `message-${u.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/components/Messages.tsx"],"names":["Box","Button","Stack","Text","React","useEffect","NewChannelMessageDocument","useMessagesQuery","Message","channelId","data","loading","subscribeToMore","fetchMore","variables","fetchPolicy","notifyOnNetworkStatusChange","unsubscribe","document","updateQuery","prev","subscriptionData","newChannelMessage","newData","Messages","console","log","offset","length","slice","reverse","map","u","user","username","createdAt","text","id"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, Text } from '@chakra-ui/react'\nimport React, { useEffect } from 'react'\nimport {\n  NewChannelMessageDocument,\n  useMessagesQuery,\n} from '../generated/graphql'\n\ninterface MessageProps {\n  channelId: number\n}\n// the message are received in desc order, so we slice the array to make a new copy and reverse() it. desc is because we need the latest message\nexport const Message: React.FC<MessageProps> = ({ channelId }) => {\n  const { data, loading, subscribeToMore, fetchMore } = useMessagesQuery({\n    variables: { channelId },\n    fetchPolicy: 'network-only', // instead of reading from catch. this makes a new request. this can be when user ask for Message due to re-render or page navigation.\n    //when A makes a message in channel TEST and B is not in that channel. then cache won't be updated because B is not subscribed until he is in that page. that is why we make new request\n\n    notifyOnNetworkStatusChange: true, // this changes the loading when we fetchmore normally that doesn't change.that is why we need this\n  })\n\n  useEffect(() => {\n    // this starts the subscription\n\n    let unsubscribe = subscribeToMore({\n      document: NewChannelMessageDocument,\n      variables: { channelId },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) {\n          return prev\n        }\n        // @ts-ignore\n        const { newChannelMessage } = subscriptionData.data\n\n        // prev is a data with __typename and Message\n        let newData = {\n          ...prev,\n          Messages: [newChannelMessage, ...prev.Messages],\n        }\n        console.log(newData)\n        return newData\n      },\n    })\n    if (unsubscribe) {\n      return () => unsubscribe() // this function will execute when the component gets disassociated.\n    }\n  }, [subscribeToMore, channelId]) // make new subscription if channelId is changed\n\n  if (loading) {\n    return <Box>loading</Box>\n  }\n  console.log(data.Messages)\n  return (\n    <Box\n      gridColumn=\"3\"\n      gridRow=\"2\"\n      backgroundColor=\"#e6e6e6\"\n      overflowY=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column-reverse\"\n    >\n      <Stack mt={4} ml={3}>\n        {/* column-reverse: to have new messages in the front\n        overFlowY: for scroll bar */}\n        <Button\n          onClick={() =>\n            fetchMore({\n              variables: {\n                channelId,\n                offset: data.Messages.length,\n              },\n            })\n          }\n        >\n          load more\n        </Button>\n        {data.Messages.slice()\n          .reverse()\n          .map((u) => (\n            <Box mb={4} key={`message-${u.id}`}>\n              <Box fontSize=\"19px\" fontFamily=\"sans-serif\" fontWeight=\"bold\">\n                {u.user.username}\n                <Text\n                  ml={2}\n                  display=\"inline\"\n                  fontSize=\"13px\"\n                  fontFamily=\"sans-serif\"\n                  color=\"#958993\"\n                >\n                  {u.createdAt}\n                </Text>\n              </Box>\n              <Box>{u.text}</Box>\n            </Box>\n          ))}\n      </Stack>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}