{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/home/shriram/Downloads/slack clone/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/home/shriram/Downloads/slack clone/web/src/pages/login.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Button } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport { useRouter } from 'next/dist/client/router';\nimport React from 'react';\nimport { MessageTypes } from 'subscriptions-transport-ws';\nimport { InputField } from '../components/InputField';\nimport { Wrapper } from '../components/Wrapper';\nimport { useLoginMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { subscriptionClient, withApollo } from '../utils/withApollo';\n\nvar Login = function Login(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n\n  var _useLoginMutation = useLoginMutation(),\n      _useLoginMutation2 = _slicedToArray(_useLoginMutation, 1),\n      login = _useLoginMutation2[0];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var _response$data, _response$data2;\n\n          var setErrors, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors;\n                  _context.next = 3;\n                  return login({\n                    variables: {\n                      email: values.email,\n                      password: values.password\n                    }\n                  });\n\n                case 3:\n                  response = _context.sent;\n\n                  if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.Login.errors) {\n                    console.log(toErrorMap(response.data.Login.errors));\n                    setErrors(toErrorMap(response.data.Login.errors));\n                  } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.Login.user) {\n                    // Close socket connection which will also unregister subscriptions on the server-side.\n                    subscriptionClient.close(); // Reconnect to the server.\n                    //@ts-ignore\n\n                    subscriptionClient.tryReconnect(); // Reregister all subscriptions.\n\n                    Object.keys(subscriptionClient.operations).forEach(function (id) {\n                      //@ts-ignore\n                      subscriptionClient.sendMessage(id, MessageTypes.GQL_START, subscriptionClient.operations[id].options);\n                    });\n\n                    if (typeof router.query.next === 'string') {\n                      router.replace(router.query.next);\n                    }\n\n                    router.replace('/');\n                  }\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref4) {\n        var isSubmitting = _ref4.isSubmitting;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"email\",\n            placeholder: \"email\",\n            label: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"password\",\n              placeholder: \"password\",\n              label: \"password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            colorScheme: \"teal\",\n            isLoading: isSubmitting // show loading if is still submitting\n            ,\n            children: \"login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Login, \"nRbpaRou4ZuFDO6DKcD51iHnHq0=\", false, function () {\n  return [useRouter, useLoginMutation];\n});\n\n_c = Login;\nexport default withApollo({\n  ssr: false\n})(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/shriram/Downloads/slack clone/web/src/pages/login.tsx"],"names":["Box","Button","Form","Formik","useRouter","React","MessageTypes","InputField","Wrapper","useLoginMutation","toErrorMap","subscriptionClient","withApollo","Login","router","login","email","password","values","setErrors","variables","response","data","errors","console","log","user","close","tryReconnect","Object","keys","operations","forEach","id","sendMessage","GQL_START","options","query","next","replace","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button } from '@chakra-ui/react'\nimport { Form, Formik } from 'formik'\nimport { useRouter } from 'next/dist/client/router'\nimport React from 'react'\nimport { MessageTypes } from 'subscriptions-transport-ws'\nimport { InputField } from '../components/InputField'\nimport { Wrapper } from '../components/Wrapper'\nimport { useLoginMutation } from '../generated/graphql'\nimport { toErrorMap } from '../utils/toErrorMap'\nimport { subscriptionClient, withApollo } from '../utils/withApollo'\n\nconst Login: React.FC<{}> = ({}) => {\n  const router = useRouter()\n  const [login] = useLoginMutation()\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await login({\n            variables: {\n              email: values.email,\n              password: values.password,\n            },\n          })\n          if (response.data?.Login.errors) {\n            console.log(toErrorMap(response.data.Login.errors))\n            setErrors(toErrorMap(response.data.Login.errors))\n          } else if (response.data?.Login.user) {\n            // Close socket connection which will also unregister subscriptions on the server-side.\n            subscriptionClient.close()\n\n            // Reconnect to the server.\n            //@ts-ignore\n            subscriptionClient.tryReconnect()\n\n            // Reregister all subscriptions.\n            Object.keys(subscriptionClient.operations).forEach((id) => {\n              //@ts-ignore\n              subscriptionClient.sendMessage(\n                id,\n                MessageTypes.GQL_START,\n                subscriptionClient.operations[id].options\n              )\n            })\n            if (typeof router.query.next === 'string') {\n              router.replace(router.query.next)\n            }\n            router.replace('/')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"email\" placeholder=\"email\" label=\"email\" />\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting} // show loading if is still submitting\n            >\n              login\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  )\n}\nexport default withApollo({ ssr: false })(Login)\n"]},"metadata":{},"sourceType":"module"}