{"version":3,"file":"chakra-ui-autocomplete.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport * as React from 'react'\nimport {\n  useCombobox,\n  useMultipleSelection,\n  UseMultipleSelectionProps\n} from 'downshift'\nimport matchSorter from 'match-sorter'\nimport Highlighter from 'react-highlight-words'\nimport useDeepCompareEffect from 'react-use/lib/useDeepCompareEffect'\nimport { FormLabel, FormLabelProps } from '@chakra-ui/form-control'\nimport { Text, Stack, Box, BoxProps, List, ListItem, ListIcon } from '@chakra-ui/layout'\nimport { Button, ButtonProps } from '@chakra-ui/button'\nimport { Input, InputProps } from '@chakra-ui/input'\nimport { IconProps, CheckCircleIcon, ArrowDownIcon } from '@chakra-ui/icons'\nimport { Tag, TagCloseButton, TagLabel, TagProps } from '@chakra-ui/tag'\nimport { ComponentWithAs } from '@chakra-ui/react'\n\nexport interface Item {\n  label: string\n  value: string\n}\n\nexport interface CUIAutoCompleteProps<T extends Item>\n  extends UseMultipleSelectionProps<T> {\n  items: T[]\n  placeholder: string\n  label: string\n  highlightItemBg?: string\n  onCreateItem?: (item: T) => void\n  optionFilterFunc?: (items: T[], inputValue: string) => T[]\n  itemRenderer?: (item: T) => string | JSX.Element\n  labelStyleProps?: FormLabelProps\n  inputStyleProps?: InputProps\n  toggleButtonStyleProps?: ButtonProps\n  tagStyleProps?: TagProps\n  listStyleProps?: BoxProps\n  listItemStyleProps?: BoxProps\n  emptyState?: (inputValue: string) => React.ReactNode\n  selectedIconProps?: Omit<IconProps, 'name'> & {\n    icon: IconProps['name'] | React.ComponentType\n  }\n  icon?: ComponentWithAs<\"svg\", IconProps>;\n}\n\nfunction defaultOptionFilterFunc<T>(items: T[], inputValue: string) {\n  return matchSorter(items, inputValue, { keys: ['value', 'label'] })\n}\n\nexport const CUIAutoComplete = <T extends Item>(\n  props: CUIAutoCompleteProps<T>\n): React.ReactElement<CUIAutoCompleteProps<T>> => {\n  const {\n    items,\n    optionFilterFunc = defaultOptionFilterFunc,\n    itemRenderer,\n    highlightItemBg = 'gray.100',\n    placeholder,\n    label,\n    listStyleProps,\n    labelStyleProps,\n    inputStyleProps,\n    toggleButtonStyleProps,\n    tagStyleProps,\n    selectedIconProps,\n    listItemStyleProps,\n    onCreateItem,\n    icon,\n    ...downshiftProps\n  } = props\n\n  /* States */\n  const [isCreating, setIsCreating] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n  const [inputItems, setInputItems] = React.useState<T[]>(items)\n\n  /* Refs */\n  const disclosureRef = React.useRef(null)\n\n  /* Downshift Props */\n  const {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    selectedItems\n  } = useMultipleSelection(downshiftProps)\n  const selectedItemValues = selectedItems.map((item) => item.value)\n\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    highlightedIndex,\n    getItemProps,\n    openMenu,\n    selectItem,\n    setHighlightedIndex\n  } = useCombobox({\n    inputValue,\n    selectedItem: undefined,\n    items: inputItems,\n    onInputValueChange: ({ inputValue, selectedItem }) => {\n      const filteredItems = optionFilterFunc(items, inputValue || '')\n\n      if (isCreating && filteredItems.length > 0) {\n        setIsCreating(false)\n      }\n\n      if (!selectedItem) {\n        setInputItems(filteredItems)\n      }\n    },\n    stateReducer: (state, actionAndChanges) => {\n      const { changes, type } = actionAndChanges\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur:\n          return {\n            ...changes,\n            isOpen: false\n          }\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          return {\n            ...changes,\n            highlightedIndex: state.highlightedIndex,\n            inputValue,\n            isOpen: true\n          }\n        case useCombobox.stateChangeTypes.FunctionSelectItem:\n          return {\n            ...changes,\n            inputValue\n          }\n        default:\n          return changes\n      }\n    },\n    // @ts-ignore\n    onStateChange: ({ inputValue, type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputChange:\n          setInputValue(inputValue || '')\n          break\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            if (selectedItemValues.includes(selectedItem.value)) {\n              removeSelectedItem(selectedItem)\n            } else {\n              if (onCreateItem && isCreating) {\n                onCreateItem(selectedItem)\n                setIsCreating(false)\n                setInputItems(items)\n                setInputValue('')\n              } else {\n                addSelectedItem(selectedItem)\n              }\n            }\n\n            // @ts-ignore\n            selectItem(null)\n          }\n          break\n        default:\n          break\n      }\n    }\n  })\n\n  React.useEffect(() => {\n    if (inputItems.length === 0) {\n      setIsCreating(true)\n      // @ts-ignore\n      setInputItems([{ label: `${inputValue}`, value: inputValue }])\n      setHighlightedIndex(0)\n    }\n  }, [inputItems, setIsCreating, setHighlightedIndex, inputValue])\n\n  useDeepCompareEffect(() => {\n    setInputItems(items)\n  }, [items])\n\n  /* Default Items Renderer */\n  function defaultItemRenderer<T extends Item>(selected: T) {\n    return selected.label\n  }\n\n  return (\n    <Stack>\n      <FormLabel {...{...labelStyleProps, ...getLabelProps({})}}>{label}</FormLabel>\n\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n      {selectedItems && (\n        <Stack spacing={2} isInline flexWrap='wrap'>\n          {selectedItems.map((selectedItem, index) => (\n            <Tag\n              mb={1}\n              {...tagStyleProps}\n              key={`selected-item-${index}`}\n              {...getSelectedItemProps({ selectedItem, index })}\n            >\n              <TagLabel>{selectedItem.label}</TagLabel>\n              <TagCloseButton\n                onClick={(e) => {\n                  e.stopPropagation()\n                  removeSelectedItem(selectedItem)\n                }}\n                aria-label='Remove menu selection badge'\n              />\n            </Tag>\n          ))}\n        </Stack>\n      )}\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n\n      {/* -----------Section that renders the input element ----------------- */}\n      <Stack isInline {...getComboboxProps()}>\n        <Input\n          {...inputStyleProps}\n          {...getInputProps(\n            getDropdownProps({\n              placeholder,\n              onClick: isOpen ? () => { } : openMenu,\n              onFocus: isOpen ? () => { } : openMenu,\n              ref: disclosureRef\n            })\n          )}\n        />\n        <Button\n          {...toggleButtonStyleProps}\n          {...getToggleButtonProps()}\n          aria-label='toggle menu'\n        >\n          <ArrowDownIcon />\n        </Button>\n      </Stack>\n      {/* -----------Section that renders the input element ----------------- */}\n\n      {/* -----------Section that renders the Menu Lists Component ----------------- */}\n      <Box pb={4} mb={4}>\n        <List\n          bg='white'\n          borderRadius='4px'\n          border={isOpen && '1px solid rgba(0,0,0,0.1)'}\n          boxShadow='6px 5px 8px rgba(0,50,30,0.02)'\n          {...listStyleProps}\n          {...getMenuProps()}\n        >\n          {isOpen &&\n            inputItems.map((item, index) => (\n              <ListItem\n                px={2}\n                py={1}\n                borderBottom='1px solid rgba(0,0,0,0.01)'\n                {...listItemStyleProps}\n                bg={highlightedIndex === index ? highlightItemBg : 'inherit'}\n                key={`${item.value}${index}`}\n                {...getItemProps({ item, index })}\n              >\n                {isCreating ? (\n                  <Text>\n                    <Box as='span'>Create</Box>{' '}\n                    <Box as='span' bg='yellow.300' fontWeight='bold'>\n                      \"{item.label}\"\n                    </Box>\n                  </Text>\n                ) : (\n                    <Box display='inline-flex' alignItems='center'>\n                      {selectedItemValues.includes(item.value) && (\n                        <ListIcon\n                          as={icon || CheckCircleIcon}\n                          color='green.500'\n                          role='img'\n                          display='inline'\n                          aria-label='Selected'\n                          {...selectedIconProps}\n                        />\n                      )}\n\n                      {itemRenderer ? (\n                        itemRenderer(item)\n                      ) : (\n                          <Highlighter\n                            autoEscape\n                            searchWords={[inputValue || '']}\n                            textToHighlight={defaultItemRenderer(item)}\n                          />\n                        )}\n                    </Box>\n                  )}\n              </ListItem>\n            ))}\n        </List>\n      </Box>\n      {/* ----------- End Section that renders the Menu Lists Component ----------------- */}\n    </Stack>\n  )\n}\n"],"names":["defaultOptionFilterFunc","items","inputValue","matchSorter","keys","CUIAutoComplete","props","optionFilterFunc","itemRenderer","highlightItemBg","placeholder","label","listStyleProps","labelStyleProps","inputStyleProps","toggleButtonStyleProps","tagStyleProps","selectedIconProps","listItemStyleProps","onCreateItem","icon","downshiftProps","React","isCreating","setIsCreating","setInputValue","inputItems","setInputItems","disclosureRef","useMultipleSelection","getSelectedItemProps","getDropdownProps","addSelectedItem","removeSelectedItem","selectedItems","selectedItemValues","map","item","value","useCombobox","selectedItem","undefined","onInputValueChange","filteredItems","length","stateReducer","state","actionAndChanges","changes","type","stateChangeTypes","InputBlur","isOpen","InputKeyDownEnter","ItemClick","highlightedIndex","FunctionSelectItem","onStateChange","InputChange","includes","selectItem","getToggleButtonProps","getLabelProps","getMenuProps","getInputProps","getComboboxProps","getItemProps","openMenu","setHighlightedIndex","useDeepCompareEffect","defaultItemRenderer","selected","Stack","FormLabel","spacing","isInline","flexWrap","index","Tag","mb","key","TagLabel","TagCloseButton","onClick","e","stopPropagation","Input","onFocus","ref","Button","ArrowDownIcon","Box","pb","List","bg","borderRadius","border","boxShadow","ListItem","px","py","borderBottom","Text","as","fontWeight","display","alignItems","ListIcon","CheckCircleIcon","color","role","Highlighter","autoEscape","searchWords","textToHighlight"],"mappings":"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"}